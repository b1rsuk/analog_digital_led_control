
analog_digital_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08009c90  08009c90  00019c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d8  0800a1d8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1d8  0800a1d8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1d8  0800a1d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e4  0800a3c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800a3c4  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012233  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263d  00000000  00000000  00032440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00035b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a9c  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a13  00000000  00000000  0005066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934f9  00000000  00000000  0006407f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005efc  00000000  00000000  000f75c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c74 	.word	0x08009c74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08009c74 	.word	0x08009c74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <UART_SendString>:
uint16_t adcData[2];
float adcVoltage[ADC_CHANNELS_NUM];
uint8_t flag = 1;

void UART_SendString(char *str)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff f857 	bl	8000150 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <UART_SendString+0x28>)
 80010ae:	f003 ff08 	bl	8004ec2 <HAL_UART_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000318 	.word	0x20000318

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b098      	sub	sp, #96	; 0x60
 80010c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 ff33 	bl	8001f30 <HAL_Init>

  /* USER CODE BEGIN Init */
  srand(HAL_GetTick());
 80010ca:	f000 ff89 	bl	8001fe0 <HAL_GetTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 ff6b 	bl	8005fac <srand>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f96f 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 fb21 	bl	8001720 <MX_GPIO_Init>
  MX_DMA_Init();
 80010de:	f000 fb01 	bl	80016e4 <MX_DMA_Init>
  MX_I2C1_Init();
 80010e2:	f000 fa0d 	bl	8001500 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010e6:	f000 fa39 	bl	800155c <MX_TIM1_Init>
  MX_ADC1_Init();
 80010ea:	f000 f9bb 	bl	8001464 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80010ee:	f000 facf 	bl	8001690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  PCF8574_Init(&pcf8574, &hi2c1, 0, 0, 0);
 80010f2:	2300      	movs	r3, #0
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	49a3      	ldr	r1, [pc, #652]	; (8001388 <main+0x2c8>)
 80010fc:	48a3      	ldr	r0, [pc, #652]	; (800138c <main+0x2cc>)
 80010fe:	f000 fb8c 	bl	800181a <PCF8574_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	48a2      	ldr	r0, [pc, #648]	; (8001390 <main+0x2d0>)
 8001106:	f003 fa5f 	bl	80045c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800110a:	2104      	movs	r1, #4
 800110c:	48a0      	ldr	r0, [pc, #640]	; (8001390 <main+0x2d0>)
 800110e:	f003 fa5b 	bl	80045c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001112:	2108      	movs	r1, #8
 8001114:	489e      	ldr	r0, [pc, #632]	; (8001390 <main+0x2d0>)
 8001116:	f003 fa57 	bl	80045c8 <HAL_TIM_PWM_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag) {
 800111a:	4b9e      	ldr	r3, [pc, #632]	; (8001394 <main+0x2d4>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8095 	beq.w	800124e <main+0x18e>
	        HAL_ADC_Stop_DMA(&hadc1);
 8001124:	489c      	ldr	r0, [pc, #624]	; (8001398 <main+0x2d8>)
 8001126:	f001 f93f 	bl	80023a8 <HAL_ADC_Stop_DMA>


	        float voltage0 = ((float)adcData[0] / 4095) * 3.3;
 800112a:	4b9c      	ldr	r3, [pc, #624]	; (800139c <main+0x2dc>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fdd0 	bl	8000cd4 <__aeabi_ui2f>
 8001134:	4603      	mov	r3, r0
 8001136:	499a      	ldr	r1, [pc, #616]	; (80013a0 <main+0x2e0>)
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fed7 	bl	8000eec <__aeabi_fdiv>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f971 	bl	8000428 <__aeabi_f2d>
 8001146:	a38c      	add	r3, pc, #560	; (adr r3, 8001378 <main+0x2b8>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff f9c4 	bl	80004d8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fcb6 	bl	8000ac8 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
	        float voltage1 = ((float)adcData[1] / 4095) * 3.3;
 8001160:	4b8e      	ldr	r3, [pc, #568]	; (800139c <main+0x2dc>)
 8001162:	885b      	ldrh	r3, [r3, #2]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fdb5 	bl	8000cd4 <__aeabi_ui2f>
 800116a:	4603      	mov	r3, r0
 800116c:	498c      	ldr	r1, [pc, #560]	; (80013a0 <main+0x2e0>)
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff febc 	bl	8000eec <__aeabi_fdiv>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f956 	bl	8000428 <__aeabi_f2d>
 800117c:	a37e      	add	r3, pc, #504	; (adr r3, 8001378 <main+0x2b8>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff f9a9 	bl	80004d8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fc9b 	bl	8000ac8 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	643b      	str	r3, [r7, #64]	; 0x40
	        char buffer[50];
	        snprintf(buffer, sizeof(buffer), "CH0: %.2fV, CH1: %.2fV\r\n", voltage0, voltage1);
 8001196:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001198:	f7ff f946 	bl	8000428 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011a2:	f7ff f941 	bl	8000428 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4638      	mov	r0, r7
 80011ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011b0:	e9cd 4500 	strd	r4, r5, [sp]
 80011b4:	4a7b      	ldr	r2, [pc, #492]	; (80013a4 <main+0x2e4>)
 80011b6:	2132      	movs	r1, #50	; 0x32
 80011b8:	f004 ff68 	bl	800608c <sniprintf>
	        UART_SendString(buffer);
 80011bc:	463b      	mov	r3, r7
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff68 	bl	8001094 <UART_SendString>
	        uint32_t ledValue = (uint32_t)((voltage0 / 3.3) * 1000);
 80011c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011c6:	f7ff f92f 	bl	8000428 <__aeabi_f2d>
 80011ca:	a36b      	add	r3, pc, #428	; (adr r3, 8001378 <main+0x2b8>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff faac 	bl	800072c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <main+0x2e8>)
 80011e2:	f7ff f979 	bl	80004d8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc4b 	bl	8000a88 <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ledValue);
 80011f6:	4b66      	ldr	r3, [pc, #408]	; (8001390 <main+0x2d0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34

	        uint32_t potentiometerValue = (uint32_t)((voltage1 / 6.3) * 1000);
 80011fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001200:	f7ff f912 	bl	8000428 <__aeabi_f2d>
 8001204:	a35e      	add	r3, pc, #376	; (adr r3, 8001380 <main+0x2c0>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fa8f 	bl	800072c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <main+0x2e8>)
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4603      	mov	r3, r0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, potentiometerValue);
 8001230:	4b57      	ldr	r3, [pc, #348]	; (8001390 <main+0x2d0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001236:	639a      	str	r2, [r3, #56]	; 0x38

	        adcData[0] = 0;
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <main+0x2dc>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
	        adcData[1] = 0;
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <main+0x2dc>)
 8001240:	2200      	movs	r2, #0
 8001242:	805a      	strh	r2, [r3, #2]
	        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 2);
 8001244:	2202      	movs	r2, #2
 8001246:	4955      	ldr	r1, [pc, #340]	; (800139c <main+0x2dc>)
 8001248:	4853      	ldr	r0, [pc, #332]	; (8001398 <main+0x2d8>)
 800124a:	f000 ffcf 	bl	80021ec <HAL_ADC_Start_DMA>

	  }


	  switch (ledBlinkMode) {
 800124e:	4b57      	ldr	r3, [pc, #348]	; (80013ac <main+0x2ec>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b05      	cmp	r3, #5
 8001254:	f63f af61 	bhi.w	800111a <main+0x5a>
 8001258:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <main+0x1a0>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	08001279 	.word	0x08001279
 8001264:	08001283 	.word	0x08001283
 8001268:	080012a5 	.word	0x080012a5
 800126c:	080012c7 	.word	0x080012c7
 8001270:	080012ef 	.word	0x080012ef
 8001274:	0800136d 	.word	0x0800136d
		  case LED_BLINK_OFF: {
			 PCF8574_WritePort(&pcf8574, ~0x0);
 8001278:	21ff      	movs	r1, #255	; 0xff
 800127a:	4844      	ldr	r0, [pc, #272]	; (800138c <main+0x2cc>)
 800127c:	f000 fb18 	bl	80018b0 <PCF8574_WritePort>
        	 break;
 8001280:	e079      	b.n	8001376 <main+0x2b6>
		  }

          case LED_BLINK_SLOW_SYNC: {
        	 HAL_Delay(1500);
 8001282:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001286:	f000 feb5 	bl	8001ff4 <HAL_Delay>
        	 PCF8574_WritePort(&pcf8574, 0x0);
 800128a:	2100      	movs	r1, #0
 800128c:	483f      	ldr	r0, [pc, #252]	; (800138c <main+0x2cc>)
 800128e:	f000 fb0f 	bl	80018b0 <PCF8574_WritePort>
        	 HAL_Delay(1500);
 8001292:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001296:	f000 fead 	bl	8001ff4 <HAL_Delay>
        	 PCF8574_WritePort(&pcf8574, ~0x0);
 800129a:	21ff      	movs	r1, #255	; 0xff
 800129c:	483b      	ldr	r0, [pc, #236]	; (800138c <main+0x2cc>)
 800129e:	f000 fb07 	bl	80018b0 <PCF8574_WritePort>
             break;
 80012a2:	e068      	b.n	8001376 <main+0x2b6>
          }

		  case LED_BLINK_FAST_SYNC: {
			  HAL_Delay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a8:	f000 fea4 	bl	8001ff4 <HAL_Delay>
			  PCF8574_WritePort(&pcf8574, 0x0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4837      	ldr	r0, [pc, #220]	; (800138c <main+0x2cc>)
 80012b0:	f000 fafe 	bl	80018b0 <PCF8574_WritePort>
			  HAL_Delay(500);
 80012b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b8:	f000 fe9c 	bl	8001ff4 <HAL_Delay>
			  PCF8574_WritePort(&pcf8574, ~0x0);
 80012bc:	21ff      	movs	r1, #255	; 0xff
 80012be:	4833      	ldr	r0, [pc, #204]	; (800138c <main+0x2cc>)
 80012c0:	f000 faf6 	bl	80018b0 <PCF8574_WritePort>
			  break;
 80012c4:	e057      	b.n	8001376 <main+0x2b6>
		   }

		   case LED_BLINK_FAST_SEQ: {
			   for (int led_pin = 4; led_pin < 7; led_pin++) {
 80012c6:	2304      	movs	r3, #4
 80012c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ca:	e00c      	b.n	80012e6 <main+0x226>
				   PCF8574_TogglePin(&pcf8574, led_pin);
 80012cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	482e      	ldr	r0, [pc, #184]	; (800138c <main+0x2cc>)
 80012d4:	f000 facf 	bl	8001876 <PCF8574_TogglePin>
				   HAL_Delay(500);
 80012d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012dc:	f000 fe8a 	bl	8001ff4 <HAL_Delay>
			   for (int led_pin = 4; led_pin < 7; led_pin++) {
 80012e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e2:	3301      	adds	r3, #1
 80012e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	ddef      	ble.n	80012cc <main+0x20c>
			   }
			   break;
 80012ec:	e043      	b.n	8001376 <main+0x2b6>
		   }

		   case LED_BLINK_SLOW_SEQ: {
			   for (int led_pin = 4; led_pin < 7; led_pin++) {
 80012ee:	2304      	movs	r3, #4
 80012f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80012f2:	e00c      	b.n	800130e <main+0x24e>
				   PCF8574_TogglePin(&pcf8574, led_pin);
 80012f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	4824      	ldr	r0, [pc, #144]	; (800138c <main+0x2cc>)
 80012fc:	f000 fabb 	bl	8001876 <PCF8574_TogglePin>
				   HAL_Delay(1500);
 8001300:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001304:	f000 fe76 	bl	8001ff4 <HAL_Delay>
			   for (int led_pin = 4; led_pin < 7; led_pin++) {
 8001308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800130a:	3301      	adds	r3, #1
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
 800130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001310:	2b06      	cmp	r3, #6
 8001312:	ddef      	ble.n	80012f4 <main+0x234>
			   }
			   break;
 8001314:	e02f      	b.n	8001376 <main+0x2b6>
		   }

		   case LED_BLINK_RANDOM: {

			   while(LED_BLINK_RANDOM  == ledBlinkMode) {
				   int led_pin = (rand() % 7) + 4;
 8001316:	f004 fe77 	bl	8006008 <rand>
 800131a:	4602      	mov	r2, r0
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <main+0x2f0>)
 800131e:	fb83 1302 	smull	r1, r3, r3, r2
 8001322:	4413      	add	r3, r2
 8001324:	1099      	asrs	r1, r3, #2
 8001326:	17d3      	asrs	r3, r2, #31
 8001328:	1ac9      	subs	r1, r1, r3
 800132a:	460b      	mov	r3, r1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a5b      	subs	r3, r3, r1
 8001330:	1ad1      	subs	r1, r2, r3
 8001332:	1d0b      	adds	r3, r1, #4
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
				   PCF8574_TogglePin(&pcf8574, led_pin);
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4619      	mov	r1, r3
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <main+0x2cc>)
 800133e:	f000 fa9a 	bl	8001876 <PCF8574_TogglePin>
				   HAL_Delay(700 / (rand() % 10));
 8001342:	f004 fe61 	bl	8006008 <rand>
 8001346:	4601      	mov	r1, r0
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <main+0x2f4>)
 800134a:	fb83 2301 	smull	r2, r3, r3, r1
 800134e:	109a      	asrs	r2, r3, #2
 8001350:	17cb      	asrs	r3, r1, #31
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	1aca      	subs	r2, r1, r3
 800135e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001362:	fb93 f3f2 	sdiv	r3, r3, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fe44 	bl	8001ff4 <HAL_Delay>
			   while(LED_BLINK_RANDOM  == ledBlinkMode) {
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <main+0x2ec>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b05      	cmp	r3, #5
 8001372:	d0d0      	beq.n	8001316 <main+0x256>

			   }
			   break;
 8001374:	bf00      	nop
	  if (flag) {
 8001376:	e6d0      	b.n	800111a <main+0x5a>
 8001378:	66666666 	.word	0x66666666
 800137c:	400a6666 	.word	0x400a6666
 8001380:	33333333 	.word	0x33333333
 8001384:	40193333 	.word	0x40193333
 8001388:	2000027c 	.word	0x2000027c
 800138c:	20000200 	.word	0x20000200
 8001390:	200002d0 	.word	0x200002d0
 8001394:	20000000 	.word	0x20000000
 8001398:	20000208 	.word	0x20000208
 800139c:	20000360 	.word	0x20000360
 80013a0:	457ff000 	.word	0x457ff000
 80013a4:	08009c90 	.word	0x08009c90
 80013a8:	408f4000 	.word	0x408f4000
 80013ac:	20000364 	.word	0x20000364
 80013b0:	92492493 	.word	0x92492493
 80013b4:	66666667 	.word	0x66666667

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 ff7a 	bl	80052c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80013fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001400:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fbc8 	bl	8003b9c <HAL_RCC_OscConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001412:	f000 f9fd 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001416:	230f      	movs	r3, #15
 8001418:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fe35 	bl	80040a0 <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800143c:	f000 f9e8 	bl	8001810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001440:	2302      	movs	r3, #2
 8001442:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ffb6 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001456:	f000 f9db 	bl	8001810 <Error_Handler>
  }
}
 800145a:	bf00      	nop
 800145c:	3750      	adds	r7, #80	; 0x50
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_ADC1_Init+0x98>)
 8001478:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC1_Init+0x94>)
 800147c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001480:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001484:	2201      	movs	r2, #1
 8001486:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_ADC1_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001490:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001494:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_ADC1_Init+0x94>)
 800149e:	2202      	movs	r2, #2
 80014a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a2:	4815      	ldr	r0, [pc, #84]	; (80014f8 <MX_ADC1_Init+0x94>)
 80014a4:	f000 fdca 	bl	800203c <HAL_ADC_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80014ae:	f000 f9af 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80014ba:	2307      	movs	r3, #7
 80014bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_ADC1_Init+0x94>)
 80014c4:	f000 ffce 	bl	8002464 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f000 f99f 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC1_Init+0x94>)
 80014e0:	f000 ffc0 	bl	8002464 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80014ea:	f000 f991 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000208 	.word	0x20000208
 80014fc:	40012400 	.word	0x40012400

08001500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_I2C1_Init+0x50>)
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <MX_I2C1_Init+0x54>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_I2C1_Init+0x50>)
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_I2C1_Init+0x58>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_I2C1_Init+0x50>)
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_I2C1_Init+0x50>)
 800153e:	f001 fe91 	bl	8003264 <HAL_I2C_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 f962 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000027c 	.word	0x2000027c
 8001554:	40005400 	.word	0x40005400
 8001558:	000186a0 	.word	0x000186a0

0800155c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b092      	sub	sp, #72	; 0x48
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2220      	movs	r2, #32
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fe9a 	bl	80052c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <MX_TIM1_Init+0x12c>)
 800158e:	4a3f      	ldr	r2, [pc, #252]	; (800168c <MX_TIM1_Init+0x130>)
 8001590:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <MX_TIM1_Init+0x12c>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <MX_TIM1_Init+0x12c>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <MX_TIM1_Init+0x12c>)
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <MX_TIM1_Init+0x12c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <MX_TIM1_Init+0x12c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <MX_TIM1_Init+0x12c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b6:	4834      	ldr	r0, [pc, #208]	; (8001688 <MX_TIM1_Init+0x12c>)
 80015b8:	f002 ffb6 	bl	8004528 <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80015c2:	f000 f925 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015d2:	4619      	mov	r1, r3
 80015d4:	482c      	ldr	r0, [pc, #176]	; (8001688 <MX_TIM1_Init+0x12c>)
 80015d6:	f003 fb75 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80015e0:	f000 f916 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2360      	movs	r3, #96	; 0x60
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	481f      	ldr	r0, [pc, #124]	; (8001688 <MX_TIM1_Init+0x12c>)
 800160a:	f003 f87f 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001614:	f000 f8fc 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4819      	ldr	r0, [pc, #100]	; (8001688 <MX_TIM1_Init+0x12c>)
 8001622:	f003 f873 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800162c:	f000 f8f0 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	2208      	movs	r2, #8
 8001636:	4619      	mov	r1, r3
 8001638:	4813      	ldr	r0, [pc, #76]	; (8001688 <MX_TIM1_Init+0x12c>)
 800163a:	f003 f867 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001644:	f000 f8e4 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM1_Init+0x12c>)
 800166c:	f003 fb88 	bl	8004d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001676:	f000 f8cb 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM1_Init+0x12c>)
 800167c:	f000 fa28 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001680:	bf00      	nop
 8001682:	3748      	adds	r7, #72	; 0x48
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002d0 	.word	0x200002d0
 800168c:	40012c00 	.word	0x40012c00

08001690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART2_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c8:	f003 fbab 	bl	8004e22 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f89d 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000318 	.word	0x20000318
 80016e0:	40004400 	.word	0x40004400

080016e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_DMA_Init+0x38>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <MX_DMA_Init+0x38>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_DMA_Init+0x38>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	200b      	movs	r0, #11
 8001708:	f001 f97d 	bl	8002a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800170c:	200b      	movs	r0, #11
 800170e:	f001 f996 	bl	8002a3e <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <MX_GPIO_Init+0xe0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a31      	ldr	r2, [pc, #196]	; (8001800 <MX_GPIO_Init+0xe0>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <MX_GPIO_Init+0xe0>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <MX_GPIO_Init+0xe0>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <MX_GPIO_Init+0xe0>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <MX_GPIO_Init+0xe0>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <MX_GPIO_Init+0xe0>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a25      	ldr	r2, [pc, #148]	; (8001800 <MX_GPIO_Init+0xe0>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MX_GPIO_Init+0xe0>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_GPIO_Init+0xe0>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <MX_GPIO_Init+0xe0>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_GPIO_Init+0xe0>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	481a      	ldr	r0, [pc, #104]	; (8001804 <MX_GPIO_Init+0xe4>)
 800179c:	f001 fd18 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <MX_GPIO_Init+0xe4>)
 80017ba:	f001 fb85 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017be:	2303      	movs	r3, #3
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_GPIO_Init+0xe8>)
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	480e      	ldr	r0, [pc, #56]	; (800180c <MX_GPIO_Init+0xec>)
 80017d2:	f001 fb79 	bl	8002ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2006      	movs	r0, #6
 80017dc:	f001 f913 	bl	8002a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017e0:	2006      	movs	r0, #6
 80017e2:	f001 f92c 	bl	8002a3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2007      	movs	r0, #7
 80017ec:	f001 f90b 	bl	8002a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017f0:	2007      	movs	r0, #7
 80017f2:	f001 f924 	bl	8002a3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	40011000 	.word	0x40011000
 8001808:	10210000 	.word	0x10210000
 800180c:	40010c00 	.word	0x40010c00

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	e7fe      	b.n	8001818 <Error_Handler+0x8>

0800181a <PCF8574_Init>:
 */

#include "pcf8574.h"


void PCF8574_Init(PCF8574_HandleTypeDef *pcf8574, I2C_HandleTypeDef *hi2c, uint8_t a0, uint8_t a1, uint8_t a2) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	4611      	mov	r1, r2
 8001826:	461a      	mov	r2, r3
 8001828:	460b      	mov	r3, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
    pcf8574->hi2c = hi2c;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	601a      	str	r2, [r3, #0]
    pcf8574->address = PCF8574_ADDRESS_BASE | (a0 << 1) | (a1 << 2) | (a2 << 3);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f043 034e 	orr.w	r3, r3, #78	; 0x4e
 8001840:	b25a      	sxtb	r2, r3
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b25a      	sxtb	r2, r3
 800184c:	7e3b      	ldrb	r3, [r7, #24]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b25b      	sxtb	r3, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	711a      	strb	r2, [r3, #4]
    pcf8574->portState = 0x00;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	715a      	strb	r2, [r3, #5]
    PCF8574_WritePort(pcf8574, pcf8574->portState);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	4619      	mov	r1, r3
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f821 	bl	80018b0 <PCF8574_WritePort>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <PCF8574_TogglePin>:
    PCF8574_ReadPort(pcf8574);
    return (pcf8574->portState & (1 << pin)) ? GPIO_PIN_SET : GPIO_PIN_RESET;
}


void PCF8574_TogglePin(PCF8574_HandleTypeDef *pcf8574, uint8_t pin) {
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
    pcf8574->portState ^= (1 << pin);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	795b      	ldrb	r3, [r3, #5]
 8001886:	b25a      	sxtb	r2, r3
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	b25b      	sxtb	r3, r3
 8001892:	4053      	eors	r3, r2
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	715a      	strb	r2, [r3, #5]
    PCF8574_WritePort(pcf8574, pcf8574->portState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	795b      	ldrb	r3, [r3, #5]
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f804 	bl	80018b0 <PCF8574_WritePort>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <PCF8574_WritePort>:

// نوشتن وضعیت کلی پورت به PCF8574
void PCF8574_WritePort(PCF8574_HandleTypeDef *pcf8574, uint8_t value) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
	pcf8574->portState = value;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(pcf8574->hi2c, pcf8574->address, &(pcf8574->portState), 1, HAL_MAX_DELAY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	791b      	ldrb	r3, [r3, #4]
 80018ca:	b299      	uxth	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1d5a      	adds	r2, r3, #5
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	f001 fe08 	bl	80034ec <HAL_I2C_Master_Transmit>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_MspInit+0x5c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_MspInit+0x5c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x5c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x5c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_MspInit+0x60>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_MspInit+0x60>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	40010000 	.word	0x40010000

08001948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_ADC_MspInit+0xbc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d149      	bne.n	80019fc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_ADC_MspInit+0xc0>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_ADC_MspInit+0xc0>)
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_ADC_MspInit+0xc0>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_ADC_MspInit+0xc0>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_ADC_MspInit+0xc0>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_ADC_MspInit+0xc0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001998:	2303      	movs	r3, #3
 800199a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199c:	2303      	movs	r3, #3
 800199e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	4819      	ldr	r0, [pc, #100]	; (8001a0c <HAL_ADC_MspInit+0xc4>)
 80019a8:	f001 fa8e 	bl	8002ec8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_ADC_MspInit+0xcc>)
 80019b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019e2:	f001 f847 	bl	8002a74 <HAL_DMA_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80019ec:	f7ff ff10 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019f4:	621a      	str	r2, [r3, #32]
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_ADC_MspInit+0xc8>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40012400 	.word	0x40012400
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	20000238 	.word	0x20000238
 8001a14:	40020008 	.word	0x40020008

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_I2C_MspInit+0x70>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d123      	bne.n	8001a80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_I2C_MspInit+0x74>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <HAL_I2C_MspInit+0x74>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_I2C_MspInit+0x74>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a54:	2312      	movs	r3, #18
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <HAL_I2C_MspInit+0x78>)
 8001a64:	f001 fa30 	bl	8002ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_I2C_MspInit+0x74>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_I2C_MspInit+0x74>)
 8001a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a72:	61d3      	str	r3, [r2, #28]
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_I2C_MspInit+0x74>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010c00 	.word	0x40010c00

08001a94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x34>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10b      	bne.n	8001abe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_TIM_PWM_MspInit+0x38>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_TIM_PWM_MspInit+0x38>)
 8001aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab0:	6193      	str	r3, [r2, #24]
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_TIM_PWM_MspInit+0x38>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d118      	bne.n	8001b22 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_TIM_MspPostInit+0x60>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_TIM_MspPostInit+0x60>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_MspPostInit+0x60>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b08:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_TIM_MspPostInit+0x64>)
 8001b1e:	f001 f9d3 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010800 	.word	0x40010800

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d12f      	bne.n	8001bb8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b62:	61d3      	str	r3, [r2, #28]
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b9c:	f001 f994 	bl	8002ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_UART_MspInit+0x90>)
 8001bb4:	f001 f988 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40004400 	.word	0x40004400
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c12:	f000 f9d3 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f001 fb08 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f001 fb01 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA1_Channel1_IRQHandler+0x10>)
 8001c3e:	f001 f80f 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000238 	.word	0x20000238

08001c4c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <HAL_ADC_ConvCpltCallback+0x24>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d102      	bne.n	8001c64 <HAL_ADC_ConvCpltCallback+0x18>
    	flag = 1;
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_ADC_ConvCpltCallback+0x28>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
    }
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40012400 	.word	0x40012400
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin) {
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_EXTI_Callback+0x16>
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_EXTI_Callback+0x1c>
			break;
		case GPIO_PIN_1:
			HandlePin1Interrupt();
			break;
		default:
			break;
 8001c8c:	e005      	b.n	8001c9a <HAL_GPIO_EXTI_Callback+0x22>
			HandlePin0Interrupt();
 8001c8e:	f000 f809 	bl	8001ca4 <HandlePin0Interrupt>
			break;
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_EXTI_Callback+0x22>
			HandlePin1Interrupt();
 8001c94:	f000 f83a 	bl	8001d0c <HandlePin1Interrupt>
			break;
 8001c98:	bf00      	nop
    }
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HandlePin0Interrupt>:

void HandlePin0Interrupt(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001caa:	f000 f999 	bl	8001fe0 <HAL_GetTick>
 8001cae:	6078      	str	r0, [r7, #4]

    if (current_time - last_interrupt_time < 300) {
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HandlePin0Interrupt+0x58>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001cbc:	d31a      	bcc.n	8001cf4 <HandlePin0Interrupt+0x50>
        return;
    }
    last_interrupt_time = current_time;
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HandlePin0Interrupt+0x58>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6013      	str	r3, [r2, #0]

    PCF8574_WritePort(&pcf8574, ~0x0);
 8001cc4:	21ff      	movs	r1, #255	; 0xff
 8001cc6:	480e      	ldr	r0, [pc, #56]	; (8001d00 <HandlePin0Interrupt+0x5c>)
 8001cc8:	f7ff fdf2 	bl	80018b0 <PCF8574_WritePort>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <HandlePin0Interrupt+0x60>)
 8001cd2:	f001 fa95 	bl	8003200 <HAL_GPIO_TogglePin>

    switch(ledBlinkMode) {
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HandlePin0Interrupt+0x64>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d103      	bne.n	8001ce6 <HandlePin0Interrupt+0x42>
        case LED_BLINK_RANDOM:
            ledBlinkMode = 0;
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HandlePin0Interrupt+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
            break;
 8001ce4:	e007      	b.n	8001cf6 <HandlePin0Interrupt+0x52>
        default:
            ++ledBlinkMode;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HandlePin0Interrupt+0x64>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HandlePin0Interrupt+0x64>)
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e000      	b.n	8001cf6 <HandlePin0Interrupt+0x52>
        return;
 8001cf4:	bf00      	nop
    }
}
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000368 	.word	0x20000368
 8001d00:	20000200 	.word	0x20000200
 8001d04:	40011000 	.word	0x40011000
 8001d08:	20000364 	.word	0x20000364

08001d0c <HandlePin1Interrupt>:

void HandlePin1Interrupt(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001d12:	f000 f965 	bl	8001fe0 <HAL_GetTick>
 8001d16:	6078      	str	r0, [r7, #4]

    if (current_time - last_interrupt_time < 300) {
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HandlePin1Interrupt+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d24:	d30e      	bcc.n	8001d44 <HandlePin1Interrupt+0x38>
        return;
    }
    last_interrupt_time = current_time;
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HandlePin1Interrupt+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6013      	str	r3, [r2, #0]

    static char led_button_value = 0;
    led_button_value += 10;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HandlePin1Interrupt+0x44>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	330a      	adds	r3, #10
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HandlePin1Interrupt+0x44>)
 8001d36:	701a      	strb	r2, [r3, #0]
    if (led_button_value > 255) {
        led_button_value = 0;
    }

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, led_button_value);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HandlePin1Interrupt+0x44>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HandlePin1Interrupt+0x48>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d42:	e000      	b.n	8001d46 <HandlePin1Interrupt+0x3a>
        return;
 8001d44:	bf00      	nop
}
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000036c 	.word	0x2000036c
 8001d50:	20000370 	.word	0x20000370
 8001d54:	200002d0 	.word	0x200002d0

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_kill>:

int _kill(int pid, int sig)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d70:	f003 fa7c 	bl	800526c <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2216      	movs	r2, #22
 8001d78:	601a      	str	r2, [r3, #0]
  return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_exit>:

void _exit (int status)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffe7 	bl	8001d66 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d98:	e7fe      	b.n	8001d98 <_exit+0x12>

08001d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dac:	f3af 8000 	nop.w
 8001db0:	4601      	mov	r1, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf0      	blt.n	8001dac <_read+0x12>
  }

  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e009      	b.n	8001dfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf1      	blt.n	8001de6 <_write+0x12>
  }
  return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_close>:

int _close(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	605a      	str	r2, [r3, #4]
  return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <_isatty>:

int _isatty(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f003 f9e6 	bl	800526c <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20005000 	.word	0x20005000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	20000374 	.word	0x20000374
 8001ed4:	20000390 	.word	0x20000390

08001ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
 bl  SystemInit
 8001ee4:	f7ff fff8 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eea:	490c      	ldr	r1, [pc, #48]	; (8001f1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f00:	4c09      	ldr	r4, [pc, #36]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f003 f9b3 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f12:	f7ff f8d5 	bl	80010c0 <main>
  bx lr
 8001f16:	4770      	bx	lr
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f20:	0800a1e0 	.word	0x0800a1e0
  ldr r2, =_sbss
 8001f24:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f28:	2000038c 	.word	0x2000038c

08001f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_2_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x28>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x28>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 fd55 	bl	80029f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	200f      	movs	r0, #15
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff fcca 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fd6d 	bl	8002a5a <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f98:	f000 fd35 	bl	8002a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20000008 	.word	0x20000008

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_IncTick+0x1c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x20>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	2000000c 	.word	0x2000000c
 8001fdc:	20000378 	.word	0x20000378

08001fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_GetTick+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	20000378 	.word	0x20000378

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffe0 	bl	8001fe0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0be      	b.n	80021dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fc64 	bl	8001948 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fb41 	bl	8002708 <ADC_ConversionStop_Disable>
 8002086:	4603      	mov	r3, r0
 8002088:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8099 	bne.w	80021ca <HAL_ADC_Init+0x18e>
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8095 	bne.w	80021ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a8:	f023 0302 	bic.w	r3, r3, #2
 80020ac:	f043 0202 	orr.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7b1b      	ldrb	r3, [r3, #12]
 80020c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d4:	d003      	beq.n	80020de <HAL_ADC_Init+0xa2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_ADC_Init+0xa8>
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_Init+0xaa>
 80020e4:	2300      	movs	r3, #0
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7d1b      	ldrb	r3, [r3, #20]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d119      	bne.n	8002128 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7b1b      	ldrb	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	3b01      	subs	r3, #1
 8002102:	035a      	lsls	r2, r3, #13
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	e00b      	b.n	8002128 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_ADC_Init+0x1a8>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002158:	d003      	beq.n	8002162 <HAL_ADC_Init+0x126>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d104      	bne.n	800216c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	3b01      	subs	r3, #1
 8002168:	051b      	lsls	r3, r3, #20
 800216a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	430a      	orrs	r2, r1
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_ADC_Init+0x1ac>)
 8002188:	4013      	ands	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d10b      	bne.n	80021a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021a6:	e018      	b.n	80021da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f023 0312 	bic.w	r3, r3, #18
 80021b0:	f043 0210 	orr.w	r2, r3, #16
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c8:	e007      	b.n	80021da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021da:	7dfb      	ldrb	r3, [r7, #23]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	ffe1f7fd 	.word	0xffe1f7fd
 80021e8:	ff1f0efe 	.word	0xff1f0efe

080021ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a64      	ldr	r2, [pc, #400]	; (8002394 <HAL_ADC_Start_DMA+0x1a8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_ADC_Start_DMA+0x24>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a63      	ldr	r2, [pc, #396]	; (8002398 <HAL_ADC_Start_DMA+0x1ac>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d106      	bne.n	800221e <HAL_ADC_Start_DMA+0x32>
 8002210:	4b60      	ldr	r3, [pc, #384]	; (8002394 <HAL_ADC_Start_DMA+0x1a8>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002218:	2b00      	cmp	r3, #0
 800221a:	f040 80b3 	bne.w	8002384 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_ADC_Start_DMA+0x40>
 8002228:	2302      	movs	r3, #2
 800222a:	e0ae      	b.n	800238a <HAL_ADC_Start_DMA+0x19e>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fa0d 	bl	8002654 <ADC_Enable>
 800223a:	4603      	mov	r3, r0
 800223c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 809a 	bne.w	800237a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_ADC_Start_DMA+0x1ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d105      	bne.n	8002270 <HAL_ADC_Start_DMA+0x84>
 8002264:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <HAL_ADC_Start_DMA+0x1a8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d115      	bne.n	800229c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d026      	beq.n	80022d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002292:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800229a:	e01d      	b.n	80022d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_ADC_Start_DMA+0x1a8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_ADC_Start_DMA+0xd0>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a38      	ldr	r2, [pc, #224]	; (8002398 <HAL_ADC_Start_DMA+0x1ac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10d      	bne.n	80022d8 <HAL_ADC_Start_DMA+0xec>
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_ADC_Start_DMA+0x1a8>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f023 0206 	bic.w	r2, r3, #6
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_ADC_Start_DMA+0x1b0>)
 8002306:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_ADC_Start_DMA+0x1b4>)
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_ADC_Start_DMA+0x1b8>)
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0202 	mvn.w	r2, #2
 8002320:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002330:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a18      	ldr	r0, [r3, #32]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	334c      	adds	r3, #76	; 0x4c
 800233c:	4619      	mov	r1, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f000 fbf1 	bl	8002b28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002350:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002354:	d108      	bne.n	8002368 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002364:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002366:	e00f      	b.n	8002388 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002376:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002378:	e006      	b.n	8002388 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002382:	e001      	b.n	8002388 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002388:	7dfb      	ldrb	r3, [r7, #23]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40012400 	.word	0x40012400
 8002398:	40012800 	.word	0x40012800
 800239c:	0800278b 	.word	0x0800278b
 80023a0:	08002807 	.word	0x08002807
 80023a4:	08002823 	.word	0x08002823

080023a8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Stop_DMA+0x1a>
 80023be:	2302      	movs	r3, #2
 80023c0:	e03a      	b.n	8002438 <HAL_ADC_Stop_DMA+0x90>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f99c 	bl	8002708 <ADC_ConversionStop_Disable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d129      	bne.n	800242e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11a      	bne.n	800242e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fbf3 	bl	8002be8 <HAL_DMA_Abort>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
 8002420:	e005      	b.n	800242e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x20>
 8002480:	2302      	movs	r3, #2
 8002482:	e0dc      	b.n	800263e <HAL_ADC_ConfigChannel+0x1da>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b06      	cmp	r3, #6
 8002492:	d81c      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	3b05      	subs	r3, #5
 80024a6:	221f      	movs	r2, #31
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4019      	ands	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b05      	subs	r3, #5
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34
 80024cc:	e03c      	b.n	8002548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d81c      	bhi.n	8002510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b23      	subs	r3, #35	; 0x23
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4019      	ands	r1, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b23      	subs	r3, #35	; 0x23
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
 800250e:	e01b      	b.n	8002548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b41      	subs	r3, #65	; 0x41
 8002522:	221f      	movs	r2, #31
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	4019      	ands	r1, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b41      	subs	r3, #65	; 0x41
 800253c:	fa00 f203 	lsl.w	r2, r0, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b09      	cmp	r3, #9
 800254e:	d91c      	bls.n	800258a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68d9      	ldr	r1, [r3, #12]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	3b1e      	subs	r3, #30
 8002562:	2207      	movs	r2, #7
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	4019      	ands	r1, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6898      	ldr	r0, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	3b1e      	subs	r3, #30
 800257c:	fa00 f203 	lsl.w	r2, r0, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	e019      	b.n	80025be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	2207      	movs	r2, #7
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4019      	ands	r1, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d003      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ca:	2b11      	cmp	r3, #17
 80025cc:	d132      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_ADC_ConfigChannel+0x1e4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d125      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d126      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d11a      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_ADC_ConfigChannel+0x1e8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_ADC_ConfigChannel+0x1ec>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	0c9a      	lsrs	r2, r3, #18
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002614:	e002      	b.n	800261c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3b01      	subs	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x1b2>
 8002622:	e007      	b.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40012400 	.word	0x40012400
 800264c:	20000004 	.word	0x20000004
 8002650:	431bde83 	.word	0x431bde83

08002654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d040      	beq.n	80026f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <ADC_Enable+0xac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <ADC_Enable+0xb0>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002690:	e002      	b.n	8002698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269e:	f7ff fc9f 	bl	8001fe0 <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026a4:	e01f      	b.n	80026e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026a6:	f7ff fc9b 	bl	8001fe0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d918      	bls.n	80026e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d011      	beq.n	80026e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d1d8      	bne.n	80026a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000004 	.word	0x20000004
 8002704:	431bde83 	.word	0x431bde83

08002708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d12e      	bne.n	8002780 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002732:	f7ff fc55 	bl	8001fe0 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002738:	e01b      	b.n	8002772 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800273a:	f7ff fc51 	bl	8001fe0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d914      	bls.n	8002772 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d0dc      	beq.n	800273a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d127      	bne.n	80027f4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027be:	d115      	bne.n	80027ec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fa2d 	bl	8001c4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027f2:	e004      	b.n	80027fe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff fe13 	bl	8002440 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fe02 	bl	8002452 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4906      	ldr	r1, [pc, #24]	; (80028f0 <__NVIC_EnableIRQ+0x34>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029bc:	d301      	bcc.n	80029c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029be:	2301      	movs	r3, #1
 80029c0:	e00f      	b.n	80029e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <SysTick_Config+0x40>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ca:	210f      	movs	r1, #15
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d0:	f7ff ff90 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <SysTick_Config+0x40>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <SysTick_Config+0x40>)
 80029dc:	2207      	movs	r2, #7
 80029de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff2d 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a18:	f7ff ff42 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff90 	bl	8002948 <NVIC_EncodePriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff5f 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff35 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffa2 	bl	80029ac <SysTick_Config>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e043      	b.n	8002b12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_DMA_Init+0xa8>)
 8002a92:	4413      	add	r3, r2
 8002a94:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_DMA_Init+0xac>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	009a      	lsls	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_DMA_Init+0xb0>)
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002abe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ac2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	bffdfff8 	.word	0xbffdfff8
 8002b20:	cccccccd 	.word	0xcccccccd
 8002b24:	40020000 	.word	0x40020000

08002b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_DMA_Start_IT+0x20>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e04b      	b.n	8002be0 <HAL_DMA_Start_IT+0xb8>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d13a      	bne.n	8002bd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f973 	bl	8002e6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 020e 	orr.w	r2, r2, #14
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e00f      	b.n	8002bc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 020a 	orr.w	r2, r2, #10
 8002bbe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e005      	b.n	8002bde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d008      	beq.n	8002c12 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2204      	movs	r2, #4
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e020      	b.n	8002c54 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 020e 	bic.w	r2, r2, #14
 8002c20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d04f      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a66      	ldr	r2, [pc, #408]	; (8002e50 <HAL_DMA_IRQHandler+0x1f0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d029      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xae>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_DMA_IRQHandler+0x1f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xaa>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_DMA_IRQHandler+0x1f8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01a      	beq.n	8002d04 <HAL_DMA_IRQHandler+0xa4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a62      	ldr	r2, [pc, #392]	; (8002e5c <HAL_DMA_IRQHandler+0x1fc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d012      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x9e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a60      	ldr	r2, [pc, #384]	; (8002e60 <HAL_DMA_IRQHandler+0x200>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x98>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5f      	ldr	r2, [pc, #380]	; (8002e64 <HAL_DMA_IRQHandler+0x204>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d102      	bne.n	8002cf2 <HAL_DMA_IRQHandler+0x92>
 8002cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf0:	e00e      	b.n	8002d10 <HAL_DMA_IRQHandler+0xb0>
 8002cf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cf6:	e00b      	b.n	8002d10 <HAL_DMA_IRQHandler+0xb0>
 8002cf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cfc:	e008      	b.n	8002d10 <HAL_DMA_IRQHandler+0xb0>
 8002cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d02:	e005      	b.n	8002d10 <HAL_DMA_IRQHandler+0xb0>
 8002d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d08:	e002      	b.n	8002d10 <HAL_DMA_IRQHandler+0xb0>
 8002d0a:	2340      	movs	r3, #64	; 0x40
 8002d0c:	e000      	b.n	8002d10 <HAL_DMA_IRQHandler+0xb0>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	4a55      	ldr	r2, [pc, #340]	; (8002e68 <HAL_DMA_IRQHandler+0x208>)
 8002d12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8094 	beq.w	8002e46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d26:	e08e      	b.n	8002e46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d056      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x186>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d051      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 020a 	bic.w	r2, r2, #10
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_DMA_IRQHandler+0x1f0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d029      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x166>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <HAL_DMA_IRQHandler+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x162>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <HAL_DMA_IRQHandler+0x1f8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x15c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <HAL_DMA_IRQHandler+0x1fc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d012      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x156>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_DMA_IRQHandler+0x200>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x150>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <HAL_DMA_IRQHandler+0x204>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d102      	bne.n	8002daa <HAL_DMA_IRQHandler+0x14a>
 8002da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002da8:	e00e      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x168>
 8002daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dae:	e00b      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x168>
 8002db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db4:	e008      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x168>
 8002db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dba:	e005      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x168>
 8002dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc0:	e002      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x168>
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e000      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x168>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <HAL_DMA_IRQHandler+0x208>)
 8002dca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d034      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002de4:	e02f      	b.n	8002e46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2208      	movs	r2, #8
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d028      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x1e8>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 020e 	bic.w	r2, r2, #14
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
    }
  }
  return;
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
}
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40020008 	.word	0x40020008
 8002e54:	4002001c 	.word	0x4002001c
 8002e58:	40020030 	.word	0x40020030
 8002e5c:	40020044 	.word	0x40020044
 8002e60:	40020058 	.word	0x40020058
 8002e64:	4002006c 	.word	0x4002006c
 8002e68:	40020000 	.word	0x40020000

08002e6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d108      	bne.n	8002eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eaa:	e007      	b.n	8002ebc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b08b      	sub	sp, #44	; 0x2c
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eda:	e169      	b.n	80031b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002edc:	2201      	movs	r2, #1
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 8158 	bne.w	80031aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a9a      	ldr	r2, [pc, #616]	; (8003168 <HAL_GPIO_Init+0x2a0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d05e      	beq.n	8002fc2 <HAL_GPIO_Init+0xfa>
 8002f04:	4a98      	ldr	r2, [pc, #608]	; (8003168 <HAL_GPIO_Init+0x2a0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d875      	bhi.n	8002ff6 <HAL_GPIO_Init+0x12e>
 8002f0a:	4a98      	ldr	r2, [pc, #608]	; (800316c <HAL_GPIO_Init+0x2a4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d058      	beq.n	8002fc2 <HAL_GPIO_Init+0xfa>
 8002f10:	4a96      	ldr	r2, [pc, #600]	; (800316c <HAL_GPIO_Init+0x2a4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d86f      	bhi.n	8002ff6 <HAL_GPIO_Init+0x12e>
 8002f16:	4a96      	ldr	r2, [pc, #600]	; (8003170 <HAL_GPIO_Init+0x2a8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d052      	beq.n	8002fc2 <HAL_GPIO_Init+0xfa>
 8002f1c:	4a94      	ldr	r2, [pc, #592]	; (8003170 <HAL_GPIO_Init+0x2a8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d869      	bhi.n	8002ff6 <HAL_GPIO_Init+0x12e>
 8002f22:	4a94      	ldr	r2, [pc, #592]	; (8003174 <HAL_GPIO_Init+0x2ac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d04c      	beq.n	8002fc2 <HAL_GPIO_Init+0xfa>
 8002f28:	4a92      	ldr	r2, [pc, #584]	; (8003174 <HAL_GPIO_Init+0x2ac>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d863      	bhi.n	8002ff6 <HAL_GPIO_Init+0x12e>
 8002f2e:	4a92      	ldr	r2, [pc, #584]	; (8003178 <HAL_GPIO_Init+0x2b0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d046      	beq.n	8002fc2 <HAL_GPIO_Init+0xfa>
 8002f34:	4a90      	ldr	r2, [pc, #576]	; (8003178 <HAL_GPIO_Init+0x2b0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d85d      	bhi.n	8002ff6 <HAL_GPIO_Init+0x12e>
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d82a      	bhi.n	8002f94 <HAL_GPIO_Init+0xcc>
 8002f3e:	2b12      	cmp	r3, #18
 8002f40:	d859      	bhi.n	8002ff6 <HAL_GPIO_Init+0x12e>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_GPIO_Init+0x80>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002fc3 	.word	0x08002fc3
 8002f4c:	08002f9d 	.word	0x08002f9d
 8002f50:	08002faf 	.word	0x08002faf
 8002f54:	08002ff1 	.word	0x08002ff1
 8002f58:	08002ff7 	.word	0x08002ff7
 8002f5c:	08002ff7 	.word	0x08002ff7
 8002f60:	08002ff7 	.word	0x08002ff7
 8002f64:	08002ff7 	.word	0x08002ff7
 8002f68:	08002ff7 	.word	0x08002ff7
 8002f6c:	08002ff7 	.word	0x08002ff7
 8002f70:	08002ff7 	.word	0x08002ff7
 8002f74:	08002ff7 	.word	0x08002ff7
 8002f78:	08002ff7 	.word	0x08002ff7
 8002f7c:	08002ff7 	.word	0x08002ff7
 8002f80:	08002ff7 	.word	0x08002ff7
 8002f84:	08002ff7 	.word	0x08002ff7
 8002f88:	08002ff7 	.word	0x08002ff7
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002fb9 	.word	0x08002fb9
 8002f94:	4a79      	ldr	r2, [pc, #484]	; (800317c <HAL_GPIO_Init+0x2b4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f9a:	e02c      	b.n	8002ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	623b      	str	r3, [r7, #32]
          break;
 8002fa2:	e029      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	623b      	str	r3, [r7, #32]
          break;
 8002fac:	e024      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	623b      	str	r3, [r7, #32]
          break;
 8002fb6:	e01f      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	623b      	str	r3, [r7, #32]
          break;
 8002fc0:	e01a      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	623b      	str	r3, [r7, #32]
          break;
 8002fce:	e013      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	611a      	str	r2, [r3, #16]
          break;
 8002fe2:	e009      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	615a      	str	r2, [r3, #20]
          break;
 8002fee:	e003      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
          break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x130>
          break;
 8002ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2bff      	cmp	r3, #255	; 0xff
 8002ffc:	d801      	bhi.n	8003002 <HAL_GPIO_Init+0x13a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	e001      	b.n	8003006 <HAL_GPIO_Init+0x13e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2bff      	cmp	r3, #255	; 0xff
 800300c:	d802      	bhi.n	8003014 <HAL_GPIO_Init+0x14c>
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	e002      	b.n	800301a <HAL_GPIO_Init+0x152>
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3b08      	subs	r3, #8
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	210f      	movs	r1, #15
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80b1 	beq.w	80031aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003048:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_GPIO_Init+0x2b8>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4a4c      	ldr	r2, [pc, #304]	; (8003180 <HAL_GPIO_Init+0x2b8>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6193      	str	r3, [r2, #24]
 8003054:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_GPIO_Init+0x2b8>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003060:	4a48      	ldr	r2, [pc, #288]	; (8003184 <HAL_GPIO_Init+0x2bc>)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220f      	movs	r2, #15
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a40      	ldr	r2, [pc, #256]	; (8003188 <HAL_GPIO_Init+0x2c0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <HAL_GPIO_Init+0x1ec>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_GPIO_Init+0x2c4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00d      	beq.n	80030b0 <HAL_GPIO_Init+0x1e8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3e      	ldr	r2, [pc, #248]	; (8003190 <HAL_GPIO_Init+0x2c8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <HAL_GPIO_Init+0x1e4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <HAL_GPIO_Init+0x2cc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_GPIO_Init+0x1e0>
 80030a4:	2303      	movs	r3, #3
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_Init+0x1ee>
 80030a8:	2304      	movs	r3, #4
 80030aa:	e004      	b.n	80030b6 <HAL_GPIO_Init+0x1ee>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e002      	b.n	80030b6 <HAL_GPIO_Init+0x1ee>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_GPIO_Init+0x1ee>
 80030b4:	2300      	movs	r3, #0
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	f002 0203 	and.w	r2, r2, #3
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	4093      	lsls	r3, r2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030c6:	492f      	ldr	r1, [pc, #188]	; (8003184 <HAL_GPIO_Init+0x2bc>)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	492c      	ldr	r1, [pc, #176]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	4928      	ldr	r1, [pc, #160]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4922      	ldr	r1, [pc, #136]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	43db      	mvns	r3, r3
 800311e:	491e      	ldr	r1, [pc, #120]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 8003120:	4013      	ands	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	4918      	ldr	r1, [pc, #96]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	43db      	mvns	r3, r3
 8003146:	4914      	ldr	r1, [pc, #80]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 8003148:	4013      	ands	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d021      	beq.n	800319c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	490e      	ldr	r1, [pc, #56]	; (8003198 <HAL_GPIO_Init+0x2d0>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	e021      	b.n	80031aa <HAL_GPIO_Init+0x2e2>
 8003166:	bf00      	nop
 8003168:	10320000 	.word	0x10320000
 800316c:	10310000 	.word	0x10310000
 8003170:	10220000 	.word	0x10220000
 8003174:	10210000 	.word	0x10210000
 8003178:	10120000 	.word	0x10120000
 800317c:	10110000 	.word	0x10110000
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000
 8003188:	40010800 	.word	0x40010800
 800318c:	40010c00 	.word	0x40010c00
 8003190:	40011000 	.word	0x40011000
 8003194:	40011400 	.word	0x40011400
 8003198:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_GPIO_Init+0x304>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4909      	ldr	r1, [pc, #36]	; (80031cc <HAL_GPIO_Init+0x304>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	3301      	adds	r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f47f ae8e 	bne.w	8002edc <HAL_GPIO_Init+0x14>
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	372c      	adds	r7, #44	; 0x2c
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40010400 	.word	0x40010400

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ec:	e003      	b.n	80031f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	611a      	str	r2, [r3, #16]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	041a      	lsls	r2, r3, #16
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43d9      	mvns	r1, r3
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	400b      	ands	r3, r1
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	611a      	str	r2, [r3, #16]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
	...

08003234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fd10 	bl	8001c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e12b      	b.n	80034ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fbc4 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c8:	f001 f832 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a81      	ldr	r2, [pc, #516]	; (80034d8 <HAL_I2C_Init+0x274>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d807      	bhi.n	80032e8 <HAL_I2C_Init+0x84>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_I2C_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e006      	b.n	80032f6 <HAL_I2C_Init+0x92>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a7d      	ldr	r2, [pc, #500]	; (80034e0 <HAL_I2C_Init+0x27c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0e7      	b.n	80034ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a78      	ldr	r2, [pc, #480]	; (80034e4 <HAL_I2C_Init+0x280>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a6a      	ldr	r2, [pc, #424]	; (80034d8 <HAL_I2C_Init+0x274>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <HAL_I2C_Init+0xd4>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	e009      	b.n	800334c <HAL_I2C_Init+0xe8>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <HAL_I2C_Init+0x284>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	3301      	adds	r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800335e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	495c      	ldr	r1, [pc, #368]	; (80034d8 <HAL_I2C_Init+0x274>)
 8003368:	428b      	cmp	r3, r1
 800336a:	d819      	bhi.n	80033a0 <HAL_I2C_Init+0x13c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e59      	subs	r1, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb1 f3f3 	udiv	r3, r1, r3
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003380:	400b      	ands	r3, r1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_I2C_Init+0x138>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e59      	subs	r1, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fbb1 f3f3 	udiv	r3, r1, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339a:	e051      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 800339c:	2304      	movs	r3, #4
 800339e:	e04f      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <HAL_I2C_Init+0x168>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e012      	b.n	80033f2 <HAL_I2C_Init+0x18e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	0099      	lsls	r1, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Init+0x196>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10e      	bne.n	8003420 <HAL_I2C_Init+0x1bc>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e58      	subs	r0, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	440b      	add	r3, r1
 8003410:	fbb0 f3f3 	udiv	r3, r0, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e58      	subs	r0, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	0099      	lsls	r1, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	6809      	ldr	r1, [r1, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800346e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6911      	ldr	r1, [r2, #16]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	000186a0 	.word	0x000186a0
 80034dc:	001e847f 	.word	0x001e847f
 80034e0:	003d08ff 	.word	0x003d08ff
 80034e4:	431bde83 	.word	0x431bde83
 80034e8:	10624dd3 	.word	0x10624dd3

080034ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	460b      	mov	r3, r1
 80034fa:	817b      	strh	r3, [r7, #10]
 80034fc:	4613      	mov	r3, r2
 80034fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7fe fd6e 	bl	8001fe0 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	f040 80e0 	bne.w	80036d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2319      	movs	r3, #25
 800351a:	2201      	movs	r2, #1
 800351c:	4970      	ldr	r1, [pc, #448]	; (80036e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f964 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	e0d3      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2C_Master_Transmit+0x50>
 8003538:	2302      	movs	r3, #2
 800353a:	e0cc      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d007      	beq.n	8003562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2221      	movs	r2, #33	; 0x21
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2210      	movs	r2, #16
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	893a      	ldrh	r2, [r7, #8]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a50      	ldr	r2, [pc, #320]	; (80036e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f89c 	bl	80036e8 <I2C_MasterRequestWrite>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e08d      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035d0:	e066      	b.n	80036a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa22 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d107      	bne.n	80035fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06b      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_I2C_Master_Transmit+0x188>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d017      	beq.n	8003674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	6a39      	ldr	r1, [r7, #32]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fa19 	bl	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00d      	beq.n	80036a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2b04      	cmp	r3, #4
 800368a:	d107      	bne.n	800369c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e01a      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d194      	bne.n	80035d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	00100002 	.word	0x00100002
 80036e4:	ffff0000 	.word	0xffff0000

080036e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d006      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d003      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003710:	d108      	bne.n	8003724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00b      	b.n	800373c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	2b12      	cmp	r3, #18
 800372a:	d107      	bne.n	800373c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f84f 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003762:	d103      	bne.n	800376c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e035      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003778:	d108      	bne.n	800378c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e01b      	b.n	80037c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	11db      	asrs	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f063 030f 	orn	r3, r3, #15
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <I2C_MasterRequestWrite+0xfc>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f898 	bl	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e010      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <I2C_MasterRequestWrite+0x100>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f888 	bl	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010008 	.word	0x00010008
 80037e8:	00010002 	.word	0x00010002

080037ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fc:	e048      	b.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003804:	d044      	beq.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fe fbeb 	bl	8001fe0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d139      	bne.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10d      	bne.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	e00c      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d116      	bne.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e023      	b.n	80038d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	43da      	mvns	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	e00c      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d093      	beq.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ee:	e071      	b.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d123      	bne.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0204 	orr.w	r2, r3, #4
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e067      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394e:	d041      	beq.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fe fb46 	bl	8001fe0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d136      	bne.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10c      	bne.n	800398a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e00b      	b.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	43da      	mvns	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e021      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	0c1b      	lsrs	r3, r3, #16
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d10c      	bne.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	43da      	mvns	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e00b      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f af6d 	bne.w	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2c:	e034      	b.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f886 	bl	8003b40 <I2C_IsAcknowledgeFailed>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e034      	b.n	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a44:	d028      	beq.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe facb 	bl	8001fe0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11d      	bne.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d016      	beq.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e007      	b.n	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d1c3      	bne.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003abc:	e034      	b.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f83e 	bl	8003b40 <I2C_IsAcknowledgeFailed>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e034      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad4:	d028      	beq.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe fa83 	bl	8001fe0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11d      	bne.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d016      	beq.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d1c3      	bne.n	8003abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d11b      	bne.n	8003b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e272      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8087 	beq.w	8003cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bbc:	4b92      	ldr	r3, [pc, #584]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d00c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc8:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d112      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5e>
 8003bd4:	4b8c      	ldr	r3, [pc, #560]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b89      	ldr	r3, [pc, #548]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x12c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d168      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e24c      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x76>
 8003c04:	4b80      	ldr	r3, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7f      	ldr	r2, [pc, #508]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e02e      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x98>
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7a      	ldr	r2, [pc, #488]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a77      	ldr	r2, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0xbc>
 8003c3e:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b6f      	ldr	r3, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c58:	4b6b      	ldr	r3, [pc, #428]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a67      	ldr	r2, [pc, #412]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe f9b2 	bl	8001fe0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe f9ae 	bl	8001fe0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e200      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe4>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f99e 	bl	8001fe0 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe f99a 	bl	8001fe0 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1ec      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x10c>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd6:	4b4c      	ldr	r3, [pc, #304]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ce2:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x18c>
 8003cee:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x176>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1c0      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4939      	ldr	r1, [pc, #228]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	e03a      	b.n	8003d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x270>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fe f953 	bl	8001fe0 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fe f94f 	bl	8001fe0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e1a1      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4927      	ldr	r1, [pc, #156]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
 8003d70:	e015      	b.n	8003d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x270>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe f932 	bl	8001fe0 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d80:	f7fe f92e 	bl	8001fe0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e180      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03a      	beq.n	8003e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_RCC_OscConfig+0x274>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db8:	f7fe f912 	bl	8001fe0 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fe f90e 	bl	8001fe0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e160      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f000 face 	bl	8004380 <RCC_Delay>
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x274>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe f8f8 	bl	8001fe0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df2:	e00f      	b.n	8003e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe f8f4 	bl	8001fe0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d908      	bls.n	8003e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e146      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	42420000 	.word	0x42420000
 8003e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e9      	bne.n	8003df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a6 	beq.w	8003f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b8b      	ldr	r3, [pc, #556]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b88      	ldr	r3, [pc, #544]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4a87      	ldr	r2, [pc, #540]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	61d3      	str	r3, [r2, #28]
 8003e4a:	4b85      	ldr	r3, [pc, #532]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b82      	ldr	r3, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b7f      	ldr	r3, [pc, #508]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7e      	ldr	r2, [pc, #504]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fe f8b5 	bl	8001fe0 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fe f8b1 	bl	8001fe0 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e103      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b75      	ldr	r3, [pc, #468]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x312>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	e02d      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x334>
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a69      	ldr	r2, [pc, #420]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a66      	ldr	r2, [pc, #408]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	e01c      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x356>
 8003ed8:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a60      	ldr	r2, [pc, #384]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4a5d      	ldr	r2, [pc, #372]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6213      	str	r3, [r2, #32]
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a5a      	ldr	r2, [pc, #360]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6213      	str	r3, [r2, #32]
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4a57      	ldr	r2, [pc, #348]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d015      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fe f865 	bl	8001fe0 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe f861 	bl	8001fe0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0b1      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ee      	beq.n	8003f1a <HAL_RCC_OscConfig+0x37e>
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f84f 	bl	8001fe0 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe f84b 	bl	8001fe0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e09b      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ee      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8087 	beq.w	8004092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d061      	beq.n	8004054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d146      	bne.n	8004026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe f81f 	bl	8001fe0 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fe f81b 	bl	8001fe0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e06d      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d108      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a19      	ldr	r1, [r3, #32]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	491b      	ldr	r1, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd ffef 	bl	8001fe0 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004006:	f7fd ffeb 	bl	8001fe0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e03d      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x46a>
 8004024:	e035      	b.n	8004092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fd ffd8 	bl	8001fe0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd ffd4 	bl	8001fe0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e026      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x498>
 8004052:	e01e      	b.n	8004092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e019      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x500>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000

080040a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0207 	bic.w	r2, r3, #7
 80040ca:	4965      	ldr	r1, [pc, #404]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800411e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e073      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06b      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4936      	ldr	r1, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fd ff26 	bl	8001fe0 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd ff22 	bl	8001fe0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e053      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d210      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	4922      	ldr	r1, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1cc>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fe84 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
 8004268:	08009cac 	.word	0x08009cac
 800426c:	20000004 	.word	0x20000004
 8004270:	20000008 	.word	0x20000008

08004274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_GetSysClockFreq+0x94>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x30>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x36>
 80042a2:	e027      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042a6:	613b      	str	r3, [r7, #16]
      break;
 80042a8:	e027      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0c9b      	lsrs	r3, r3, #18
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_RCC_GetSysClockFreq+0x94>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0c5b      	lsrs	r3, r3, #17
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	4a11      	ldr	r2, [pc, #68]	; (8004314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042d6:	fb03 f202 	mul.w	r2, r3, r2
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e004      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	613b      	str	r3, [r7, #16]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042f6:	613b      	str	r3, [r7, #16]
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	693b      	ldr	r3, [r7, #16]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	007a1200 	.word	0x007a1200
 8004310:	08009cc4 	.word	0x08009cc4
 8004314:	08009cd4 	.word	0x08009cd4
 8004318:	003d0900 	.word	0x003d0900

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <HAL_RCC_GetHCLKFreq+0x10>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20000004 	.word	0x20000004

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff2 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	08009cbc 	.word	0x08009cbc

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffde 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	08009cbc 	.word	0x08009cbc

08004380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <RCC_Delay+0x34>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <RCC_Delay+0x38>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800439c:	bf00      	nop
  }
  while (Delay --);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f9      	bne.n	800439c <RCC_Delay+0x1c>
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	20000004 	.word	0x20000004
 80043b8:	10624dd3 	.word	0x10624dd3

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d07d      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043d8:	2300      	movs	r3, #0
 80043da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043dc:	4b4f      	ldr	r3, [pc, #316]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	4b4c      	ldr	r3, [pc, #304]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	61d3      	str	r3, [r2, #28]
 80043f4:	4b49      	ldr	r3, [pc, #292]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d118      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004410:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a42      	ldr	r2, [pc, #264]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441c:	f7fd fde0 	bl	8001fe0 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fd fddc 	bl	8001fe0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e06d      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d027      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d014      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fd fdab 	bl	8001fe0 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd fda7 	bl	8001fe0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e036      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ee      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4917      	ldr	r1, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c8:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	490b      	ldr	r1, [pc, #44]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4904      	ldr	r1, [pc, #16]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
 8004524:	42420440 	.word	0x42420440

08004528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e041      	b.n	80045be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd faa0 	bl	8001a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 f992 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_TIM_PWM_Start+0x24>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e022      	b.n	8004632 <HAL_TIM_PWM_Start+0x6a>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d109      	bne.n	8004606 <HAL_TIM_PWM_Start+0x3e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e015      	b.n	8004632 <HAL_TIM_PWM_Start+0x6a>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d109      	bne.n	8004620 <HAL_TIM_PWM_Start+0x58>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e008      	b.n	8004632 <HAL_TIM_PWM_Start+0x6a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e05e      	b.n	80046f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <HAL_TIM_PWM_Start+0x82>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004648:	e013      	b.n	8004672 <HAL_TIM_PWM_Start+0xaa>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d104      	bne.n	800465a <HAL_TIM_PWM_Start+0x92>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	e00b      	b.n	8004672 <HAL_TIM_PWM_Start+0xaa>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d104      	bne.n	800466a <HAL_TIM_PWM_Start+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004668:	e003      	b.n	8004672 <HAL_TIM_PWM_Start+0xaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fafe 	bl	8004c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <HAL_TIM_PWM_Start+0x138>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d107      	bne.n	800469a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_TIM_PWM_Start+0x138>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIM_PWM_Start+0xfa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d009      	beq.n	80046c2 <HAL_TIM_PWM_Start+0xfa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a14      	ldr	r2, [pc, #80]	; (8004704 <HAL_TIM_PWM_Start+0x13c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIM_PWM_Start+0xfa>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a12      	ldr	r2, [pc, #72]	; (8004708 <HAL_TIM_PWM_Start+0x140>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d111      	bne.n	80046e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d010      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	e007      	b.n	80046f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800

0800470c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004726:	2302      	movs	r3, #2
 8004728:	e0ae      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b0c      	cmp	r3, #12
 8004736:	f200 809f 	bhi.w	8004878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004775 	.word	0x08004775
 8004744:	08004879 	.word	0x08004879
 8004748:	08004879 	.word	0x08004879
 800474c:	08004879 	.word	0x08004879
 8004750:	080047b5 	.word	0x080047b5
 8004754:	08004879 	.word	0x08004879
 8004758:	08004879 	.word	0x08004879
 800475c:	08004879 	.word	0x08004879
 8004760:	080047f7 	.word	0x080047f7
 8004764:	08004879 	.word	0x08004879
 8004768:	08004879 	.word	0x08004879
 800476c:	08004879 	.word	0x08004879
 8004770:	08004837 	.word	0x08004837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f8f6 	bl	800496c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0208 	orr.w	r2, r2, #8
 800478e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	619a      	str	r2, [r3, #24]
      break;
 80047b2:	e064      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f93c 	bl	8004a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6999      	ldr	r1, [r3, #24]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	021a      	lsls	r2, r3, #8
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	619a      	str	r2, [r3, #24]
      break;
 80047f4:	e043      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f985 	bl	8004b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0208 	orr.w	r2, r2, #8
 8004810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0204 	bic.w	r2, r2, #4
 8004820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	61da      	str	r2, [r3, #28]
      break;
 8004834:	e023      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f9cf 	bl	8004be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69d9      	ldr	r1, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	021a      	lsls	r2, r3, #8
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	61da      	str	r2, [r3, #28]
      break;
 8004876:	e002      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	75fb      	strb	r3, [r7, #23]
      break;
 800487c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <TIM_Base_SetConfig+0xd0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x30>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x30>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0xd4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x30>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0xd8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <TIM_Base_SetConfig+0xd0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_Base_SetConfig+0x62>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d007      	beq.n	80048f2 <TIM_Base_SetConfig+0x62>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <TIM_Base_SetConfig+0xd4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_Base_SetConfig+0x62>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <TIM_Base_SetConfig+0xd8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <TIM_Base_SetConfig+0xd0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	611a      	str	r2, [r3, #16]
  }
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800

0800496c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f023 0201 	bic.w	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 0302 	bic.w	r3, r3, #2
 80049b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <TIM_OC1_SetConfig+0xc8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10c      	bne.n	80049e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0308 	bic.w	r3, r3, #8
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <TIM_OC1_SetConfig+0xc8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d111      	bne.n	8004a0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00

08004a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f023 0210 	bic.w	r2, r3, #16
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f023 0320 	bic.w	r3, r3, #32
 8004a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <TIM_OC2_SetConfig+0xd0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10d      	bne.n	8004ab4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <TIM_OC2_SetConfig+0xd0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d113      	bne.n	8004ae4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	40012c00 	.word	0x40012c00

08004b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <TIM_OC3_SetConfig+0xd0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10d      	bne.n	8004b86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <TIM_OC3_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d113      	bne.n	8004bb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40012c00 	.word	0x40012c00

08004be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	031b      	lsls	r3, r3, #12
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	; (8004c78 <TIM_OC4_SetConfig+0x98>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00

08004c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2201      	movs	r2, #1
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e046      	b.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d009      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800

08004d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e03d      	b.n	8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e042      	b.n	8004eba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fc fe75 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2224      	movs	r2, #36	; 0x24
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f972 	bl	8005150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08a      	sub	sp, #40	; 0x28
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d175      	bne.n	8004fce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_UART_Transmit+0x2c>
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e06e      	b.n	8004fd0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2221      	movs	r2, #33	; 0x21
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f00:	f7fd f86e 	bl	8001fe0 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	d108      	bne.n	8004f2e <HAL_UART_Transmit+0x6c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e003      	b.n	8004f36 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f36:	e02e      	b.n	8004f96 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f848 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e03a      	b.n	8004fd0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	3302      	adds	r3, #2
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e007      	b.n	8004f88 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1cb      	bne.n	8004f38 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2140      	movs	r1, #64	; 0x40
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f814 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe8:	e03b      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff0:	d037      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff2:	f7fc fff5 	bl	8001fe0 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <UART_WaitOnFlagUntilTimeout+0x30>
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e03a      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d023      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0x8a>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d020      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d01d      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d116      	bne.n	8005062 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f81d 	bl	800508a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2208      	movs	r2, #8
 8005054:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e00f      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4013      	ands	r3, r2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	429a      	cmp	r2, r3
 800507e:	d0b4      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800508a:	b480      	push	{r7}
 800508c:	b095      	sub	sp, #84	; 0x54
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	330c      	adds	r3, #12
 80050b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050b2:	643a      	str	r2, [r7, #64]	; 0x40
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3314      	adds	r3, #20
 80050e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d119      	bne.n	8005136 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	330c      	adds	r3, #12
 8005108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	60bb      	str	r3, [r7, #8]
   return(result);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005122:	61ba      	str	r2, [r7, #24]
 8005124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	613b      	str	r3, [r7, #16]
   return(result);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e5      	bne.n	8005102 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005144:	bf00      	nop
 8005146:	3754      	adds	r7, #84	; 0x54
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
	...

08005150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800518a:	f023 030c 	bic.w	r3, r3, #12
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	430b      	orrs	r3, r1
 8005196:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2c      	ldr	r2, [pc, #176]	; (8005264 <UART_SetConfig+0x114>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051b8:	f7ff f8ce 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	e002      	b.n	80051c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7ff f8b6 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 80051c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <UART_SetConfig+0x118>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	0119      	lsls	r1, r3, #4
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009a      	lsls	r2, r3, #2
 80051f0:	441a      	add	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051fc:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <UART_SetConfig+0x118>)
 80051fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2064      	movs	r0, #100	; 0x64
 8005206:	fb00 f303 	mul.w	r3, r0, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	3332      	adds	r3, #50	; 0x32
 8005210:	4a15      	ldr	r2, [pc, #84]	; (8005268 <UART_SetConfig+0x118>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521c:	4419      	add	r1, r3
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009a      	lsls	r2, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	fbb2 f2f3 	udiv	r2, r2, r3
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <UART_SetConfig+0x118>)
 8005236:	fba3 0302 	umull	r0, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	2064      	movs	r0, #100	; 0x64
 800523e:	fb00 f303 	mul.w	r3, r0, r3
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	3332      	adds	r3, #50	; 0x32
 8005248:	4a07      	ldr	r2, [pc, #28]	; (8005268 <UART_SetConfig+0x118>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	440a      	add	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40013800 	.word	0x40013800
 8005268:	51eb851f 	.word	0x51eb851f

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000010 	.word	0x20000010

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	2600      	movs	r6, #0
 800527c:	4d0c      	ldr	r5, [pc, #48]	; (80052b0 <__libc_init_array+0x38>)
 800527e:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <__libc_init_array+0x3c>)
 8005280:	1b64      	subs	r4, r4, r5
 8005282:	10a4      	asrs	r4, r4, #2
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	f004 fcf4 	bl	8009c74 <_init>
 800528c:	2600      	movs	r6, #0
 800528e:	4d0a      	ldr	r5, [pc, #40]	; (80052b8 <__libc_init_array+0x40>)
 8005290:	4c0a      	ldr	r4, [pc, #40]	; (80052bc <__libc_init_array+0x44>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	0800a1d8 	.word	0x0800a1d8
 80052b4:	0800a1d8 	.word	0x0800a1d8
 80052b8:	0800a1d8 	.word	0x0800a1d8
 80052bc:	0800a1dc 	.word	0x0800a1dc

080052c0 <memset>:
 80052c0:	4603      	mov	r3, r0
 80052c2:	4402      	add	r2, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d100      	bne.n	80052ca <memset+0xa>
 80052c8:	4770      	bx	lr
 80052ca:	f803 1b01 	strb.w	r1, [r3], #1
 80052ce:	e7f9      	b.n	80052c4 <memset+0x4>

080052d0 <__cvt>:
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d6:	461f      	mov	r7, r3
 80052d8:	bfbb      	ittet	lt
 80052da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80052de:	461f      	movlt	r7, r3
 80052e0:	2300      	movge	r3, #0
 80052e2:	232d      	movlt	r3, #45	; 0x2d
 80052e4:	b088      	sub	sp, #32
 80052e6:	4614      	mov	r4, r2
 80052e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80052ec:	7013      	strb	r3, [r2, #0]
 80052ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80052f4:	f023 0820 	bic.w	r8, r3, #32
 80052f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052fc:	d005      	beq.n	800530a <__cvt+0x3a>
 80052fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005302:	d100      	bne.n	8005306 <__cvt+0x36>
 8005304:	3501      	adds	r5, #1
 8005306:	2302      	movs	r3, #2
 8005308:	e000      	b.n	800530c <__cvt+0x3c>
 800530a:	2303      	movs	r3, #3
 800530c:	aa07      	add	r2, sp, #28
 800530e:	9204      	str	r2, [sp, #16]
 8005310:	aa06      	add	r2, sp, #24
 8005312:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005316:	e9cd 3500 	strd	r3, r5, [sp]
 800531a:	4622      	mov	r2, r4
 800531c:	463b      	mov	r3, r7
 800531e:	f001 fe43 	bl	8006fa8 <_dtoa_r>
 8005322:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005326:	4606      	mov	r6, r0
 8005328:	d102      	bne.n	8005330 <__cvt+0x60>
 800532a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800532c:	07db      	lsls	r3, r3, #31
 800532e:	d522      	bpl.n	8005376 <__cvt+0xa6>
 8005330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005334:	eb06 0905 	add.w	r9, r6, r5
 8005338:	d110      	bne.n	800535c <__cvt+0x8c>
 800533a:	7833      	ldrb	r3, [r6, #0]
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d10a      	bne.n	8005356 <__cvt+0x86>
 8005340:	2200      	movs	r2, #0
 8005342:	2300      	movs	r3, #0
 8005344:	4620      	mov	r0, r4
 8005346:	4639      	mov	r1, r7
 8005348:	f7fb fb2e 	bl	80009a8 <__aeabi_dcmpeq>
 800534c:	b918      	cbnz	r0, 8005356 <__cvt+0x86>
 800534e:	f1c5 0501 	rsb	r5, r5, #1
 8005352:	f8ca 5000 	str.w	r5, [sl]
 8005356:	f8da 3000 	ldr.w	r3, [sl]
 800535a:	4499      	add	r9, r3
 800535c:	2200      	movs	r2, #0
 800535e:	2300      	movs	r3, #0
 8005360:	4620      	mov	r0, r4
 8005362:	4639      	mov	r1, r7
 8005364:	f7fb fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8005368:	b108      	cbz	r0, 800536e <__cvt+0x9e>
 800536a:	f8cd 901c 	str.w	r9, [sp, #28]
 800536e:	2230      	movs	r2, #48	; 0x30
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	454b      	cmp	r3, r9
 8005374:	d307      	bcc.n	8005386 <__cvt+0xb6>
 8005376:	4630      	mov	r0, r6
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800537c:	1b9b      	subs	r3, r3, r6
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	b008      	add	sp, #32
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	9107      	str	r1, [sp, #28]
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e7f0      	b.n	8005370 <__cvt+0xa0>

0800538e <__exponent>:
 800538e:	4603      	mov	r3, r0
 8005390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005392:	2900      	cmp	r1, #0
 8005394:	f803 2b02 	strb.w	r2, [r3], #2
 8005398:	bfb6      	itet	lt
 800539a:	222d      	movlt	r2, #45	; 0x2d
 800539c:	222b      	movge	r2, #43	; 0x2b
 800539e:	4249      	neglt	r1, r1
 80053a0:	2909      	cmp	r1, #9
 80053a2:	7042      	strb	r2, [r0, #1]
 80053a4:	dd2b      	ble.n	80053fe <__exponent+0x70>
 80053a6:	f10d 0407 	add.w	r4, sp, #7
 80053aa:	46a4      	mov	ip, r4
 80053ac:	270a      	movs	r7, #10
 80053ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80053b2:	460a      	mov	r2, r1
 80053b4:	46a6      	mov	lr, r4
 80053b6:	fb07 1516 	mls	r5, r7, r6, r1
 80053ba:	2a63      	cmp	r2, #99	; 0x63
 80053bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80053c0:	4631      	mov	r1, r6
 80053c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80053c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053ca:	dcf0      	bgt.n	80053ae <__exponent+0x20>
 80053cc:	3130      	adds	r1, #48	; 0x30
 80053ce:	f1ae 0502 	sub.w	r5, lr, #2
 80053d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053d6:	4629      	mov	r1, r5
 80053d8:	1c44      	adds	r4, r0, #1
 80053da:	4561      	cmp	r1, ip
 80053dc:	d30a      	bcc.n	80053f4 <__exponent+0x66>
 80053de:	f10d 0209 	add.w	r2, sp, #9
 80053e2:	eba2 020e 	sub.w	r2, r2, lr
 80053e6:	4565      	cmp	r5, ip
 80053e8:	bf88      	it	hi
 80053ea:	2200      	movhi	r2, #0
 80053ec:	4413      	add	r3, r2
 80053ee:	1a18      	subs	r0, r3, r0
 80053f0:	b003      	add	sp, #12
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053fc:	e7ed      	b.n	80053da <__exponent+0x4c>
 80053fe:	2330      	movs	r3, #48	; 0x30
 8005400:	3130      	adds	r1, #48	; 0x30
 8005402:	7083      	strb	r3, [r0, #2]
 8005404:	70c1      	strb	r1, [r0, #3]
 8005406:	1d03      	adds	r3, r0, #4
 8005408:	e7f1      	b.n	80053ee <__exponent+0x60>
	...

0800540c <_printf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	b091      	sub	sp, #68	; 0x44
 8005412:	460c      	mov	r4, r1
 8005414:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005418:	4616      	mov	r6, r2
 800541a:	461f      	mov	r7, r3
 800541c:	4605      	mov	r5, r0
 800541e:	f002 ff29 	bl	8008274 <_localeconv_r>
 8005422:	6803      	ldr	r3, [r0, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	9309      	str	r3, [sp, #36]	; 0x24
 8005428:	f7fa fe92 	bl	8000150 <strlen>
 800542c:	2300      	movs	r3, #0
 800542e:	930e      	str	r3, [sp, #56]	; 0x38
 8005430:	f8d8 3000 	ldr.w	r3, [r8]
 8005434:	900a      	str	r0, [sp, #40]	; 0x28
 8005436:	3307      	adds	r3, #7
 8005438:	f023 0307 	bic.w	r3, r3, #7
 800543c:	f103 0208 	add.w	r2, r3, #8
 8005440:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005444:	f8d4 b000 	ldr.w	fp, [r4]
 8005448:	f8c8 2000 	str.w	r2, [r8]
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005454:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005458:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800545c:	930b      	str	r3, [sp, #44]	; 0x2c
 800545e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005462:	4640      	mov	r0, r8
 8005464:	4b9c      	ldr	r3, [pc, #624]	; (80056d8 <_printf_float+0x2cc>)
 8005466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005468:	f7fb fad0 	bl	8000a0c <__aeabi_dcmpun>
 800546c:	bb70      	cbnz	r0, 80054cc <_printf_float+0xc0>
 800546e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005472:	4640      	mov	r0, r8
 8005474:	4b98      	ldr	r3, [pc, #608]	; (80056d8 <_printf_float+0x2cc>)
 8005476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005478:	f7fb faaa 	bl	80009d0 <__aeabi_dcmple>
 800547c:	bb30      	cbnz	r0, 80054cc <_printf_float+0xc0>
 800547e:	2200      	movs	r2, #0
 8005480:	2300      	movs	r3, #0
 8005482:	4640      	mov	r0, r8
 8005484:	4651      	mov	r1, sl
 8005486:	f7fb fa99 	bl	80009bc <__aeabi_dcmplt>
 800548a:	b110      	cbz	r0, 8005492 <_printf_float+0x86>
 800548c:	232d      	movs	r3, #45	; 0x2d
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005492:	4b92      	ldr	r3, [pc, #584]	; (80056dc <_printf_float+0x2d0>)
 8005494:	4892      	ldr	r0, [pc, #584]	; (80056e0 <_printf_float+0x2d4>)
 8005496:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800549a:	bf94      	ite	ls
 800549c:	4698      	movls	r8, r3
 800549e:	4680      	movhi	r8, r0
 80054a0:	2303      	movs	r3, #3
 80054a2:	f04f 0a00 	mov.w	sl, #0
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	f02b 0304 	bic.w	r3, fp, #4
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	4633      	mov	r3, r6
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	9700      	str	r7, [sp, #0]
 80054b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80054b8:	f000 f9d4 	bl	8005864 <_printf_common>
 80054bc:	3001      	adds	r0, #1
 80054be:	f040 8090 	bne.w	80055e2 <_printf_float+0x1d6>
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c6:	b011      	add	sp, #68	; 0x44
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4642      	mov	r2, r8
 80054ce:	4653      	mov	r3, sl
 80054d0:	4640      	mov	r0, r8
 80054d2:	4651      	mov	r1, sl
 80054d4:	f7fb fa9a 	bl	8000a0c <__aeabi_dcmpun>
 80054d8:	b148      	cbz	r0, 80054ee <_printf_float+0xe2>
 80054da:	f1ba 0f00 	cmp.w	sl, #0
 80054de:	bfb8      	it	lt
 80054e0:	232d      	movlt	r3, #45	; 0x2d
 80054e2:	4880      	ldr	r0, [pc, #512]	; (80056e4 <_printf_float+0x2d8>)
 80054e4:	bfb8      	it	lt
 80054e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054ea:	4b7f      	ldr	r3, [pc, #508]	; (80056e8 <_printf_float+0x2dc>)
 80054ec:	e7d3      	b.n	8005496 <_printf_float+0x8a>
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	d142      	bne.n	800557e <_printf_float+0x172>
 80054f8:	2306      	movs	r3, #6
 80054fa:	6063      	str	r3, [r4, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	9206      	str	r2, [sp, #24]
 8005500:	aa0e      	add	r2, sp, #56	; 0x38
 8005502:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005506:	aa0d      	add	r2, sp, #52	; 0x34
 8005508:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800550c:	9203      	str	r2, [sp, #12]
 800550e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005512:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	6863      	ldr	r3, [r4, #4]
 800551a:	4642      	mov	r2, r8
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	4628      	mov	r0, r5
 8005520:	4653      	mov	r3, sl
 8005522:	910b      	str	r1, [sp, #44]	; 0x2c
 8005524:	f7ff fed4 	bl	80052d0 <__cvt>
 8005528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800552a:	4680      	mov	r8, r0
 800552c:	2947      	cmp	r1, #71	; 0x47
 800552e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005530:	d108      	bne.n	8005544 <_printf_float+0x138>
 8005532:	1cc8      	adds	r0, r1, #3
 8005534:	db02      	blt.n	800553c <_printf_float+0x130>
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	4299      	cmp	r1, r3
 800553a:	dd40      	ble.n	80055be <_printf_float+0x1b2>
 800553c:	f1a9 0902 	sub.w	r9, r9, #2
 8005540:	fa5f f989 	uxtb.w	r9, r9
 8005544:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005548:	d81f      	bhi.n	800558a <_printf_float+0x17e>
 800554a:	464a      	mov	r2, r9
 800554c:	3901      	subs	r1, #1
 800554e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005552:	910d      	str	r1, [sp, #52]	; 0x34
 8005554:	f7ff ff1b 	bl	800538e <__exponent>
 8005558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800555a:	4682      	mov	sl, r0
 800555c:	1813      	adds	r3, r2, r0
 800555e:	2a01      	cmp	r2, #1
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	dc02      	bgt.n	800556a <_printf_float+0x15e>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	07d2      	lsls	r2, r2, #31
 8005568:	d501      	bpl.n	800556e <_printf_float+0x162>
 800556a:	3301      	adds	r3, #1
 800556c:	6123      	str	r3, [r4, #16]
 800556e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005572:	2b00      	cmp	r3, #0
 8005574:	d09b      	beq.n	80054ae <_printf_float+0xa2>
 8005576:	232d      	movs	r3, #45	; 0x2d
 8005578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557c:	e797      	b.n	80054ae <_printf_float+0xa2>
 800557e:	2947      	cmp	r1, #71	; 0x47
 8005580:	d1bc      	bne.n	80054fc <_printf_float+0xf0>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ba      	bne.n	80054fc <_printf_float+0xf0>
 8005586:	2301      	movs	r3, #1
 8005588:	e7b7      	b.n	80054fa <_printf_float+0xee>
 800558a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800558e:	d118      	bne.n	80055c2 <_printf_float+0x1b6>
 8005590:	2900      	cmp	r1, #0
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	dd0b      	ble.n	80055ae <_printf_float+0x1a2>
 8005596:	6121      	str	r1, [r4, #16]
 8005598:	b913      	cbnz	r3, 80055a0 <_printf_float+0x194>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	07d0      	lsls	r0, r2, #31
 800559e:	d502      	bpl.n	80055a6 <_printf_float+0x19a>
 80055a0:	3301      	adds	r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80055ac:	e7df      	b.n	800556e <_printf_float+0x162>
 80055ae:	b913      	cbnz	r3, 80055b6 <_printf_float+0x1aa>
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	07d2      	lsls	r2, r2, #31
 80055b4:	d501      	bpl.n	80055ba <_printf_float+0x1ae>
 80055b6:	3302      	adds	r3, #2
 80055b8:	e7f4      	b.n	80055a4 <_printf_float+0x198>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e7f2      	b.n	80055a4 <_printf_float+0x198>
 80055be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80055c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c4:	4299      	cmp	r1, r3
 80055c6:	db05      	blt.n	80055d4 <_printf_float+0x1c8>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	6121      	str	r1, [r4, #16]
 80055cc:	07d8      	lsls	r0, r3, #31
 80055ce:	d5ea      	bpl.n	80055a6 <_printf_float+0x19a>
 80055d0:	1c4b      	adds	r3, r1, #1
 80055d2:	e7e7      	b.n	80055a4 <_printf_float+0x198>
 80055d4:	2900      	cmp	r1, #0
 80055d6:	bfcc      	ite	gt
 80055d8:	2201      	movgt	r2, #1
 80055da:	f1c1 0202 	rsble	r2, r1, #2
 80055de:	4413      	add	r3, r2
 80055e0:	e7e0      	b.n	80055a4 <_printf_float+0x198>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	055a      	lsls	r2, r3, #21
 80055e6:	d407      	bmi.n	80055f8 <_printf_float+0x1ec>
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	4642      	mov	r2, r8
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	d12b      	bne.n	800564e <_printf_float+0x242>
 80055f6:	e764      	b.n	80054c2 <_printf_float+0xb6>
 80055f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055fc:	f240 80dd 	bls.w	80057ba <_printf_float+0x3ae>
 8005600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	f7fb f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800560c:	2800      	cmp	r0, #0
 800560e:	d033      	beq.n	8005678 <_printf_float+0x26c>
 8005610:	2301      	movs	r3, #1
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	4a35      	ldr	r2, [pc, #212]	; (80056ec <_printf_float+0x2e0>)
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	f43f af51 	beq.w	80054c2 <_printf_float+0xb6>
 8005620:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005624:	429a      	cmp	r2, r3
 8005626:	db02      	blt.n	800562e <_printf_float+0x222>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	07d8      	lsls	r0, r3, #31
 800562c:	d50f      	bpl.n	800564e <_printf_float+0x242>
 800562e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	f43f af42 	beq.w	80054c2 <_printf_float+0xb6>
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	f104 091a 	add.w	r9, r4, #26
 8005646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005648:	3b01      	subs	r3, #1
 800564a:	4543      	cmp	r3, r8
 800564c:	dc09      	bgt.n	8005662 <_printf_float+0x256>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	079b      	lsls	r3, r3, #30
 8005652:	f100 8102 	bmi.w	800585a <_printf_float+0x44e>
 8005656:	68e0      	ldr	r0, [r4, #12]
 8005658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800565a:	4298      	cmp	r0, r3
 800565c:	bfb8      	it	lt
 800565e:	4618      	movlt	r0, r3
 8005660:	e731      	b.n	80054c6 <_printf_float+0xba>
 8005662:	2301      	movs	r3, #1
 8005664:	464a      	mov	r2, r9
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f af28 	beq.w	80054c2 <_printf_float+0xb6>
 8005672:	f108 0801 	add.w	r8, r8, #1
 8005676:	e7e6      	b.n	8005646 <_printf_float+0x23a>
 8005678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800567a:	2b00      	cmp	r3, #0
 800567c:	dc38      	bgt.n	80056f0 <_printf_float+0x2e4>
 800567e:	2301      	movs	r3, #1
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	4a19      	ldr	r2, [pc, #100]	; (80056ec <_printf_float+0x2e0>)
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	f43f af1a 	beq.w	80054c2 <_printf_float+0xb6>
 800568e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005692:	4313      	orrs	r3, r2
 8005694:	d102      	bne.n	800569c <_printf_float+0x290>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	07d9      	lsls	r1, r3, #31
 800569a:	d5d8      	bpl.n	800564e <_printf_float+0x242>
 800569c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f af0b 	beq.w	80054c2 <_printf_float+0xb6>
 80056ac:	f04f 0900 	mov.w	r9, #0
 80056b0:	f104 0a1a 	add.w	sl, r4, #26
 80056b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b6:	425b      	negs	r3, r3
 80056b8:	454b      	cmp	r3, r9
 80056ba:	dc01      	bgt.n	80056c0 <_printf_float+0x2b4>
 80056bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056be:	e794      	b.n	80055ea <_printf_float+0x1de>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4652      	mov	r2, sl
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f aef9 	beq.w	80054c2 <_printf_float+0xb6>
 80056d0:	f109 0901 	add.w	r9, r9, #1
 80056d4:	e7ee      	b.n	80056b4 <_printf_float+0x2a8>
 80056d6:	bf00      	nop
 80056d8:	7fefffff 	.word	0x7fefffff
 80056dc:	08009cdc 	.word	0x08009cdc
 80056e0:	08009ce0 	.word	0x08009ce0
 80056e4:	08009ce8 	.word	0x08009ce8
 80056e8:	08009ce4 	.word	0x08009ce4
 80056ec:	08009cec 	.word	0x08009cec
 80056f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056f4:	429a      	cmp	r2, r3
 80056f6:	bfa8      	it	ge
 80056f8:	461a      	movge	r2, r3
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	4691      	mov	r9, r2
 80056fe:	dc37      	bgt.n	8005770 <_printf_float+0x364>
 8005700:	f04f 0b00 	mov.w	fp, #0
 8005704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005708:	f104 021a 	add.w	r2, r4, #26
 800570c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005710:	ebaa 0309 	sub.w	r3, sl, r9
 8005714:	455b      	cmp	r3, fp
 8005716:	dc33      	bgt.n	8005780 <_printf_float+0x374>
 8005718:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800571c:	429a      	cmp	r2, r3
 800571e:	db3b      	blt.n	8005798 <_printf_float+0x38c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	07da      	lsls	r2, r3, #31
 8005724:	d438      	bmi.n	8005798 <_printf_float+0x38c>
 8005726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005728:	990d      	ldr	r1, [sp, #52]	; 0x34
 800572a:	eba3 020a 	sub.w	r2, r3, sl
 800572e:	eba3 0901 	sub.w	r9, r3, r1
 8005732:	4591      	cmp	r9, r2
 8005734:	bfa8      	it	ge
 8005736:	4691      	movge	r9, r2
 8005738:	f1b9 0f00 	cmp.w	r9, #0
 800573c:	dc34      	bgt.n	80057a8 <_printf_float+0x39c>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005746:	f104 0a1a 	add.w	sl, r4, #26
 800574a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	eba3 0309 	sub.w	r3, r3, r9
 8005754:	4543      	cmp	r3, r8
 8005756:	f77f af7a 	ble.w	800564e <_printf_float+0x242>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f aeac 	beq.w	80054c2 <_printf_float+0xb6>
 800576a:	f108 0801 	add.w	r8, r8, #1
 800576e:	e7ec      	b.n	800574a <_printf_float+0x33e>
 8005770:	4613      	mov	r3, r2
 8005772:	4631      	mov	r1, r6
 8005774:	4642      	mov	r2, r8
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	d1c0      	bne.n	8005700 <_printf_float+0x2f4>
 800577e:	e6a0      	b.n	80054c2 <_printf_float+0xb6>
 8005780:	2301      	movs	r3, #1
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	920b      	str	r2, [sp, #44]	; 0x2c
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f ae99 	beq.w	80054c2 <_printf_float+0xb6>
 8005790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005792:	f10b 0b01 	add.w	fp, fp, #1
 8005796:	e7b9      	b.n	800570c <_printf_float+0x300>
 8005798:	4631      	mov	r1, r6
 800579a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	d1bf      	bne.n	8005726 <_printf_float+0x31a>
 80057a6:	e68c      	b.n	80054c2 <_printf_float+0xb6>
 80057a8:	464b      	mov	r3, r9
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	eb08 020a 	add.w	r2, r8, sl
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	d1c2      	bne.n	800573e <_printf_float+0x332>
 80057b8:	e683      	b.n	80054c2 <_printf_float+0xb6>
 80057ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057bc:	2a01      	cmp	r2, #1
 80057be:	dc01      	bgt.n	80057c4 <_printf_float+0x3b8>
 80057c0:	07db      	lsls	r3, r3, #31
 80057c2:	d537      	bpl.n	8005834 <_printf_float+0x428>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4642      	mov	r2, r8
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f ae77 	beq.w	80054c2 <_printf_float+0xb6>
 80057d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f ae6f 	beq.w	80054c2 <_printf_float+0xb6>
 80057e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	f7fb f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80057f0:	b9d8      	cbnz	r0, 800582a <_printf_float+0x41e>
 80057f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057f4:	f108 0201 	add.w	r2, r8, #1
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	d10e      	bne.n	8005822 <_printf_float+0x416>
 8005804:	e65d      	b.n	80054c2 <_printf_float+0xb6>
 8005806:	2301      	movs	r3, #1
 8005808:	464a      	mov	r2, r9
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae56 	beq.w	80054c2 <_printf_float+0xb6>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800581c:	3b01      	subs	r3, #1
 800581e:	4543      	cmp	r3, r8
 8005820:	dcf1      	bgt.n	8005806 <_printf_float+0x3fa>
 8005822:	4653      	mov	r3, sl
 8005824:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005828:	e6e0      	b.n	80055ec <_printf_float+0x1e0>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	f104 091a 	add.w	r9, r4, #26
 8005832:	e7f2      	b.n	800581a <_printf_float+0x40e>
 8005834:	2301      	movs	r3, #1
 8005836:	4642      	mov	r2, r8
 8005838:	e7df      	b.n	80057fa <_printf_float+0x3ee>
 800583a:	2301      	movs	r3, #1
 800583c:	464a      	mov	r2, r9
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f ae3c 	beq.w	80054c2 <_printf_float+0xb6>
 800584a:	f108 0801 	add.w	r8, r8, #1
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005852:	1a5b      	subs	r3, r3, r1
 8005854:	4543      	cmp	r3, r8
 8005856:	dcf0      	bgt.n	800583a <_printf_float+0x42e>
 8005858:	e6fd      	b.n	8005656 <_printf_float+0x24a>
 800585a:	f04f 0800 	mov.w	r8, #0
 800585e:	f104 0919 	add.w	r9, r4, #25
 8005862:	e7f4      	b.n	800584e <_printf_float+0x442>

08005864 <_printf_common>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	4616      	mov	r6, r2
 800586a:	4699      	mov	r9, r3
 800586c:	688a      	ldr	r2, [r1, #8]
 800586e:	690b      	ldr	r3, [r1, #16]
 8005870:	4607      	mov	r7, r0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfb8      	it	lt
 8005876:	4613      	movlt	r3, r2
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800587e:	460c      	mov	r4, r1
 8005880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005884:	b10a      	cbz	r2, 800588a <_printf_common+0x26>
 8005886:	3301      	adds	r3, #1
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	0699      	lsls	r1, r3, #26
 800588e:	bf42      	ittt	mi
 8005890:	6833      	ldrmi	r3, [r6, #0]
 8005892:	3302      	addmi	r3, #2
 8005894:	6033      	strmi	r3, [r6, #0]
 8005896:	6825      	ldr	r5, [r4, #0]
 8005898:	f015 0506 	ands.w	r5, r5, #6
 800589c:	d106      	bne.n	80058ac <_printf_common+0x48>
 800589e:	f104 0a19 	add.w	sl, r4, #25
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	6832      	ldr	r2, [r6, #0]
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dc28      	bgt.n	80058fe <_printf_common+0x9a>
 80058ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b0:	1e13      	subs	r3, r2, #0
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	bf18      	it	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	0692      	lsls	r2, r2, #26
 80058ba:	d42d      	bmi.n	8005918 <_printf_common+0xb4>
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d020      	beq.n	800590c <_printf_common+0xa8>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	68e5      	ldr	r5, [r4, #12]
 80058ce:	f003 0306 	and.w	r3, r3, #6
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	bf18      	it	ne
 80058d6:	2500      	movne	r5, #0
 80058d8:	6832      	ldr	r2, [r6, #0]
 80058da:	f04f 0600 	mov.w	r6, #0
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	bf08      	it	eq
 80058e2:	1aad      	subeq	r5, r5, r2
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	bf08      	it	eq
 80058e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfc4      	itt	gt
 80058f0:	1a9b      	subgt	r3, r3, r2
 80058f2:	18ed      	addgt	r5, r5, r3
 80058f4:	341a      	adds	r4, #26
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	d11a      	bne.n	8005930 <_printf_common+0xcc>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e008      	b.n	8005910 <_printf_common+0xac>
 80058fe:	2301      	movs	r3, #1
 8005900:	4652      	mov	r2, sl
 8005902:	4649      	mov	r1, r9
 8005904:	4638      	mov	r0, r7
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d103      	bne.n	8005914 <_printf_common+0xb0>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	3501      	adds	r5, #1
 8005916:	e7c4      	b.n	80058a2 <_printf_common+0x3e>
 8005918:	2030      	movs	r0, #48	; 0x30
 800591a:	18e1      	adds	r1, r4, r3
 800591c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005926:	4422      	add	r2, r4
 8005928:	3302      	adds	r3, #2
 800592a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592e:	e7c5      	b.n	80058bc <_printf_common+0x58>
 8005930:	2301      	movs	r3, #1
 8005932:	4622      	mov	r2, r4
 8005934:	4649      	mov	r1, r9
 8005936:	4638      	mov	r0, r7
 8005938:	47c0      	blx	r8
 800593a:	3001      	adds	r0, #1
 800593c:	d0e6      	beq.n	800590c <_printf_common+0xa8>
 800593e:	3601      	adds	r6, #1
 8005940:	e7d9      	b.n	80058f6 <_printf_common+0x92>
	...

08005944 <_printf_i>:
 8005944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	7e0f      	ldrb	r7, [r1, #24]
 800594a:	4691      	mov	r9, r2
 800594c:	2f78      	cmp	r7, #120	; 0x78
 800594e:	4680      	mov	r8, r0
 8005950:	460c      	mov	r4, r1
 8005952:	469a      	mov	sl, r3
 8005954:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800595a:	d807      	bhi.n	800596c <_printf_i+0x28>
 800595c:	2f62      	cmp	r7, #98	; 0x62
 800595e:	d80a      	bhi.n	8005976 <_printf_i+0x32>
 8005960:	2f00      	cmp	r7, #0
 8005962:	f000 80d9 	beq.w	8005b18 <_printf_i+0x1d4>
 8005966:	2f58      	cmp	r7, #88	; 0x58
 8005968:	f000 80a4 	beq.w	8005ab4 <_printf_i+0x170>
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005974:	e03a      	b.n	80059ec <_printf_i+0xa8>
 8005976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800597a:	2b15      	cmp	r3, #21
 800597c:	d8f6      	bhi.n	800596c <_printf_i+0x28>
 800597e:	a101      	add	r1, pc, #4	; (adr r1, 8005984 <_printf_i+0x40>)
 8005980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059f1 	.word	0x080059f1
 800598c:	0800596d 	.word	0x0800596d
 8005990:	0800596d 	.word	0x0800596d
 8005994:	0800596d 	.word	0x0800596d
 8005998:	0800596d 	.word	0x0800596d
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	0800596d 	.word	0x0800596d
 80059a4:	0800596d 	.word	0x0800596d
 80059a8:	0800596d 	.word	0x0800596d
 80059ac:	0800596d 	.word	0x0800596d
 80059b0:	08005aff 	.word	0x08005aff
 80059b4:	08005a21 	.word	0x08005a21
 80059b8:	08005ae1 	.word	0x08005ae1
 80059bc:	0800596d 	.word	0x0800596d
 80059c0:	0800596d 	.word	0x0800596d
 80059c4:	08005b21 	.word	0x08005b21
 80059c8:	0800596d 	.word	0x0800596d
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	0800596d 	.word	0x0800596d
 80059d4:	0800596d 	.word	0x0800596d
 80059d8:	08005ae9 	.word	0x08005ae9
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a4      	b.n	8005b3a <_printf_i+0x1f6>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	6829      	ldr	r1, [r5, #0]
 80059f4:	0606      	lsls	r6, r0, #24
 80059f6:	f101 0304 	add.w	r3, r1, #4
 80059fa:	d50a      	bpl.n	8005a12 <_printf_i+0xce>
 80059fc:	680e      	ldr	r6, [r1, #0]
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	2e00      	cmp	r6, #0
 8005a02:	da03      	bge.n	8005a0c <_printf_i+0xc8>
 8005a04:	232d      	movs	r3, #45	; 0x2d
 8005a06:	4276      	negs	r6, r6
 8005a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0c:	230a      	movs	r3, #10
 8005a0e:	485e      	ldr	r0, [pc, #376]	; (8005b88 <_printf_i+0x244>)
 8005a10:	e019      	b.n	8005a46 <_printf_i+0x102>
 8005a12:	680e      	ldr	r6, [r1, #0]
 8005a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	bf18      	it	ne
 8005a1c:	b236      	sxthne	r6, r6
 8005a1e:	e7ef      	b.n	8005a00 <_printf_i+0xbc>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	6820      	ldr	r0, [r4, #0]
 8005a24:	1d19      	adds	r1, r3, #4
 8005a26:	6029      	str	r1, [r5, #0]
 8005a28:	0601      	lsls	r1, r0, #24
 8005a2a:	d501      	bpl.n	8005a30 <_printf_i+0xec>
 8005a2c:	681e      	ldr	r6, [r3, #0]
 8005a2e:	e002      	b.n	8005a36 <_printf_i+0xf2>
 8005a30:	0646      	lsls	r6, r0, #25
 8005a32:	d5fb      	bpl.n	8005a2c <_printf_i+0xe8>
 8005a34:	881e      	ldrh	r6, [r3, #0]
 8005a36:	2f6f      	cmp	r7, #111	; 0x6f
 8005a38:	bf0c      	ite	eq
 8005a3a:	2308      	moveq	r3, #8
 8005a3c:	230a      	movne	r3, #10
 8005a3e:	4852      	ldr	r0, [pc, #328]	; (8005b88 <_printf_i+0x244>)
 8005a40:	2100      	movs	r1, #0
 8005a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a46:	6865      	ldr	r5, [r4, #4]
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	bfa8      	it	ge
 8005a4c:	6821      	ldrge	r1, [r4, #0]
 8005a4e:	60a5      	str	r5, [r4, #8]
 8005a50:	bfa4      	itt	ge
 8005a52:	f021 0104 	bicge.w	r1, r1, #4
 8005a56:	6021      	strge	r1, [r4, #0]
 8005a58:	b90e      	cbnz	r6, 8005a5e <_printf_i+0x11a>
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	d04d      	beq.n	8005afa <_printf_i+0x1b6>
 8005a5e:	4615      	mov	r5, r2
 8005a60:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a64:	fb03 6711 	mls	r7, r3, r1, r6
 8005a68:	5dc7      	ldrb	r7, [r0, r7]
 8005a6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a6e:	4637      	mov	r7, r6
 8005a70:	42bb      	cmp	r3, r7
 8005a72:	460e      	mov	r6, r1
 8005a74:	d9f4      	bls.n	8005a60 <_printf_i+0x11c>
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d10b      	bne.n	8005a92 <_printf_i+0x14e>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	07de      	lsls	r6, r3, #31
 8005a7e:	d508      	bpl.n	8005a92 <_printf_i+0x14e>
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	6861      	ldr	r1, [r4, #4]
 8005a84:	4299      	cmp	r1, r3
 8005a86:	bfde      	ittt	le
 8005a88:	2330      	movle	r3, #48	; 0x30
 8005a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a8e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a92:	1b52      	subs	r2, r2, r5
 8005a94:	6122      	str	r2, [r4, #16]
 8005a96:	464b      	mov	r3, r9
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f8cd a000 	str.w	sl, [sp]
 8005aa0:	aa03      	add	r2, sp, #12
 8005aa2:	f7ff fedf 	bl	8005864 <_printf_common>
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d14c      	bne.n	8005b44 <_printf_i+0x200>
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aae:	b004      	add	sp, #16
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	4834      	ldr	r0, [pc, #208]	; (8005b88 <_printf_i+0x244>)
 8005ab6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005aba:	6829      	ldr	r1, [r5, #0]
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac2:	6029      	str	r1, [r5, #0]
 8005ac4:	061d      	lsls	r5, r3, #24
 8005ac6:	d514      	bpl.n	8005af2 <_printf_i+0x1ae>
 8005ac8:	07df      	lsls	r7, r3, #31
 8005aca:	bf44      	itt	mi
 8005acc:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad0:	6023      	strmi	r3, [r4, #0]
 8005ad2:	b91e      	cbnz	r6, 8005adc <_printf_i+0x198>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	f023 0320 	bic.w	r3, r3, #32
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	2310      	movs	r3, #16
 8005ade:	e7af      	b.n	8005a40 <_printf_i+0xfc>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f043 0320 	orr.w	r3, r3, #32
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	2378      	movs	r3, #120	; 0x78
 8005aea:	4828      	ldr	r0, [pc, #160]	; (8005b8c <_printf_i+0x248>)
 8005aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005af0:	e7e3      	b.n	8005aba <_printf_i+0x176>
 8005af2:	0659      	lsls	r1, r3, #25
 8005af4:	bf48      	it	mi
 8005af6:	b2b6      	uxthmi	r6, r6
 8005af8:	e7e6      	b.n	8005ac8 <_printf_i+0x184>
 8005afa:	4615      	mov	r5, r2
 8005afc:	e7bb      	b.n	8005a76 <_printf_i+0x132>
 8005afe:	682b      	ldr	r3, [r5, #0]
 8005b00:	6826      	ldr	r6, [r4, #0]
 8005b02:	1d18      	adds	r0, r3, #4
 8005b04:	6961      	ldr	r1, [r4, #20]
 8005b06:	6028      	str	r0, [r5, #0]
 8005b08:	0635      	lsls	r5, r6, #24
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	d501      	bpl.n	8005b12 <_printf_i+0x1ce>
 8005b0e:	6019      	str	r1, [r3, #0]
 8005b10:	e002      	b.n	8005b18 <_printf_i+0x1d4>
 8005b12:	0670      	lsls	r0, r6, #25
 8005b14:	d5fb      	bpl.n	8005b0e <_printf_i+0x1ca>
 8005b16:	8019      	strh	r1, [r3, #0]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4615      	mov	r5, r2
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	e7ba      	b.n	8005a96 <_printf_i+0x152>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	2100      	movs	r1, #0
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	602a      	str	r2, [r5, #0]
 8005b28:	681d      	ldr	r5, [r3, #0]
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f002 fbbf 	bl	80082b0 <memchr>
 8005b32:	b108      	cbz	r0, 8005b38 <_printf_i+0x1f4>
 8005b34:	1b40      	subs	r0, r0, r5
 8005b36:	6060      	str	r0, [r4, #4]
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	6123      	str	r3, [r4, #16]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b42:	e7a8      	b.n	8005a96 <_printf_i+0x152>
 8005b44:	462a      	mov	r2, r5
 8005b46:	4649      	mov	r1, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	47d0      	blx	sl
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d0ab      	beq.n	8005aaa <_printf_i+0x166>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	079b      	lsls	r3, r3, #30
 8005b56:	d413      	bmi.n	8005b80 <_printf_i+0x23c>
 8005b58:	68e0      	ldr	r0, [r4, #12]
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	bfb8      	it	lt
 8005b60:	4618      	movlt	r0, r3
 8005b62:	e7a4      	b.n	8005aae <_printf_i+0x16a>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4632      	mov	r2, r6
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	47d0      	blx	sl
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d09b      	beq.n	8005aaa <_printf_i+0x166>
 8005b72:	3501      	adds	r5, #1
 8005b74:	68e3      	ldr	r3, [r4, #12]
 8005b76:	9903      	ldr	r1, [sp, #12]
 8005b78:	1a5b      	subs	r3, r3, r1
 8005b7a:	42ab      	cmp	r3, r5
 8005b7c:	dcf2      	bgt.n	8005b64 <_printf_i+0x220>
 8005b7e:	e7eb      	b.n	8005b58 <_printf_i+0x214>
 8005b80:	2500      	movs	r5, #0
 8005b82:	f104 0619 	add.w	r6, r4, #25
 8005b86:	e7f5      	b.n	8005b74 <_printf_i+0x230>
 8005b88:	08009cee 	.word	0x08009cee
 8005b8c:	08009cff 	.word	0x08009cff

08005b90 <_scanf_float>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	b087      	sub	sp, #28
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	688b      	ldr	r3, [r1, #8]
 8005b9a:	4617      	mov	r7, r2
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ba2:	bf85      	ittet	hi
 8005ba4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ba8:	195b      	addhi	r3, r3, r5
 8005baa:	2300      	movls	r3, #0
 8005bac:	9302      	strhi	r3, [sp, #8]
 8005bae:	bf88      	it	hi
 8005bb0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	f04f 0500 	mov.w	r5, #0
 8005bba:	bf8c      	ite	hi
 8005bbc:	608b      	strhi	r3, [r1, #8]
 8005bbe:	9302      	strls	r3, [sp, #8]
 8005bc0:	680b      	ldr	r3, [r1, #0]
 8005bc2:	4680      	mov	r8, r0
 8005bc4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005bc8:	f84b 3b1c 	str.w	r3, [fp], #28
 8005bcc:	460c      	mov	r4, r1
 8005bce:	465e      	mov	r6, fp
 8005bd0:	46aa      	mov	sl, r5
 8005bd2:	46a9      	mov	r9, r5
 8005bd4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005bd8:	9501      	str	r5, [sp, #4]
 8005bda:	68a2      	ldr	r2, [r4, #8]
 8005bdc:	b152      	cbz	r2, 8005bf4 <_scanf_float+0x64>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b4e      	cmp	r3, #78	; 0x4e
 8005be4:	d864      	bhi.n	8005cb0 <_scanf_float+0x120>
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d83c      	bhi.n	8005c64 <_scanf_float+0xd4>
 8005bea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005bee:	b2c8      	uxtb	r0, r1
 8005bf0:	280e      	cmp	r0, #14
 8005bf2:	d93a      	bls.n	8005c6a <_scanf_float+0xda>
 8005bf4:	f1b9 0f00 	cmp.w	r9, #0
 8005bf8:	d003      	beq.n	8005c02 <_scanf_float+0x72>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c06:	f1ba 0f01 	cmp.w	sl, #1
 8005c0a:	f200 8113 	bhi.w	8005e34 <_scanf_float+0x2a4>
 8005c0e:	455e      	cmp	r6, fp
 8005c10:	f200 8105 	bhi.w	8005e1e <_scanf_float+0x28e>
 8005c14:	2501      	movs	r5, #1
 8005c16:	4628      	mov	r0, r5
 8005c18:	b007      	add	sp, #28
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c22:	2a0d      	cmp	r2, #13
 8005c24:	d8e6      	bhi.n	8005bf4 <_scanf_float+0x64>
 8005c26:	a101      	add	r1, pc, #4	; (adr r1, 8005c2c <_scanf_float+0x9c>)
 8005c28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c2c:	08005d6b 	.word	0x08005d6b
 8005c30:	08005bf5 	.word	0x08005bf5
 8005c34:	08005bf5 	.word	0x08005bf5
 8005c38:	08005bf5 	.word	0x08005bf5
 8005c3c:	08005dcb 	.word	0x08005dcb
 8005c40:	08005da3 	.word	0x08005da3
 8005c44:	08005bf5 	.word	0x08005bf5
 8005c48:	08005bf5 	.word	0x08005bf5
 8005c4c:	08005d79 	.word	0x08005d79
 8005c50:	08005bf5 	.word	0x08005bf5
 8005c54:	08005bf5 	.word	0x08005bf5
 8005c58:	08005bf5 	.word	0x08005bf5
 8005c5c:	08005bf5 	.word	0x08005bf5
 8005c60:	08005d31 	.word	0x08005d31
 8005c64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005c68:	e7db      	b.n	8005c22 <_scanf_float+0x92>
 8005c6a:	290e      	cmp	r1, #14
 8005c6c:	d8c2      	bhi.n	8005bf4 <_scanf_float+0x64>
 8005c6e:	a001      	add	r0, pc, #4	; (adr r0, 8005c74 <_scanf_float+0xe4>)
 8005c70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c74:	08005d23 	.word	0x08005d23
 8005c78:	08005bf5 	.word	0x08005bf5
 8005c7c:	08005d23 	.word	0x08005d23
 8005c80:	08005db7 	.word	0x08005db7
 8005c84:	08005bf5 	.word	0x08005bf5
 8005c88:	08005cd1 	.word	0x08005cd1
 8005c8c:	08005d0d 	.word	0x08005d0d
 8005c90:	08005d0d 	.word	0x08005d0d
 8005c94:	08005d0d 	.word	0x08005d0d
 8005c98:	08005d0d 	.word	0x08005d0d
 8005c9c:	08005d0d 	.word	0x08005d0d
 8005ca0:	08005d0d 	.word	0x08005d0d
 8005ca4:	08005d0d 	.word	0x08005d0d
 8005ca8:	08005d0d 	.word	0x08005d0d
 8005cac:	08005d0d 	.word	0x08005d0d
 8005cb0:	2b6e      	cmp	r3, #110	; 0x6e
 8005cb2:	d809      	bhi.n	8005cc8 <_scanf_float+0x138>
 8005cb4:	2b60      	cmp	r3, #96	; 0x60
 8005cb6:	d8b2      	bhi.n	8005c1e <_scanf_float+0x8e>
 8005cb8:	2b54      	cmp	r3, #84	; 0x54
 8005cba:	d077      	beq.n	8005dac <_scanf_float+0x21c>
 8005cbc:	2b59      	cmp	r3, #89	; 0x59
 8005cbe:	d199      	bne.n	8005bf4 <_scanf_float+0x64>
 8005cc0:	2d07      	cmp	r5, #7
 8005cc2:	d197      	bne.n	8005bf4 <_scanf_float+0x64>
 8005cc4:	2508      	movs	r5, #8
 8005cc6:	e029      	b.n	8005d1c <_scanf_float+0x18c>
 8005cc8:	2b74      	cmp	r3, #116	; 0x74
 8005cca:	d06f      	beq.n	8005dac <_scanf_float+0x21c>
 8005ccc:	2b79      	cmp	r3, #121	; 0x79
 8005cce:	e7f6      	b.n	8005cbe <_scanf_float+0x12e>
 8005cd0:	6821      	ldr	r1, [r4, #0]
 8005cd2:	05c8      	lsls	r0, r1, #23
 8005cd4:	d51a      	bpl.n	8005d0c <_scanf_float+0x17c>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005cdc:	6021      	str	r1, [r4, #0]
 8005cde:	f109 0901 	add.w	r9, r9, #1
 8005ce2:	b11b      	cbz	r3, 8005cec <_scanf_float+0x15c>
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	9302      	str	r3, [sp, #8]
 8005cea:	60a2      	str	r2, [r4, #8]
 8005cec:	68a3      	ldr	r3, [r4, #8]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	60a3      	str	r3, [r4, #8]
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	f340 8084 	ble.w	8005e0c <_scanf_float+0x27c>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	e766      	b.n	8005bda <_scanf_float+0x4a>
 8005d0c:	eb1a 0f05 	cmn.w	sl, r5
 8005d10:	f47f af70 	bne.w	8005bf4 <_scanf_float+0x64>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005d1a:	6022      	str	r2, [r4, #0]
 8005d1c:	f806 3b01 	strb.w	r3, [r6], #1
 8005d20:	e7e4      	b.n	8005cec <_scanf_float+0x15c>
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	0610      	lsls	r0, r2, #24
 8005d26:	f57f af65 	bpl.w	8005bf4 <_scanf_float+0x64>
 8005d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2e:	e7f4      	b.n	8005d1a <_scanf_float+0x18a>
 8005d30:	f1ba 0f00 	cmp.w	sl, #0
 8005d34:	d10e      	bne.n	8005d54 <_scanf_float+0x1c4>
 8005d36:	f1b9 0f00 	cmp.w	r9, #0
 8005d3a:	d10e      	bne.n	8005d5a <_scanf_float+0x1ca>
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d46:	d108      	bne.n	8005d5a <_scanf_float+0x1ca>
 8005d48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d4c:	f04f 0a01 	mov.w	sl, #1
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	e7e3      	b.n	8005d1c <_scanf_float+0x18c>
 8005d54:	f1ba 0f02 	cmp.w	sl, #2
 8005d58:	d055      	beq.n	8005e06 <_scanf_float+0x276>
 8005d5a:	2d01      	cmp	r5, #1
 8005d5c:	d002      	beq.n	8005d64 <_scanf_float+0x1d4>
 8005d5e:	2d04      	cmp	r5, #4
 8005d60:	f47f af48 	bne.w	8005bf4 <_scanf_float+0x64>
 8005d64:	3501      	adds	r5, #1
 8005d66:	b2ed      	uxtb	r5, r5
 8005d68:	e7d8      	b.n	8005d1c <_scanf_float+0x18c>
 8005d6a:	f1ba 0f01 	cmp.w	sl, #1
 8005d6e:	f47f af41 	bne.w	8005bf4 <_scanf_float+0x64>
 8005d72:	f04f 0a02 	mov.w	sl, #2
 8005d76:	e7d1      	b.n	8005d1c <_scanf_float+0x18c>
 8005d78:	b97d      	cbnz	r5, 8005d9a <_scanf_float+0x20a>
 8005d7a:	f1b9 0f00 	cmp.w	r9, #0
 8005d7e:	f47f af3c 	bne.w	8005bfa <_scanf_float+0x6a>
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d8c:	f47f af39 	bne.w	8005c02 <_scanf_float+0x72>
 8005d90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d94:	2501      	movs	r5, #1
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	e7c0      	b.n	8005d1c <_scanf_float+0x18c>
 8005d9a:	2d03      	cmp	r5, #3
 8005d9c:	d0e2      	beq.n	8005d64 <_scanf_float+0x1d4>
 8005d9e:	2d05      	cmp	r5, #5
 8005da0:	e7de      	b.n	8005d60 <_scanf_float+0x1d0>
 8005da2:	2d02      	cmp	r5, #2
 8005da4:	f47f af26 	bne.w	8005bf4 <_scanf_float+0x64>
 8005da8:	2503      	movs	r5, #3
 8005daa:	e7b7      	b.n	8005d1c <_scanf_float+0x18c>
 8005dac:	2d06      	cmp	r5, #6
 8005dae:	f47f af21 	bne.w	8005bf4 <_scanf_float+0x64>
 8005db2:	2507      	movs	r5, #7
 8005db4:	e7b2      	b.n	8005d1c <_scanf_float+0x18c>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	0591      	lsls	r1, r2, #22
 8005dba:	f57f af1b 	bpl.w	8005bf4 <_scanf_float+0x64>
 8005dbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005dc8:	e7a8      	b.n	8005d1c <_scanf_float+0x18c>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005dd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005dd4:	d006      	beq.n	8005de4 <_scanf_float+0x254>
 8005dd6:	0550      	lsls	r0, r2, #21
 8005dd8:	f57f af0c 	bpl.w	8005bf4 <_scanf_float+0x64>
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	f43f af0f 	beq.w	8005c02 <_scanf_float+0x72>
 8005de4:	0591      	lsls	r1, r2, #22
 8005de6:	bf58      	it	pl
 8005de8:	9901      	ldrpl	r1, [sp, #4]
 8005dea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dee:	bf58      	it	pl
 8005df0:	eba9 0101 	subpl.w	r1, r9, r1
 8005df4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005df8:	f04f 0900 	mov.w	r9, #0
 8005dfc:	bf58      	it	pl
 8005dfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	e78a      	b.n	8005d1c <_scanf_float+0x18c>
 8005e06:	f04f 0a03 	mov.w	sl, #3
 8005e0a:	e787      	b.n	8005d1c <_scanf_float+0x18c>
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4640      	mov	r0, r8
 8005e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e14:	4798      	blx	r3
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f aedf 	beq.w	8005bda <_scanf_float+0x4a>
 8005e1c:	e6ea      	b.n	8005bf4 <_scanf_float+0x64>
 8005e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e22:	463a      	mov	r2, r7
 8005e24:	4640      	mov	r0, r8
 8005e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e2a:	4798      	blx	r3
 8005e2c:	6923      	ldr	r3, [r4, #16]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	e6ec      	b.n	8005c0e <_scanf_float+0x7e>
 8005e34:	1e6b      	subs	r3, r5, #1
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d825      	bhi.n	8005e86 <_scanf_float+0x2f6>
 8005e3a:	2d02      	cmp	r5, #2
 8005e3c:	d836      	bhi.n	8005eac <_scanf_float+0x31c>
 8005e3e:	455e      	cmp	r6, fp
 8005e40:	f67f aee8 	bls.w	8005c14 <_scanf_float+0x84>
 8005e44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e48:	463a      	mov	r2, r7
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e50:	4798      	blx	r3
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	6123      	str	r3, [r4, #16]
 8005e58:	e7f1      	b.n	8005e3e <_scanf_float+0x2ae>
 8005e5a:	9802      	ldr	r0, [sp, #8]
 8005e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005e64:	463a      	mov	r2, r7
 8005e66:	9002      	str	r0, [sp, #8]
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4798      	blx	r3
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e76:	fa5f fa8a 	uxtb.w	sl, sl
 8005e7a:	f1ba 0f02 	cmp.w	sl, #2
 8005e7e:	d1ec      	bne.n	8005e5a <_scanf_float+0x2ca>
 8005e80:	3d03      	subs	r5, #3
 8005e82:	b2ed      	uxtb	r5, r5
 8005e84:	1b76      	subs	r6, r6, r5
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	05da      	lsls	r2, r3, #23
 8005e8a:	d52f      	bpl.n	8005eec <_scanf_float+0x35c>
 8005e8c:	055b      	lsls	r3, r3, #21
 8005e8e:	d510      	bpl.n	8005eb2 <_scanf_float+0x322>
 8005e90:	455e      	cmp	r6, fp
 8005e92:	f67f aebf 	bls.w	8005c14 <_scanf_float+0x84>
 8005e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ea2:	4798      	blx	r3
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	e7f1      	b.n	8005e90 <_scanf_float+0x300>
 8005eac:	46aa      	mov	sl, r5
 8005eae:	9602      	str	r6, [sp, #8]
 8005eb0:	e7df      	b.n	8005e72 <_scanf_float+0x2e2>
 8005eb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	2965      	cmp	r1, #101	; 0x65
 8005eba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005ebe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	d00c      	beq.n	8005ee0 <_scanf_float+0x350>
 8005ec6:	2945      	cmp	r1, #69	; 0x45
 8005ec8:	d00a      	beq.n	8005ee0 <_scanf_float+0x350>
 8005eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ece:	463a      	mov	r2, r7
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4798      	blx	r3
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	1eb5      	subs	r5, r6, #2
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	463a      	mov	r2, r7
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ee8:	4798      	blx	r3
 8005eea:	462e      	mov	r6, r5
 8005eec:	6825      	ldr	r5, [r4, #0]
 8005eee:	f015 0510 	ands.w	r5, r5, #16
 8005ef2:	d155      	bne.n	8005fa0 <_scanf_float+0x410>
 8005ef4:	7035      	strb	r5, [r6, #0]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f00:	d11b      	bne.n	8005f3a <_scanf_float+0x3aa>
 8005f02:	9b01      	ldr	r3, [sp, #4]
 8005f04:	454b      	cmp	r3, r9
 8005f06:	eba3 0209 	sub.w	r2, r3, r9
 8005f0a:	d123      	bne.n	8005f54 <_scanf_float+0x3c4>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4659      	mov	r1, fp
 8005f10:	4640      	mov	r0, r8
 8005f12:	f000 ff19 	bl	8006d48 <_strtod_r>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	f012 0f02 	tst.w	r2, #2
 8005f1e:	4606      	mov	r6, r0
 8005f20:	460f      	mov	r7, r1
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	d021      	beq.n	8005f6a <_scanf_float+0x3da>
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	9903      	ldr	r1, [sp, #12]
 8005f2a:	600a      	str	r2, [r1, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	e9c3 6700 	strd	r6, r7, [r3]
 8005f32:	68e3      	ldr	r3, [r4, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60e3      	str	r3, [r4, #12]
 8005f38:	e66d      	b.n	8005c16 <_scanf_float+0x86>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0e5      	beq.n	8005f0c <_scanf_float+0x37c>
 8005f40:	9905      	ldr	r1, [sp, #20]
 8005f42:	230a      	movs	r3, #10
 8005f44:	462a      	mov	r2, r5
 8005f46:	4640      	mov	r0, r8
 8005f48:	3101      	adds	r1, #1
 8005f4a:	f000 ff7f 	bl	8006e4c <_strtol_r>
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	9e05      	ldr	r6, [sp, #20]
 8005f52:	1ac2      	subs	r2, r0, r3
 8005f54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005f58:	429e      	cmp	r6, r3
 8005f5a:	bf28      	it	cs
 8005f5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005f60:	4630      	mov	r0, r6
 8005f62:	4910      	ldr	r1, [pc, #64]	; (8005fa4 <_scanf_float+0x414>)
 8005f64:	f000 f8c6 	bl	80060f4 <siprintf>
 8005f68:	e7d0      	b.n	8005f0c <_scanf_float+0x37c>
 8005f6a:	f012 0f04 	tst.w	r2, #4
 8005f6e:	f103 0204 	add.w	r2, r3, #4
 8005f72:	d1d9      	bne.n	8005f28 <_scanf_float+0x398>
 8005f74:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005f78:	f8cc 2000 	str.w	r2, [ip]
 8005f7c:	f8d3 8000 	ldr.w	r8, [r3]
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	f7fa fd42 	bl	8000a0c <__aeabi_dcmpun>
 8005f88:	b128      	cbz	r0, 8005f96 <_scanf_float+0x406>
 8005f8a:	4807      	ldr	r0, [pc, #28]	; (8005fa8 <_scanf_float+0x418>)
 8005f8c:	f000 f87a 	bl	8006084 <nanf>
 8005f90:	f8c8 0000 	str.w	r0, [r8]
 8005f94:	e7cd      	b.n	8005f32 <_scanf_float+0x3a2>
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fd95 	bl	8000ac8 <__aeabi_d2f>
 8005f9e:	e7f7      	b.n	8005f90 <_scanf_float+0x400>
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	e638      	b.n	8005c16 <_scanf_float+0x86>
 8005fa4:	08009d10 	.word	0x08009d10
 8005fa8:	08009e13 	.word	0x08009e13

08005fac <srand>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <srand+0x44>)
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	681d      	ldr	r5, [r3, #0]
 8005fb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005fb6:	b9b3      	cbnz	r3, 8005fe6 <srand+0x3a>
 8005fb8:	2018      	movs	r0, #24
 8005fba:	f002 f95f 	bl	800827c <malloc>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	63a8      	str	r0, [r5, #56]	; 0x38
 8005fc2:	b920      	cbnz	r0, 8005fce <srand+0x22>
 8005fc4:	2142      	movs	r1, #66	; 0x42
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <srand+0x48>)
 8005fc8:	480b      	ldr	r0, [pc, #44]	; (8005ff8 <srand+0x4c>)
 8005fca:	f000 ff41 	bl	8006e50 <__assert_func>
 8005fce:	490b      	ldr	r1, [pc, #44]	; (8005ffc <srand+0x50>)
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <srand+0x54>)
 8005fd2:	e9c0 1300 	strd	r1, r3, [r0]
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <srand+0x58>)
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6083      	str	r3, [r0, #8]
 8005fdc:	230b      	movs	r3, #11
 8005fde:	8183      	strh	r3, [r0, #12]
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005fea:	611c      	str	r4, [r3, #16]
 8005fec:	615a      	str	r2, [r3, #20]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20000010 	.word	0x20000010
 8005ff4:	08009d15 	.word	0x08009d15
 8005ff8:	08009d2c 	.word	0x08009d2c
 8005ffc:	abcd330e 	.word	0xabcd330e
 8006000:	e66d1234 	.word	0xe66d1234
 8006004:	0005deec 	.word	0x0005deec

08006008 <rand>:
 8006008:	4b16      	ldr	r3, [pc, #88]	; (8006064 <rand+0x5c>)
 800600a:	b510      	push	{r4, lr}
 800600c:	681c      	ldr	r4, [r3, #0]
 800600e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006010:	b9b3      	cbnz	r3, 8006040 <rand+0x38>
 8006012:	2018      	movs	r0, #24
 8006014:	f002 f932 	bl	800827c <malloc>
 8006018:	4602      	mov	r2, r0
 800601a:	63a0      	str	r0, [r4, #56]	; 0x38
 800601c:	b920      	cbnz	r0, 8006028 <rand+0x20>
 800601e:	214e      	movs	r1, #78	; 0x4e
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <rand+0x60>)
 8006022:	4812      	ldr	r0, [pc, #72]	; (800606c <rand+0x64>)
 8006024:	f000 ff14 	bl	8006e50 <__assert_func>
 8006028:	4911      	ldr	r1, [pc, #68]	; (8006070 <rand+0x68>)
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <rand+0x6c>)
 800602c:	e9c0 1300 	strd	r1, r3, [r0]
 8006030:	4b11      	ldr	r3, [pc, #68]	; (8006078 <rand+0x70>)
 8006032:	2100      	movs	r1, #0
 8006034:	6083      	str	r3, [r0, #8]
 8006036:	230b      	movs	r3, #11
 8006038:	8183      	strh	r3, [r0, #12]
 800603a:	2001      	movs	r0, #1
 800603c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006040:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006042:	4a0e      	ldr	r2, [pc, #56]	; (800607c <rand+0x74>)
 8006044:	6920      	ldr	r0, [r4, #16]
 8006046:	6963      	ldr	r3, [r4, #20]
 8006048:	4342      	muls	r2, r0
 800604a:	490d      	ldr	r1, [pc, #52]	; (8006080 <rand+0x78>)
 800604c:	fb01 2203 	mla	r2, r1, r3, r2
 8006050:	fba0 0101 	umull	r0, r1, r0, r1
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	eb42 0001 	adc.w	r0, r2, r1
 800605a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800605e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006062:	bd10      	pop	{r4, pc}
 8006064:	20000010 	.word	0x20000010
 8006068:	08009d15 	.word	0x08009d15
 800606c:	08009d2c 	.word	0x08009d2c
 8006070:	abcd330e 	.word	0xabcd330e
 8006074:	e66d1234 	.word	0xe66d1234
 8006078:	0005deec 	.word	0x0005deec
 800607c:	5851f42d 	.word	0x5851f42d
 8006080:	4c957f2d 	.word	0x4c957f2d

08006084 <nanf>:
 8006084:	4800      	ldr	r0, [pc, #0]	; (8006088 <nanf+0x4>)
 8006086:	4770      	bx	lr
 8006088:	7fc00000 	.word	0x7fc00000

0800608c <sniprintf>:
 800608c:	b40c      	push	{r2, r3}
 800608e:	b530      	push	{r4, r5, lr}
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <sniprintf+0x64>)
 8006092:	1e0c      	subs	r4, r1, #0
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	b09d      	sub	sp, #116	; 0x74
 8006098:	da08      	bge.n	80060ac <sniprintf+0x20>
 800609a:	238b      	movs	r3, #139	; 0x8b
 800609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	b01d      	add	sp, #116	; 0x74
 80060a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a8:	b002      	add	sp, #8
 80060aa:	4770      	bx	lr
 80060ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80060b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060b4:	bf0c      	ite	eq
 80060b6:	4623      	moveq	r3, r4
 80060b8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	9307      	str	r3, [sp, #28]
 80060c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	9006      	str	r0, [sp, #24]
 80060c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060cc:	4628      	mov	r0, r5
 80060ce:	ab21      	add	r3, sp, #132	; 0x84
 80060d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060d2:	a902      	add	r1, sp, #8
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	f002 ff0b 	bl	8008ef0 <_svfiprintf_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	bfbc      	itt	lt
 80060de:	238b      	movlt	r3, #139	; 0x8b
 80060e0:	602b      	strlt	r3, [r5, #0]
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	d0dd      	beq.n	80060a2 <sniprintf+0x16>
 80060e6:	2200      	movs	r2, #0
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e7d9      	b.n	80060a2 <sniprintf+0x16>
 80060ee:	bf00      	nop
 80060f0:	20000010 	.word	0x20000010

080060f4 <siprintf>:
 80060f4:	b40e      	push	{r1, r2, r3}
 80060f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060fa:	b500      	push	{lr}
 80060fc:	b09c      	sub	sp, #112	; 0x70
 80060fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006100:	9002      	str	r0, [sp, #8]
 8006102:	9006      	str	r0, [sp, #24]
 8006104:	9107      	str	r1, [sp, #28]
 8006106:	9104      	str	r1, [sp, #16]
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <siprintf+0x38>)
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <siprintf+0x3c>)
 800610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006110:	9105      	str	r1, [sp, #20]
 8006112:	6800      	ldr	r0, [r0, #0]
 8006114:	a902      	add	r1, sp, #8
 8006116:	9301      	str	r3, [sp, #4]
 8006118:	f002 feea 	bl	8008ef0 <_svfiprintf_r>
 800611c:	2200      	movs	r2, #0
 800611e:	9b02      	ldr	r3, [sp, #8]
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	b01c      	add	sp, #112	; 0x70
 8006124:	f85d eb04 	ldr.w	lr, [sp], #4
 8006128:	b003      	add	sp, #12
 800612a:	4770      	bx	lr
 800612c:	20000010 	.word	0x20000010
 8006130:	ffff0208 	.word	0xffff0208

08006134 <sulp>:
 8006134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	460f      	mov	r7, r1
 800613a:	4690      	mov	r8, r2
 800613c:	f002 fc44 	bl	80089c8 <__ulp>
 8006140:	4604      	mov	r4, r0
 8006142:	460d      	mov	r5, r1
 8006144:	f1b8 0f00 	cmp.w	r8, #0
 8006148:	d011      	beq.n	800616e <sulp+0x3a>
 800614a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800614e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006152:	2b00      	cmp	r3, #0
 8006154:	dd0b      	ble.n	800616e <sulp+0x3a>
 8006156:	2400      	movs	r4, #0
 8006158:	051b      	lsls	r3, r3, #20
 800615a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800615e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006162:	4622      	mov	r2, r4
 8006164:	462b      	mov	r3, r5
 8006166:	f7fa f9b7 	bl	80004d8 <__aeabi_dmul>
 800616a:	4604      	mov	r4, r0
 800616c:	460d      	mov	r5, r1
 800616e:	4620      	mov	r0, r4
 8006170:	4629      	mov	r1, r5
 8006172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006178 <_strtod_l>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	469b      	mov	fp, r3
 800617e:	2300      	movs	r3, #0
 8006180:	b09f      	sub	sp, #124	; 0x7c
 8006182:	931a      	str	r3, [sp, #104]	; 0x68
 8006184:	4b9e      	ldr	r3, [pc, #632]	; (8006400 <_strtod_l+0x288>)
 8006186:	4682      	mov	sl, r0
 8006188:	681f      	ldr	r7, [r3, #0]
 800618a:	460e      	mov	r6, r1
 800618c:	4638      	mov	r0, r7
 800618e:	9215      	str	r2, [sp, #84]	; 0x54
 8006190:	f7f9 ffde 	bl	8000150 <strlen>
 8006194:	f04f 0800 	mov.w	r8, #0
 8006198:	4604      	mov	r4, r0
 800619a:	f04f 0900 	mov.w	r9, #0
 800619e:	9619      	str	r6, [sp, #100]	; 0x64
 80061a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	2a2b      	cmp	r2, #43	; 0x2b
 80061a6:	d04c      	beq.n	8006242 <_strtod_l+0xca>
 80061a8:	d83a      	bhi.n	8006220 <_strtod_l+0xa8>
 80061aa:	2a0d      	cmp	r2, #13
 80061ac:	d833      	bhi.n	8006216 <_strtod_l+0x9e>
 80061ae:	2a08      	cmp	r2, #8
 80061b0:	d833      	bhi.n	800621a <_strtod_l+0xa2>
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	d03d      	beq.n	8006232 <_strtod_l+0xba>
 80061b6:	2300      	movs	r3, #0
 80061b8:	930a      	str	r3, [sp, #40]	; 0x28
 80061ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80061bc:	782b      	ldrb	r3, [r5, #0]
 80061be:	2b30      	cmp	r3, #48	; 0x30
 80061c0:	f040 80aa 	bne.w	8006318 <_strtod_l+0x1a0>
 80061c4:	786b      	ldrb	r3, [r5, #1]
 80061c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061ca:	2b58      	cmp	r3, #88	; 0x58
 80061cc:	d166      	bne.n	800629c <_strtod_l+0x124>
 80061ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d0:	4650      	mov	r0, sl
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	ab1a      	add	r3, sp, #104	; 0x68
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	4a8a      	ldr	r2, [pc, #552]	; (8006404 <_strtod_l+0x28c>)
 80061da:	f8cd b008 	str.w	fp, [sp, #8]
 80061de:	ab1b      	add	r3, sp, #108	; 0x6c
 80061e0:	a919      	add	r1, sp, #100	; 0x64
 80061e2:	f001 fd49 	bl	8007c78 <__gethex>
 80061e6:	f010 0607 	ands.w	r6, r0, #7
 80061ea:	4604      	mov	r4, r0
 80061ec:	d005      	beq.n	80061fa <_strtod_l+0x82>
 80061ee:	2e06      	cmp	r6, #6
 80061f0:	d129      	bne.n	8006246 <_strtod_l+0xce>
 80061f2:	2300      	movs	r3, #0
 80061f4:	3501      	adds	r5, #1
 80061f6:	9519      	str	r5, [sp, #100]	; 0x64
 80061f8:	930a      	str	r3, [sp, #40]	; 0x28
 80061fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 858a 	bne.w	8006d16 <_strtod_l+0xb9e>
 8006202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006204:	b1d3      	cbz	r3, 800623c <_strtod_l+0xc4>
 8006206:	4642      	mov	r2, r8
 8006208:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	b01f      	add	sp, #124	; 0x7c
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	2a20      	cmp	r2, #32
 8006218:	d1cd      	bne.n	80061b6 <_strtod_l+0x3e>
 800621a:	3301      	adds	r3, #1
 800621c:	9319      	str	r3, [sp, #100]	; 0x64
 800621e:	e7bf      	b.n	80061a0 <_strtod_l+0x28>
 8006220:	2a2d      	cmp	r2, #45	; 0x2d
 8006222:	d1c8      	bne.n	80061b6 <_strtod_l+0x3e>
 8006224:	2201      	movs	r2, #1
 8006226:	920a      	str	r2, [sp, #40]	; 0x28
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	9219      	str	r2, [sp, #100]	; 0x64
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1c3      	bne.n	80061ba <_strtod_l+0x42>
 8006232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006234:	9619      	str	r6, [sp, #100]	; 0x64
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 856b 	bne.w	8006d12 <_strtod_l+0xb9a>
 800623c:	4642      	mov	r2, r8
 800623e:	464b      	mov	r3, r9
 8006240:	e7e4      	b.n	800620c <_strtod_l+0x94>
 8006242:	2200      	movs	r2, #0
 8006244:	e7ef      	b.n	8006226 <_strtod_l+0xae>
 8006246:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006248:	b13a      	cbz	r2, 800625a <_strtod_l+0xe2>
 800624a:	2135      	movs	r1, #53	; 0x35
 800624c:	a81c      	add	r0, sp, #112	; 0x70
 800624e:	f002 fcbf 	bl	8008bd0 <__copybits>
 8006252:	4650      	mov	r0, sl
 8006254:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006256:	f002 f887 	bl	8008368 <_Bfree>
 800625a:	3e01      	subs	r6, #1
 800625c:	2e04      	cmp	r6, #4
 800625e:	d806      	bhi.n	800626e <_strtod_l+0xf6>
 8006260:	e8df f006 	tbb	[pc, r6]
 8006264:	1714030a 	.word	0x1714030a
 8006268:	0a          	.byte	0x0a
 8006269:	00          	.byte	0x00
 800626a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800626e:	0721      	lsls	r1, r4, #28
 8006270:	d5c3      	bpl.n	80061fa <_strtod_l+0x82>
 8006272:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006276:	e7c0      	b.n	80061fa <_strtod_l+0x82>
 8006278:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800627a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800627e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006282:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006286:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800628a:	e7f0      	b.n	800626e <_strtod_l+0xf6>
 800628c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006408 <_strtod_l+0x290>
 8006290:	e7ed      	b.n	800626e <_strtod_l+0xf6>
 8006292:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006296:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800629a:	e7e8      	b.n	800626e <_strtod_l+0xf6>
 800629c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	9219      	str	r2, [sp, #100]	; 0x64
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d0f9      	beq.n	800629c <_strtod_l+0x124>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0a6      	beq.n	80061fa <_strtod_l+0x82>
 80062ac:	2301      	movs	r3, #1
 80062ae:	9307      	str	r3, [sp, #28]
 80062b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062b2:	220a      	movs	r2, #10
 80062b4:	9308      	str	r3, [sp, #32]
 80062b6:	2300      	movs	r3, #0
 80062b8:	469b      	mov	fp, r3
 80062ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80062be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80062c0:	7805      	ldrb	r5, [r0, #0]
 80062c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80062c6:	b2d9      	uxtb	r1, r3
 80062c8:	2909      	cmp	r1, #9
 80062ca:	d927      	bls.n	800631c <_strtod_l+0x1a4>
 80062cc:	4622      	mov	r2, r4
 80062ce:	4639      	mov	r1, r7
 80062d0:	f003 f87c 	bl	80093cc <strncmp>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d033      	beq.n	8006340 <_strtod_l+0x1c8>
 80062d8:	2000      	movs	r0, #0
 80062da:	462a      	mov	r2, r5
 80062dc:	465c      	mov	r4, fp
 80062de:	4603      	mov	r3, r0
 80062e0:	9004      	str	r0, [sp, #16]
 80062e2:	2a65      	cmp	r2, #101	; 0x65
 80062e4:	d001      	beq.n	80062ea <_strtod_l+0x172>
 80062e6:	2a45      	cmp	r2, #69	; 0x45
 80062e8:	d114      	bne.n	8006314 <_strtod_l+0x19c>
 80062ea:	b91c      	cbnz	r4, 80062f4 <_strtod_l+0x17c>
 80062ec:	9a07      	ldr	r2, [sp, #28]
 80062ee:	4302      	orrs	r2, r0
 80062f0:	d09f      	beq.n	8006232 <_strtod_l+0xba>
 80062f2:	2400      	movs	r4, #0
 80062f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80062f6:	1c72      	adds	r2, r6, #1
 80062f8:	9219      	str	r2, [sp, #100]	; 0x64
 80062fa:	7872      	ldrb	r2, [r6, #1]
 80062fc:	2a2b      	cmp	r2, #43	; 0x2b
 80062fe:	d079      	beq.n	80063f4 <_strtod_l+0x27c>
 8006300:	2a2d      	cmp	r2, #45	; 0x2d
 8006302:	f000 8083 	beq.w	800640c <_strtod_l+0x294>
 8006306:	2700      	movs	r7, #0
 8006308:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800630c:	2909      	cmp	r1, #9
 800630e:	f240 8083 	bls.w	8006418 <_strtod_l+0x2a0>
 8006312:	9619      	str	r6, [sp, #100]	; 0x64
 8006314:	2500      	movs	r5, #0
 8006316:	e09f      	b.n	8006458 <_strtod_l+0x2e0>
 8006318:	2300      	movs	r3, #0
 800631a:	e7c8      	b.n	80062ae <_strtod_l+0x136>
 800631c:	f1bb 0f08 	cmp.w	fp, #8
 8006320:	bfd5      	itete	le
 8006322:	9906      	ldrle	r1, [sp, #24]
 8006324:	9905      	ldrgt	r1, [sp, #20]
 8006326:	fb02 3301 	mlale	r3, r2, r1, r3
 800632a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800632e:	f100 0001 	add.w	r0, r0, #1
 8006332:	bfd4      	ite	le
 8006334:	9306      	strle	r3, [sp, #24]
 8006336:	9305      	strgt	r3, [sp, #20]
 8006338:	f10b 0b01 	add.w	fp, fp, #1
 800633c:	9019      	str	r0, [sp, #100]	; 0x64
 800633e:	e7be      	b.n	80062be <_strtod_l+0x146>
 8006340:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006342:	191a      	adds	r2, r3, r4
 8006344:	9219      	str	r2, [sp, #100]	; 0x64
 8006346:	5d1a      	ldrb	r2, [r3, r4]
 8006348:	f1bb 0f00 	cmp.w	fp, #0
 800634c:	d036      	beq.n	80063bc <_strtod_l+0x244>
 800634e:	465c      	mov	r4, fp
 8006350:	9004      	str	r0, [sp, #16]
 8006352:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006356:	2b09      	cmp	r3, #9
 8006358:	d912      	bls.n	8006380 <_strtod_l+0x208>
 800635a:	2301      	movs	r3, #1
 800635c:	e7c1      	b.n	80062e2 <_strtod_l+0x16a>
 800635e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006360:	3001      	adds	r0, #1
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	9219      	str	r2, [sp, #100]	; 0x64
 8006366:	785a      	ldrb	r2, [r3, #1]
 8006368:	2a30      	cmp	r2, #48	; 0x30
 800636a:	d0f8      	beq.n	800635e <_strtod_l+0x1e6>
 800636c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006370:	2b08      	cmp	r3, #8
 8006372:	f200 84d5 	bhi.w	8006d20 <_strtod_l+0xba8>
 8006376:	9004      	str	r0, [sp, #16]
 8006378:	2000      	movs	r0, #0
 800637a:	4604      	mov	r4, r0
 800637c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800637e:	9308      	str	r3, [sp, #32]
 8006380:	3a30      	subs	r2, #48	; 0x30
 8006382:	f100 0301 	add.w	r3, r0, #1
 8006386:	d013      	beq.n	80063b0 <_strtod_l+0x238>
 8006388:	9904      	ldr	r1, [sp, #16]
 800638a:	1905      	adds	r5, r0, r4
 800638c:	4419      	add	r1, r3
 800638e:	9104      	str	r1, [sp, #16]
 8006390:	4623      	mov	r3, r4
 8006392:	210a      	movs	r1, #10
 8006394:	42ab      	cmp	r3, r5
 8006396:	d113      	bne.n	80063c0 <_strtod_l+0x248>
 8006398:	1823      	adds	r3, r4, r0
 800639a:	2b08      	cmp	r3, #8
 800639c:	f104 0401 	add.w	r4, r4, #1
 80063a0:	4404      	add	r4, r0
 80063a2:	dc1b      	bgt.n	80063dc <_strtod_l+0x264>
 80063a4:	230a      	movs	r3, #10
 80063a6:	9906      	ldr	r1, [sp, #24]
 80063a8:	fb03 2301 	mla	r3, r3, r1, r2
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063b2:	4618      	mov	r0, r3
 80063b4:	1c51      	adds	r1, r2, #1
 80063b6:	9119      	str	r1, [sp, #100]	; 0x64
 80063b8:	7852      	ldrb	r2, [r2, #1]
 80063ba:	e7ca      	b.n	8006352 <_strtod_l+0x1da>
 80063bc:	4658      	mov	r0, fp
 80063be:	e7d3      	b.n	8006368 <_strtod_l+0x1f0>
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	dc04      	bgt.n	80063ce <_strtod_l+0x256>
 80063c4:	9f06      	ldr	r7, [sp, #24]
 80063c6:	434f      	muls	r7, r1
 80063c8:	9706      	str	r7, [sp, #24]
 80063ca:	3301      	adds	r3, #1
 80063cc:	e7e2      	b.n	8006394 <_strtod_l+0x21c>
 80063ce:	1c5f      	adds	r7, r3, #1
 80063d0:	2f10      	cmp	r7, #16
 80063d2:	bfde      	ittt	le
 80063d4:	9f05      	ldrle	r7, [sp, #20]
 80063d6:	434f      	mulle	r7, r1
 80063d8:	9705      	strle	r7, [sp, #20]
 80063da:	e7f6      	b.n	80063ca <_strtod_l+0x252>
 80063dc:	2c10      	cmp	r4, #16
 80063de:	bfdf      	itttt	le
 80063e0:	230a      	movle	r3, #10
 80063e2:	9905      	ldrle	r1, [sp, #20]
 80063e4:	fb03 2301 	mlale	r3, r3, r1, r2
 80063e8:	9305      	strle	r3, [sp, #20]
 80063ea:	e7e0      	b.n	80063ae <_strtod_l+0x236>
 80063ec:	2300      	movs	r3, #0
 80063ee:	9304      	str	r3, [sp, #16]
 80063f0:	2301      	movs	r3, #1
 80063f2:	e77b      	b.n	80062ec <_strtod_l+0x174>
 80063f4:	2700      	movs	r7, #0
 80063f6:	1cb2      	adds	r2, r6, #2
 80063f8:	9219      	str	r2, [sp, #100]	; 0x64
 80063fa:	78b2      	ldrb	r2, [r6, #2]
 80063fc:	e784      	b.n	8006308 <_strtod_l+0x190>
 80063fe:	bf00      	nop
 8006400:	08009ff4 	.word	0x08009ff4
 8006404:	08009d88 	.word	0x08009d88
 8006408:	7ff00000 	.word	0x7ff00000
 800640c:	2701      	movs	r7, #1
 800640e:	e7f2      	b.n	80063f6 <_strtod_l+0x27e>
 8006410:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006412:	1c51      	adds	r1, r2, #1
 8006414:	9119      	str	r1, [sp, #100]	; 0x64
 8006416:	7852      	ldrb	r2, [r2, #1]
 8006418:	2a30      	cmp	r2, #48	; 0x30
 800641a:	d0f9      	beq.n	8006410 <_strtod_l+0x298>
 800641c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006420:	2908      	cmp	r1, #8
 8006422:	f63f af77 	bhi.w	8006314 <_strtod_l+0x19c>
 8006426:	f04f 0e0a 	mov.w	lr, #10
 800642a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800642e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006430:	9209      	str	r2, [sp, #36]	; 0x24
 8006432:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006434:	1c51      	adds	r1, r2, #1
 8006436:	9119      	str	r1, [sp, #100]	; 0x64
 8006438:	7852      	ldrb	r2, [r2, #1]
 800643a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800643e:	2d09      	cmp	r5, #9
 8006440:	d935      	bls.n	80064ae <_strtod_l+0x336>
 8006442:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006444:	1b49      	subs	r1, r1, r5
 8006446:	2908      	cmp	r1, #8
 8006448:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800644c:	dc02      	bgt.n	8006454 <_strtod_l+0x2dc>
 800644e:	4565      	cmp	r5, ip
 8006450:	bfa8      	it	ge
 8006452:	4665      	movge	r5, ip
 8006454:	b107      	cbz	r7, 8006458 <_strtod_l+0x2e0>
 8006456:	426d      	negs	r5, r5
 8006458:	2c00      	cmp	r4, #0
 800645a:	d14c      	bne.n	80064f6 <_strtod_l+0x37e>
 800645c:	9907      	ldr	r1, [sp, #28]
 800645e:	4301      	orrs	r1, r0
 8006460:	f47f aecb 	bne.w	80061fa <_strtod_l+0x82>
 8006464:	2b00      	cmp	r3, #0
 8006466:	f47f aee4 	bne.w	8006232 <_strtod_l+0xba>
 800646a:	2a69      	cmp	r2, #105	; 0x69
 800646c:	d026      	beq.n	80064bc <_strtod_l+0x344>
 800646e:	dc23      	bgt.n	80064b8 <_strtod_l+0x340>
 8006470:	2a49      	cmp	r2, #73	; 0x49
 8006472:	d023      	beq.n	80064bc <_strtod_l+0x344>
 8006474:	2a4e      	cmp	r2, #78	; 0x4e
 8006476:	f47f aedc 	bne.w	8006232 <_strtod_l+0xba>
 800647a:	499d      	ldr	r1, [pc, #628]	; (80066f0 <_strtod_l+0x578>)
 800647c:	a819      	add	r0, sp, #100	; 0x64
 800647e:	f001 fe49 	bl	8008114 <__match>
 8006482:	2800      	cmp	r0, #0
 8006484:	f43f aed5 	beq.w	8006232 <_strtod_l+0xba>
 8006488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b28      	cmp	r3, #40	; 0x28
 800648e:	d12c      	bne.n	80064ea <_strtod_l+0x372>
 8006490:	4998      	ldr	r1, [pc, #608]	; (80066f4 <_strtod_l+0x57c>)
 8006492:	aa1c      	add	r2, sp, #112	; 0x70
 8006494:	a819      	add	r0, sp, #100	; 0x64
 8006496:	f001 fe51 	bl	800813c <__hexnan>
 800649a:	2805      	cmp	r0, #5
 800649c:	d125      	bne.n	80064ea <_strtod_l+0x372>
 800649e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80064a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80064a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80064ac:	e6a5      	b.n	80061fa <_strtod_l+0x82>
 80064ae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80064b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80064b6:	e7bc      	b.n	8006432 <_strtod_l+0x2ba>
 80064b8:	2a6e      	cmp	r2, #110	; 0x6e
 80064ba:	e7dc      	b.n	8006476 <_strtod_l+0x2fe>
 80064bc:	498e      	ldr	r1, [pc, #568]	; (80066f8 <_strtod_l+0x580>)
 80064be:	a819      	add	r0, sp, #100	; 0x64
 80064c0:	f001 fe28 	bl	8008114 <__match>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	f43f aeb4 	beq.w	8006232 <_strtod_l+0xba>
 80064ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064cc:	498b      	ldr	r1, [pc, #556]	; (80066fc <_strtod_l+0x584>)
 80064ce:	3b01      	subs	r3, #1
 80064d0:	a819      	add	r0, sp, #100	; 0x64
 80064d2:	9319      	str	r3, [sp, #100]	; 0x64
 80064d4:	f001 fe1e 	bl	8008114 <__match>
 80064d8:	b910      	cbnz	r0, 80064e0 <_strtod_l+0x368>
 80064da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064dc:	3301      	adds	r3, #1
 80064de:	9319      	str	r3, [sp, #100]	; 0x64
 80064e0:	f04f 0800 	mov.w	r8, #0
 80064e4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006700 <_strtod_l+0x588>
 80064e8:	e687      	b.n	80061fa <_strtod_l+0x82>
 80064ea:	4886      	ldr	r0, [pc, #536]	; (8006704 <_strtod_l+0x58c>)
 80064ec:	f002 ff58 	bl	80093a0 <nan>
 80064f0:	4680      	mov	r8, r0
 80064f2:	4689      	mov	r9, r1
 80064f4:	e681      	b.n	80061fa <_strtod_l+0x82>
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	f1bb 0f00 	cmp.w	fp, #0
 80064fc:	bf08      	it	eq
 80064fe:	46a3      	moveq	fp, r4
 8006500:	1aeb      	subs	r3, r5, r3
 8006502:	2c10      	cmp	r4, #16
 8006504:	9806      	ldr	r0, [sp, #24]
 8006506:	4626      	mov	r6, r4
 8006508:	9307      	str	r3, [sp, #28]
 800650a:	bfa8      	it	ge
 800650c:	2610      	movge	r6, #16
 800650e:	f7f9 ff69 	bl	80003e4 <__aeabi_ui2d>
 8006512:	2c09      	cmp	r4, #9
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	dd13      	ble.n	8006542 <_strtod_l+0x3ca>
 800651a:	4b7b      	ldr	r3, [pc, #492]	; (8006708 <_strtod_l+0x590>)
 800651c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006520:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	4680      	mov	r8, r0
 800652a:	9805      	ldr	r0, [sp, #20]
 800652c:	4689      	mov	r9, r1
 800652e:	f7f9 ff59 	bl	80003e4 <__aeabi_ui2d>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f7f9 fe17 	bl	800016c <__adddf3>
 800653e:	4680      	mov	r8, r0
 8006540:	4689      	mov	r9, r1
 8006542:	2c0f      	cmp	r4, #15
 8006544:	dc36      	bgt.n	80065b4 <_strtod_l+0x43c>
 8006546:	9b07      	ldr	r3, [sp, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f43f ae56 	beq.w	80061fa <_strtod_l+0x82>
 800654e:	dd22      	ble.n	8006596 <_strtod_l+0x41e>
 8006550:	2b16      	cmp	r3, #22
 8006552:	dc09      	bgt.n	8006568 <_strtod_l+0x3f0>
 8006554:	496c      	ldr	r1, [pc, #432]	; (8006708 <_strtod_l+0x590>)
 8006556:	4642      	mov	r2, r8
 8006558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800655c:	464b      	mov	r3, r9
 800655e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006562:	f7f9 ffb9 	bl	80004d8 <__aeabi_dmul>
 8006566:	e7c3      	b.n	80064f0 <_strtod_l+0x378>
 8006568:	9a07      	ldr	r2, [sp, #28]
 800656a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800656e:	4293      	cmp	r3, r2
 8006570:	db20      	blt.n	80065b4 <_strtod_l+0x43c>
 8006572:	4d65      	ldr	r5, [pc, #404]	; (8006708 <_strtod_l+0x590>)
 8006574:	f1c4 040f 	rsb	r4, r4, #15
 8006578:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800657c:	4642      	mov	r2, r8
 800657e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006582:	464b      	mov	r3, r9
 8006584:	f7f9 ffa8 	bl	80004d8 <__aeabi_dmul>
 8006588:	9b07      	ldr	r3, [sp, #28]
 800658a:	1b1c      	subs	r4, r3, r4
 800658c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006594:	e7e5      	b.n	8006562 <_strtod_l+0x3ea>
 8006596:	9b07      	ldr	r3, [sp, #28]
 8006598:	3316      	adds	r3, #22
 800659a:	db0b      	blt.n	80065b4 <_strtod_l+0x43c>
 800659c:	9b04      	ldr	r3, [sp, #16]
 800659e:	4640      	mov	r0, r8
 80065a0:	1b5d      	subs	r5, r3, r5
 80065a2:	4b59      	ldr	r3, [pc, #356]	; (8006708 <_strtod_l+0x590>)
 80065a4:	4649      	mov	r1, r9
 80065a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80065aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065ae:	f7fa f8bd 	bl	800072c <__aeabi_ddiv>
 80065b2:	e79d      	b.n	80064f0 <_strtod_l+0x378>
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	1ba6      	subs	r6, r4, r6
 80065b8:	441e      	add	r6, r3
 80065ba:	2e00      	cmp	r6, #0
 80065bc:	dd74      	ble.n	80066a8 <_strtod_l+0x530>
 80065be:	f016 030f 	ands.w	r3, r6, #15
 80065c2:	d00a      	beq.n	80065da <_strtod_l+0x462>
 80065c4:	4950      	ldr	r1, [pc, #320]	; (8006708 <_strtod_l+0x590>)
 80065c6:	4642      	mov	r2, r8
 80065c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065d0:	464b      	mov	r3, r9
 80065d2:	f7f9 ff81 	bl	80004d8 <__aeabi_dmul>
 80065d6:	4680      	mov	r8, r0
 80065d8:	4689      	mov	r9, r1
 80065da:	f036 060f 	bics.w	r6, r6, #15
 80065de:	d052      	beq.n	8006686 <_strtod_l+0x50e>
 80065e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80065e4:	dd27      	ble.n	8006636 <_strtod_l+0x4be>
 80065e6:	f04f 0b00 	mov.w	fp, #0
 80065ea:	f8cd b010 	str.w	fp, [sp, #16]
 80065ee:	f8cd b020 	str.w	fp, [sp, #32]
 80065f2:	f8cd b018 	str.w	fp, [sp, #24]
 80065f6:	2322      	movs	r3, #34	; 0x22
 80065f8:	f04f 0800 	mov.w	r8, #0
 80065fc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006700 <_strtod_l+0x588>
 8006600:	f8ca 3000 	str.w	r3, [sl]
 8006604:	9b08      	ldr	r3, [sp, #32]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f43f adf7 	beq.w	80061fa <_strtod_l+0x82>
 800660c:	4650      	mov	r0, sl
 800660e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006610:	f001 feaa 	bl	8008368 <_Bfree>
 8006614:	4650      	mov	r0, sl
 8006616:	9906      	ldr	r1, [sp, #24]
 8006618:	f001 fea6 	bl	8008368 <_Bfree>
 800661c:	4650      	mov	r0, sl
 800661e:	9904      	ldr	r1, [sp, #16]
 8006620:	f001 fea2 	bl	8008368 <_Bfree>
 8006624:	4650      	mov	r0, sl
 8006626:	9908      	ldr	r1, [sp, #32]
 8006628:	f001 fe9e 	bl	8008368 <_Bfree>
 800662c:	4659      	mov	r1, fp
 800662e:	4650      	mov	r0, sl
 8006630:	f001 fe9a 	bl	8008368 <_Bfree>
 8006634:	e5e1      	b.n	80061fa <_strtod_l+0x82>
 8006636:	4b35      	ldr	r3, [pc, #212]	; (800670c <_strtod_l+0x594>)
 8006638:	4640      	mov	r0, r8
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	2300      	movs	r3, #0
 800663e:	4649      	mov	r1, r9
 8006640:	461f      	mov	r7, r3
 8006642:	1136      	asrs	r6, r6, #4
 8006644:	2e01      	cmp	r6, #1
 8006646:	dc21      	bgt.n	800668c <_strtod_l+0x514>
 8006648:	b10b      	cbz	r3, 800664e <_strtod_l+0x4d6>
 800664a:	4680      	mov	r8, r0
 800664c:	4689      	mov	r9, r1
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <_strtod_l+0x594>)
 8006650:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006654:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006658:	4642      	mov	r2, r8
 800665a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800665e:	464b      	mov	r3, r9
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	4b26      	ldr	r3, [pc, #152]	; (8006700 <_strtod_l+0x588>)
 8006666:	460a      	mov	r2, r1
 8006668:	400b      	ands	r3, r1
 800666a:	4929      	ldr	r1, [pc, #164]	; (8006710 <_strtod_l+0x598>)
 800666c:	4680      	mov	r8, r0
 800666e:	428b      	cmp	r3, r1
 8006670:	d8b9      	bhi.n	80065e6 <_strtod_l+0x46e>
 8006672:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006676:	428b      	cmp	r3, r1
 8006678:	bf86      	itte	hi
 800667a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800667e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006714 <_strtod_l+0x59c>
 8006682:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006686:	2300      	movs	r3, #0
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	e07f      	b.n	800678c <_strtod_l+0x614>
 800668c:	07f2      	lsls	r2, r6, #31
 800668e:	d505      	bpl.n	800669c <_strtod_l+0x524>
 8006690:	9b05      	ldr	r3, [sp, #20]
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 ff1f 	bl	80004d8 <__aeabi_dmul>
 800669a:	2301      	movs	r3, #1
 800669c:	9a05      	ldr	r2, [sp, #20]
 800669e:	3701      	adds	r7, #1
 80066a0:	3208      	adds	r2, #8
 80066a2:	1076      	asrs	r6, r6, #1
 80066a4:	9205      	str	r2, [sp, #20]
 80066a6:	e7cd      	b.n	8006644 <_strtod_l+0x4cc>
 80066a8:	d0ed      	beq.n	8006686 <_strtod_l+0x50e>
 80066aa:	4276      	negs	r6, r6
 80066ac:	f016 020f 	ands.w	r2, r6, #15
 80066b0:	d00a      	beq.n	80066c8 <_strtod_l+0x550>
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <_strtod_l+0x590>)
 80066b4:	4640      	mov	r0, r8
 80066b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066ba:	4649      	mov	r1, r9
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7fa f834 	bl	800072c <__aeabi_ddiv>
 80066c4:	4680      	mov	r8, r0
 80066c6:	4689      	mov	r9, r1
 80066c8:	1136      	asrs	r6, r6, #4
 80066ca:	d0dc      	beq.n	8006686 <_strtod_l+0x50e>
 80066cc:	2e1f      	cmp	r6, #31
 80066ce:	dd23      	ble.n	8006718 <_strtod_l+0x5a0>
 80066d0:	f04f 0b00 	mov.w	fp, #0
 80066d4:	f8cd b010 	str.w	fp, [sp, #16]
 80066d8:	f8cd b020 	str.w	fp, [sp, #32]
 80066dc:	f8cd b018 	str.w	fp, [sp, #24]
 80066e0:	2322      	movs	r3, #34	; 0x22
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	f04f 0900 	mov.w	r9, #0
 80066ea:	f8ca 3000 	str.w	r3, [sl]
 80066ee:	e789      	b.n	8006604 <_strtod_l+0x48c>
 80066f0:	08009ce9 	.word	0x08009ce9
 80066f4:	08009d9c 	.word	0x08009d9c
 80066f8:	08009ce1 	.word	0x08009ce1
 80066fc:	08009f18 	.word	0x08009f18
 8006700:	7ff00000 	.word	0x7ff00000
 8006704:	08009e13 	.word	0x08009e13
 8006708:	0800a090 	.word	0x0800a090
 800670c:	0800a068 	.word	0x0800a068
 8006710:	7ca00000 	.word	0x7ca00000
 8006714:	7fefffff 	.word	0x7fefffff
 8006718:	f016 0310 	ands.w	r3, r6, #16
 800671c:	bf18      	it	ne
 800671e:	236a      	movne	r3, #106	; 0x6a
 8006720:	4640      	mov	r0, r8
 8006722:	9305      	str	r3, [sp, #20]
 8006724:	4649      	mov	r1, r9
 8006726:	2300      	movs	r3, #0
 8006728:	4fb0      	ldr	r7, [pc, #704]	; (80069ec <_strtod_l+0x874>)
 800672a:	07f2      	lsls	r2, r6, #31
 800672c:	d504      	bpl.n	8006738 <_strtod_l+0x5c0>
 800672e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006732:	f7f9 fed1 	bl	80004d8 <__aeabi_dmul>
 8006736:	2301      	movs	r3, #1
 8006738:	1076      	asrs	r6, r6, #1
 800673a:	f107 0708 	add.w	r7, r7, #8
 800673e:	d1f4      	bne.n	800672a <_strtod_l+0x5b2>
 8006740:	b10b      	cbz	r3, 8006746 <_strtod_l+0x5ce>
 8006742:	4680      	mov	r8, r0
 8006744:	4689      	mov	r9, r1
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	b1c3      	cbz	r3, 800677c <_strtod_l+0x604>
 800674a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800674e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006752:	2b00      	cmp	r3, #0
 8006754:	4649      	mov	r1, r9
 8006756:	dd11      	ble.n	800677c <_strtod_l+0x604>
 8006758:	2b1f      	cmp	r3, #31
 800675a:	f340 8127 	ble.w	80069ac <_strtod_l+0x834>
 800675e:	2b34      	cmp	r3, #52	; 0x34
 8006760:	bfd8      	it	le
 8006762:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	bfcf      	iteee	gt
 800676c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006770:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006774:	fa03 f202 	lslle.w	r2, r3, r2
 8006778:	ea02 0901 	andle.w	r9, r2, r1
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa f910 	bl	80009a8 <__aeabi_dcmpeq>
 8006788:	2800      	cmp	r0, #0
 800678a:	d1a1      	bne.n	80066d0 <_strtod_l+0x558>
 800678c:	9b06      	ldr	r3, [sp, #24]
 800678e:	465a      	mov	r2, fp
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	4650      	mov	r0, sl
 8006794:	4623      	mov	r3, r4
 8006796:	9908      	ldr	r1, [sp, #32]
 8006798:	f001 fe4e 	bl	8008438 <__s2b>
 800679c:	9008      	str	r0, [sp, #32]
 800679e:	2800      	cmp	r0, #0
 80067a0:	f43f af21 	beq.w	80065e6 <_strtod_l+0x46e>
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	f04f 0b00 	mov.w	fp, #0
 80067aa:	1b5d      	subs	r5, r3, r5
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	f8cd b010 	str.w	fp, [sp, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfb4      	ite	lt
 80067b6:	462b      	movlt	r3, r5
 80067b8:	2300      	movge	r3, #0
 80067ba:	930e      	str	r3, [sp, #56]	; 0x38
 80067bc:	9b07      	ldr	r3, [sp, #28]
 80067be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067c2:	9314      	str	r3, [sp, #80]	; 0x50
 80067c4:	9b08      	ldr	r3, [sp, #32]
 80067c6:	4650      	mov	r0, sl
 80067c8:	6859      	ldr	r1, [r3, #4]
 80067ca:	f001 fd8d 	bl	80082e8 <_Balloc>
 80067ce:	9006      	str	r0, [sp, #24]
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f43f af10 	beq.w	80065f6 <_strtod_l+0x47e>
 80067d6:	9b08      	ldr	r3, [sp, #32]
 80067d8:	300c      	adds	r0, #12
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	f103 010c 	add.w	r1, r3, #12
 80067e0:	3202      	adds	r2, #2
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	f001 fd72 	bl	80082cc <memcpy>
 80067e8:	ab1c      	add	r3, sp, #112	; 0x70
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	4650      	mov	r0, sl
 80067f6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80067fa:	f002 f95f 	bl	8008abc <__d2b>
 80067fe:	901a      	str	r0, [sp, #104]	; 0x68
 8006800:	2800      	cmp	r0, #0
 8006802:	f43f aef8 	beq.w	80065f6 <_strtod_l+0x47e>
 8006806:	2101      	movs	r1, #1
 8006808:	4650      	mov	r0, sl
 800680a:	f001 fead 	bl	8008568 <__i2b>
 800680e:	4603      	mov	r3, r0
 8006810:	9004      	str	r0, [sp, #16]
 8006812:	2800      	cmp	r0, #0
 8006814:	f43f aeef 	beq.w	80065f6 <_strtod_l+0x47e>
 8006818:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800681a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800681c:	2d00      	cmp	r5, #0
 800681e:	bfab      	itete	ge
 8006820:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006822:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006824:	18ee      	addge	r6, r5, r3
 8006826:	1b5c      	sublt	r4, r3, r5
 8006828:	9b05      	ldr	r3, [sp, #20]
 800682a:	bfa8      	it	ge
 800682c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800682e:	eba5 0503 	sub.w	r5, r5, r3
 8006832:	4415      	add	r5, r2
 8006834:	4b6e      	ldr	r3, [pc, #440]	; (80069f0 <_strtod_l+0x878>)
 8006836:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800683a:	bfb8      	it	lt
 800683c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800683e:	429d      	cmp	r5, r3
 8006840:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006844:	f280 80c4 	bge.w	80069d0 <_strtod_l+0x858>
 8006848:	1b5b      	subs	r3, r3, r5
 800684a:	2b1f      	cmp	r3, #31
 800684c:	f04f 0701 	mov.w	r7, #1
 8006850:	eba2 0203 	sub.w	r2, r2, r3
 8006854:	f300 80b1 	bgt.w	80069ba <_strtod_l+0x842>
 8006858:	2500      	movs	r5, #0
 800685a:	fa07 f303 	lsl.w	r3, r7, r3
 800685e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006860:	18b7      	adds	r7, r6, r2
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	42be      	cmp	r6, r7
 8006866:	4414      	add	r4, r2
 8006868:	441c      	add	r4, r3
 800686a:	4633      	mov	r3, r6
 800686c:	bfa8      	it	ge
 800686e:	463b      	movge	r3, r7
 8006870:	42a3      	cmp	r3, r4
 8006872:	bfa8      	it	ge
 8006874:	4623      	movge	r3, r4
 8006876:	2b00      	cmp	r3, #0
 8006878:	bfc2      	ittt	gt
 800687a:	1aff      	subgt	r7, r7, r3
 800687c:	1ae4      	subgt	r4, r4, r3
 800687e:	1af6      	subgt	r6, r6, r3
 8006880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd17      	ble.n	80068b6 <_strtod_l+0x73e>
 8006886:	461a      	mov	r2, r3
 8006888:	4650      	mov	r0, sl
 800688a:	9904      	ldr	r1, [sp, #16]
 800688c:	f001 ff2a 	bl	80086e4 <__pow5mult>
 8006890:	9004      	str	r0, [sp, #16]
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aeaf 	beq.w	80065f6 <_strtod_l+0x47e>
 8006898:	4601      	mov	r1, r0
 800689a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800689c:	4650      	mov	r0, sl
 800689e:	f001 fe79 	bl	8008594 <__multiply>
 80068a2:	9009      	str	r0, [sp, #36]	; 0x24
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f43f aea6 	beq.w	80065f6 <_strtod_l+0x47e>
 80068aa:	4650      	mov	r0, sl
 80068ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068ae:	f001 fd5b 	bl	8008368 <_Bfree>
 80068b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b4:	931a      	str	r3, [sp, #104]	; 0x68
 80068b6:	2f00      	cmp	r7, #0
 80068b8:	f300 808e 	bgt.w	80069d8 <_strtod_l+0x860>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dd08      	ble.n	80068d4 <_strtod_l+0x75c>
 80068c2:	4650      	mov	r0, sl
 80068c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068c6:	9906      	ldr	r1, [sp, #24]
 80068c8:	f001 ff0c 	bl	80086e4 <__pow5mult>
 80068cc:	9006      	str	r0, [sp, #24]
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f43f ae91 	beq.w	80065f6 <_strtod_l+0x47e>
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	dd08      	ble.n	80068ea <_strtod_l+0x772>
 80068d8:	4622      	mov	r2, r4
 80068da:	4650      	mov	r0, sl
 80068dc:	9906      	ldr	r1, [sp, #24]
 80068de:	f001 ff5b 	bl	8008798 <__lshift>
 80068e2:	9006      	str	r0, [sp, #24]
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f43f ae86 	beq.w	80065f6 <_strtod_l+0x47e>
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	dd08      	ble.n	8006900 <_strtod_l+0x788>
 80068ee:	4632      	mov	r2, r6
 80068f0:	4650      	mov	r0, sl
 80068f2:	9904      	ldr	r1, [sp, #16]
 80068f4:	f001 ff50 	bl	8008798 <__lshift>
 80068f8:	9004      	str	r0, [sp, #16]
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f43f ae7b 	beq.w	80065f6 <_strtod_l+0x47e>
 8006900:	4650      	mov	r0, sl
 8006902:	9a06      	ldr	r2, [sp, #24]
 8006904:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006906:	f001 ffd3 	bl	80088b0 <__mdiff>
 800690a:	4683      	mov	fp, r0
 800690c:	2800      	cmp	r0, #0
 800690e:	f43f ae72 	beq.w	80065f6 <_strtod_l+0x47e>
 8006912:	2400      	movs	r4, #0
 8006914:	68c3      	ldr	r3, [r0, #12]
 8006916:	9904      	ldr	r1, [sp, #16]
 8006918:	60c4      	str	r4, [r0, #12]
 800691a:	930b      	str	r3, [sp, #44]	; 0x2c
 800691c:	f001 ffac 	bl	8008878 <__mcmp>
 8006920:	42a0      	cmp	r0, r4
 8006922:	da6b      	bge.n	80069fc <_strtod_l+0x884>
 8006924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006926:	ea53 0308 	orrs.w	r3, r3, r8
 800692a:	f040 8091 	bne.w	8006a50 <_strtod_l+0x8d8>
 800692e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 808c 	bne.w	8006a50 <_strtod_l+0x8d8>
 8006938:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800693c:	0d1b      	lsrs	r3, r3, #20
 800693e:	051b      	lsls	r3, r3, #20
 8006940:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006944:	f240 8084 	bls.w	8006a50 <_strtod_l+0x8d8>
 8006948:	f8db 3014 	ldr.w	r3, [fp, #20]
 800694c:	b91b      	cbnz	r3, 8006956 <_strtod_l+0x7de>
 800694e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006952:	2b01      	cmp	r3, #1
 8006954:	dd7c      	ble.n	8006a50 <_strtod_l+0x8d8>
 8006956:	4659      	mov	r1, fp
 8006958:	2201      	movs	r2, #1
 800695a:	4650      	mov	r0, sl
 800695c:	f001 ff1c 	bl	8008798 <__lshift>
 8006960:	9904      	ldr	r1, [sp, #16]
 8006962:	4683      	mov	fp, r0
 8006964:	f001 ff88 	bl	8008878 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	dd71      	ble.n	8006a50 <_strtod_l+0x8d8>
 800696c:	9905      	ldr	r1, [sp, #20]
 800696e:	464b      	mov	r3, r9
 8006970:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <_strtod_l+0x87c>)
 8006972:	2900      	cmp	r1, #0
 8006974:	f000 808c 	beq.w	8006a90 <_strtod_l+0x918>
 8006978:	ea02 0109 	and.w	r1, r2, r9
 800697c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006980:	f300 8086 	bgt.w	8006a90 <_strtod_l+0x918>
 8006984:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006988:	f77f aeaa 	ble.w	80066e0 <_strtod_l+0x568>
 800698c:	4640      	mov	r0, r8
 800698e:	4649      	mov	r1, r9
 8006990:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <_strtod_l+0x880>)
 8006992:	2200      	movs	r2, #0
 8006994:	f7f9 fda0 	bl	80004d8 <__aeabi_dmul>
 8006998:	460b      	mov	r3, r1
 800699a:	4303      	orrs	r3, r0
 800699c:	bf08      	it	eq
 800699e:	2322      	moveq	r3, #34	; 0x22
 80069a0:	4680      	mov	r8, r0
 80069a2:	4689      	mov	r9, r1
 80069a4:	bf08      	it	eq
 80069a6:	f8ca 3000 	streq.w	r3, [sl]
 80069aa:	e62f      	b.n	800660c <_strtod_l+0x494>
 80069ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	ea03 0808 	and.w	r8, r3, r8
 80069b8:	e6e0      	b.n	800677c <_strtod_l+0x604>
 80069ba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80069be:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80069c2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80069c6:	35e2      	adds	r5, #226	; 0xe2
 80069c8:	fa07 f505 	lsl.w	r5, r7, r5
 80069cc:	970f      	str	r7, [sp, #60]	; 0x3c
 80069ce:	e747      	b.n	8006860 <_strtod_l+0x6e8>
 80069d0:	2301      	movs	r3, #1
 80069d2:	2500      	movs	r5, #0
 80069d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069d6:	e743      	b.n	8006860 <_strtod_l+0x6e8>
 80069d8:	463a      	mov	r2, r7
 80069da:	4650      	mov	r0, sl
 80069dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069de:	f001 fedb 	bl	8008798 <__lshift>
 80069e2:	901a      	str	r0, [sp, #104]	; 0x68
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f47f af69 	bne.w	80068bc <_strtod_l+0x744>
 80069ea:	e604      	b.n	80065f6 <_strtod_l+0x47e>
 80069ec:	08009db0 	.word	0x08009db0
 80069f0:	fffffc02 	.word	0xfffffc02
 80069f4:	7ff00000 	.word	0x7ff00000
 80069f8:	39500000 	.word	0x39500000
 80069fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a00:	d165      	bne.n	8006ace <_strtod_l+0x956>
 8006a02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a08:	b35a      	cbz	r2, 8006a62 <_strtod_l+0x8ea>
 8006a0a:	4a99      	ldr	r2, [pc, #612]	; (8006c70 <_strtod_l+0xaf8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d12b      	bne.n	8006a68 <_strtod_l+0x8f0>
 8006a10:	9b05      	ldr	r3, [sp, #20]
 8006a12:	4641      	mov	r1, r8
 8006a14:	b303      	cbz	r3, 8006a58 <_strtod_l+0x8e0>
 8006a16:	464a      	mov	r2, r9
 8006a18:	4b96      	ldr	r3, [pc, #600]	; (8006c74 <_strtod_l+0xafc>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a24:	d81b      	bhi.n	8006a5e <_strtod_l+0x8e6>
 8006a26:	0d1b      	lsrs	r3, r3, #20
 8006a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	4299      	cmp	r1, r3
 8006a32:	d119      	bne.n	8006a68 <_strtod_l+0x8f0>
 8006a34:	4b90      	ldr	r3, [pc, #576]	; (8006c78 <_strtod_l+0xb00>)
 8006a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d102      	bne.n	8006a42 <_strtod_l+0x8ca>
 8006a3c:	3101      	adds	r1, #1
 8006a3e:	f43f adda 	beq.w	80065f6 <_strtod_l+0x47e>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	4b8b      	ldr	r3, [pc, #556]	; (8006c74 <_strtod_l+0xafc>)
 8006a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d19a      	bne.n	800698c <_strtod_l+0x814>
 8006a56:	e5d9      	b.n	800660c <_strtod_l+0x494>
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5c:	e7e8      	b.n	8006a30 <_strtod_l+0x8b8>
 8006a5e:	4613      	mov	r3, r2
 8006a60:	e7e6      	b.n	8006a30 <_strtod_l+0x8b8>
 8006a62:	ea53 0308 	orrs.w	r3, r3, r8
 8006a66:	d081      	beq.n	800696c <_strtod_l+0x7f4>
 8006a68:	b1e5      	cbz	r5, 8006aa4 <_strtod_l+0x92c>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6c:	421d      	tst	r5, r3
 8006a6e:	d0ef      	beq.n	8006a50 <_strtod_l+0x8d8>
 8006a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a72:	4640      	mov	r0, r8
 8006a74:	4649      	mov	r1, r9
 8006a76:	9a05      	ldr	r2, [sp, #20]
 8006a78:	b1c3      	cbz	r3, 8006aac <_strtod_l+0x934>
 8006a7a:	f7ff fb5b 	bl	8006134 <sulp>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a86:	f7f9 fb71 	bl	800016c <__adddf3>
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	4689      	mov	r9, r1
 8006a8e:	e7df      	b.n	8006a50 <_strtod_l+0x8d8>
 8006a90:	4013      	ands	r3, r2
 8006a92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a96:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006a9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006a9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006aa2:	e7d5      	b.n	8006a50 <_strtod_l+0x8d8>
 8006aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aa6:	ea13 0f08 	tst.w	r3, r8
 8006aaa:	e7e0      	b.n	8006a6e <_strtod_l+0x8f6>
 8006aac:	f7ff fb42 	bl	8006134 <sulp>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ab8:	f7f9 fb56 	bl	8000168 <__aeabi_dsub>
 8006abc:	2200      	movs	r2, #0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	4689      	mov	r9, r1
 8006ac4:	f7f9 ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d0c1      	beq.n	8006a50 <_strtod_l+0x8d8>
 8006acc:	e608      	b.n	80066e0 <_strtod_l+0x568>
 8006ace:	4658      	mov	r0, fp
 8006ad0:	9904      	ldr	r1, [sp, #16]
 8006ad2:	f002 f84f 	bl	8008b74 <__ratio>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	f7f9 ff76 	bl	80009d0 <__aeabi_dcmple>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d070      	beq.n	8006bca <_strtod_l+0xa52>
 8006ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d042      	beq.n	8006b74 <_strtod_l+0x9fc>
 8006aee:	2600      	movs	r6, #0
 8006af0:	4f62      	ldr	r7, [pc, #392]	; (8006c7c <_strtod_l+0xb04>)
 8006af2:	4d62      	ldr	r5, [pc, #392]	; (8006c7c <_strtod_l+0xb04>)
 8006af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006afa:	0d1b      	lsrs	r3, r3, #20
 8006afc:	051b      	lsls	r3, r3, #20
 8006afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b02:	4b5f      	ldr	r3, [pc, #380]	; (8006c80 <_strtod_l+0xb08>)
 8006b04:	429a      	cmp	r2, r3
 8006b06:	f040 80c3 	bne.w	8006c90 <_strtod_l+0xb18>
 8006b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006b12:	4649      	mov	r1, r9
 8006b14:	f001 ff58 	bl	80089c8 <__ulp>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fcda 	bl	80004d8 <__aeabi_dmul>
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	f7f9 fb20 	bl	800016c <__adddf3>
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4951      	ldr	r1, [pc, #324]	; (8006c74 <_strtod_l+0xafc>)
 8006b30:	4a54      	ldr	r2, [pc, #336]	; (8006c84 <_strtod_l+0xb0c>)
 8006b32:	4019      	ands	r1, r3
 8006b34:	4291      	cmp	r1, r2
 8006b36:	4680      	mov	r8, r0
 8006b38:	d95d      	bls.n	8006bf6 <_strtod_l+0xa7e>
 8006b3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b3c:	4b4e      	ldr	r3, [pc, #312]	; (8006c78 <_strtod_l+0xb00>)
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d103      	bne.n	8006b4a <_strtod_l+0x9d2>
 8006b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b44:	3301      	adds	r3, #1
 8006b46:	f43f ad56 	beq.w	80065f6 <_strtod_l+0x47e>
 8006b4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006b4e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006c78 <_strtod_l+0xb00>
 8006b52:	4650      	mov	r0, sl
 8006b54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b56:	f001 fc07 	bl	8008368 <_Bfree>
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	9906      	ldr	r1, [sp, #24]
 8006b5e:	f001 fc03 	bl	8008368 <_Bfree>
 8006b62:	4650      	mov	r0, sl
 8006b64:	9904      	ldr	r1, [sp, #16]
 8006b66:	f001 fbff 	bl	8008368 <_Bfree>
 8006b6a:	4659      	mov	r1, fp
 8006b6c:	4650      	mov	r0, sl
 8006b6e:	f001 fbfb 	bl	8008368 <_Bfree>
 8006b72:	e627      	b.n	80067c4 <_strtod_l+0x64c>
 8006b74:	f1b8 0f00 	cmp.w	r8, #0
 8006b78:	d119      	bne.n	8006bae <_strtod_l+0xa36>
 8006b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b80:	b9e3      	cbnz	r3, 8006bbc <_strtod_l+0xa44>
 8006b82:	2200      	movs	r2, #0
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	4b3c      	ldr	r3, [pc, #240]	; (8006c7c <_strtod_l+0xb04>)
 8006b8a:	f7f9 ff17 	bl	80009bc <__aeabi_dcmplt>
 8006b8e:	b9c8      	cbnz	r0, 8006bc4 <_strtod_l+0xa4c>
 8006b90:	2200      	movs	r2, #0
 8006b92:	4630      	mov	r0, r6
 8006b94:	4639      	mov	r1, r7
 8006b96:	4b3c      	ldr	r3, [pc, #240]	; (8006c88 <_strtod_l+0xb10>)
 8006b98:	f7f9 fc9e 	bl	80004d8 <__aeabi_dmul>
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006ba4:	9416      	str	r4, [sp, #88]	; 0x58
 8006ba6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ba8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006bac:	e7a2      	b.n	8006af4 <_strtod_l+0x97c>
 8006bae:	f1b8 0f01 	cmp.w	r8, #1
 8006bb2:	d103      	bne.n	8006bbc <_strtod_l+0xa44>
 8006bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f43f ad92 	beq.w	80066e0 <_strtod_l+0x568>
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	2400      	movs	r4, #0
 8006bc0:	4f32      	ldr	r7, [pc, #200]	; (8006c8c <_strtod_l+0xb14>)
 8006bc2:	e796      	b.n	8006af2 <_strtod_l+0x97a>
 8006bc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006bc6:	4d30      	ldr	r5, [pc, #192]	; (8006c88 <_strtod_l+0xb10>)
 8006bc8:	e7ea      	b.n	8006ba0 <_strtod_l+0xa28>
 8006bca:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <_strtod_l+0xb10>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fc81 	bl	80004d8 <__aeabi_dmul>
 8006bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	b933      	cbnz	r3, 8006bec <_strtod_l+0xa74>
 8006bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006be2:	9010      	str	r0, [sp, #64]	; 0x40
 8006be4:	9311      	str	r3, [sp, #68]	; 0x44
 8006be6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006bea:	e783      	b.n	8006af4 <_strtod_l+0x97c>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006bf4:	e7f7      	b.n	8006be6 <_strtod_l+0xa6e>
 8006bf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006bfa:	9b05      	ldr	r3, [sp, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1a8      	bne.n	8006b52 <_strtod_l+0x9da>
 8006c00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c06:	0d1b      	lsrs	r3, r3, #20
 8006c08:	051b      	lsls	r3, r3, #20
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d1a1      	bne.n	8006b52 <_strtod_l+0x9da>
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7fa fa07 	bl	8001024 <__aeabi_d2lz>
 8006c16:	f7f9 fc31 	bl	800047c <__aeabi_l2d>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 faa1 	bl	8000168 <__aeabi_dsub>
 8006c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c2c:	ea43 0308 	orr.w	r3, r3, r8
 8006c30:	4313      	orrs	r3, r2
 8006c32:	4604      	mov	r4, r0
 8006c34:	460d      	mov	r5, r1
 8006c36:	d066      	beq.n	8006d06 <_strtod_l+0xb8e>
 8006c38:	a309      	add	r3, pc, #36	; (adr r3, 8006c60 <_strtod_l+0xae8>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 febd 	bl	80009bc <__aeabi_dcmplt>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	f47f ace2 	bne.w	800660c <_strtod_l+0x494>
 8006c48:	a307      	add	r3, pc, #28	; (adr r3, 8006c68 <_strtod_l+0xaf0>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7f9 fed1 	bl	80009f8 <__aeabi_dcmpgt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f af7b 	beq.w	8006b52 <_strtod_l+0x9da>
 8006c5c:	e4d6      	b.n	800660c <_strtod_l+0x494>
 8006c5e:	bf00      	nop
 8006c60:	94a03595 	.word	0x94a03595
 8006c64:	3fdfffff 	.word	0x3fdfffff
 8006c68:	35afe535 	.word	0x35afe535
 8006c6c:	3fe00000 	.word	0x3fe00000
 8006c70:	000fffff 	.word	0x000fffff
 8006c74:	7ff00000 	.word	0x7ff00000
 8006c78:	7fefffff 	.word	0x7fefffff
 8006c7c:	3ff00000 	.word	0x3ff00000
 8006c80:	7fe00000 	.word	0x7fe00000
 8006c84:	7c9fffff 	.word	0x7c9fffff
 8006c88:	3fe00000 	.word	0x3fe00000
 8006c8c:	bff00000 	.word	0xbff00000
 8006c90:	9b05      	ldr	r3, [sp, #20]
 8006c92:	b313      	cbz	r3, 8006cda <_strtod_l+0xb62>
 8006c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c9a:	d81e      	bhi.n	8006cda <_strtod_l+0xb62>
 8006c9c:	a326      	add	r3, pc, #152	; (adr r3, 8006d38 <_strtod_l+0xbc0>)
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fe93 	bl	80009d0 <__aeabi_dcmple>
 8006caa:	b190      	cbz	r0, 8006cd2 <_strtod_l+0xb5a>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f7f9 feea 	bl	8000a88 <__aeabi_d2uiz>
 8006cb4:	2801      	cmp	r0, #1
 8006cb6:	bf38      	it	cc
 8006cb8:	2001      	movcc	r0, #1
 8006cba:	f7f9 fb93 	bl	80003e4 <__aeabi_ui2d>
 8006cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	b9d3      	cbnz	r3, 8006cfc <_strtod_l+0xb84>
 8006cc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cca:	9012      	str	r0, [sp, #72]	; 0x48
 8006ccc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006cd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cd4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006cd8:	1a9f      	subs	r7, r3, r2
 8006cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cde:	f001 fe73 	bl	80089c8 <__ulp>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 fbf5 	bl	80004d8 <__aeabi_dmul>
 8006cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006cf2:	f7f9 fa3b 	bl	800016c <__adddf3>
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	4689      	mov	r9, r1
 8006cfa:	e77e      	b.n	8006bfa <_strtod_l+0xa82>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006d04:	e7e3      	b.n	8006cce <_strtod_l+0xb56>
 8006d06:	a30e      	add	r3, pc, #56	; (adr r3, 8006d40 <_strtod_l+0xbc8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fe56 	bl	80009bc <__aeabi_dcmplt>
 8006d10:	e7a1      	b.n	8006c56 <_strtod_l+0xade>
 8006d12:	2300      	movs	r3, #0
 8006d14:	930a      	str	r3, [sp, #40]	; 0x28
 8006d16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	f7ff ba71 	b.w	8006202 <_strtod_l+0x8a>
 8006d20:	2a65      	cmp	r2, #101	; 0x65
 8006d22:	f43f ab63 	beq.w	80063ec <_strtod_l+0x274>
 8006d26:	2a45      	cmp	r2, #69	; 0x45
 8006d28:	f43f ab60 	beq.w	80063ec <_strtod_l+0x274>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f7ff bb95 	b.w	800645c <_strtod_l+0x2e4>
 8006d32:	bf00      	nop
 8006d34:	f3af 8000 	nop.w
 8006d38:	ffc00000 	.word	0xffc00000
 8006d3c:	41dfffff 	.word	0x41dfffff
 8006d40:	94a03595 	.word	0x94a03595
 8006d44:	3fcfffff 	.word	0x3fcfffff

08006d48 <_strtod_r>:
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <_strtod_r+0x8>)
 8006d4a:	f7ff ba15 	b.w	8006178 <_strtod_l>
 8006d4e:	bf00      	nop
 8006d50:	20000078 	.word	0x20000078

08006d54 <_strtol_l.constprop.0>:
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	d001      	beq.n	8006d62 <_strtol_l.constprop.0+0xe>
 8006d5e:	2b24      	cmp	r3, #36	; 0x24
 8006d60:	d906      	bls.n	8006d70 <_strtol_l.constprop.0+0x1c>
 8006d62:	f7fe fa83 	bl	800526c <__errno>
 8006d66:	2316      	movs	r3, #22
 8006d68:	6003      	str	r3, [r0, #0]
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	460d      	mov	r5, r1
 8006d72:	4f35      	ldr	r7, [pc, #212]	; (8006e48 <_strtol_l.constprop.0+0xf4>)
 8006d74:	4628      	mov	r0, r5
 8006d76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d7a:	5de6      	ldrb	r6, [r4, r7]
 8006d7c:	f016 0608 	ands.w	r6, r6, #8
 8006d80:	d1f8      	bne.n	8006d74 <_strtol_l.constprop.0+0x20>
 8006d82:	2c2d      	cmp	r4, #45	; 0x2d
 8006d84:	d12f      	bne.n	8006de6 <_strtol_l.constprop.0+0x92>
 8006d86:	2601      	movs	r6, #1
 8006d88:	782c      	ldrb	r4, [r5, #0]
 8006d8a:	1c85      	adds	r5, r0, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d057      	beq.n	8006e40 <_strtol_l.constprop.0+0xec>
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d109      	bne.n	8006da8 <_strtol_l.constprop.0+0x54>
 8006d94:	2c30      	cmp	r4, #48	; 0x30
 8006d96:	d107      	bne.n	8006da8 <_strtol_l.constprop.0+0x54>
 8006d98:	7828      	ldrb	r0, [r5, #0]
 8006d9a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006d9e:	2858      	cmp	r0, #88	; 0x58
 8006da0:	d149      	bne.n	8006e36 <_strtol_l.constprop.0+0xe2>
 8006da2:	2310      	movs	r3, #16
 8006da4:	786c      	ldrb	r4, [r5, #1]
 8006da6:	3502      	adds	r5, #2
 8006da8:	2700      	movs	r7, #0
 8006daa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006dae:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006db2:	fbbe f9f3 	udiv	r9, lr, r3
 8006db6:	4638      	mov	r0, r7
 8006db8:	fb03 ea19 	mls	sl, r3, r9, lr
 8006dbc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006dc0:	f1bc 0f09 	cmp.w	ip, #9
 8006dc4:	d814      	bhi.n	8006df0 <_strtol_l.constprop.0+0x9c>
 8006dc6:	4664      	mov	r4, ip
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	dd22      	ble.n	8006e12 <_strtol_l.constprop.0+0xbe>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	db1d      	blt.n	8006e0c <_strtol_l.constprop.0+0xb8>
 8006dd0:	4581      	cmp	r9, r0
 8006dd2:	d31b      	bcc.n	8006e0c <_strtol_l.constprop.0+0xb8>
 8006dd4:	d101      	bne.n	8006dda <_strtol_l.constprop.0+0x86>
 8006dd6:	45a2      	cmp	sl, r4
 8006dd8:	db18      	blt.n	8006e0c <_strtol_l.constprop.0+0xb8>
 8006dda:	2701      	movs	r7, #1
 8006ddc:	fb00 4003 	mla	r0, r0, r3, r4
 8006de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006de4:	e7ea      	b.n	8006dbc <_strtol_l.constprop.0+0x68>
 8006de6:	2c2b      	cmp	r4, #43	; 0x2b
 8006de8:	bf04      	itt	eq
 8006dea:	782c      	ldrbeq	r4, [r5, #0]
 8006dec:	1c85      	addeq	r5, r0, #2
 8006dee:	e7cd      	b.n	8006d8c <_strtol_l.constprop.0+0x38>
 8006df0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006df4:	f1bc 0f19 	cmp.w	ip, #25
 8006df8:	d801      	bhi.n	8006dfe <_strtol_l.constprop.0+0xaa>
 8006dfa:	3c37      	subs	r4, #55	; 0x37
 8006dfc:	e7e4      	b.n	8006dc8 <_strtol_l.constprop.0+0x74>
 8006dfe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e02:	f1bc 0f19 	cmp.w	ip, #25
 8006e06:	d804      	bhi.n	8006e12 <_strtol_l.constprop.0+0xbe>
 8006e08:	3c57      	subs	r4, #87	; 0x57
 8006e0a:	e7dd      	b.n	8006dc8 <_strtol_l.constprop.0+0x74>
 8006e0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e10:	e7e6      	b.n	8006de0 <_strtol_l.constprop.0+0x8c>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	da07      	bge.n	8006e26 <_strtol_l.constprop.0+0xd2>
 8006e16:	2322      	movs	r3, #34	; 0x22
 8006e18:	4670      	mov	r0, lr
 8006e1a:	f8c8 3000 	str.w	r3, [r8]
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	d0a4      	beq.n	8006d6c <_strtol_l.constprop.0+0x18>
 8006e22:	1e69      	subs	r1, r5, #1
 8006e24:	e005      	b.n	8006e32 <_strtol_l.constprop.0+0xde>
 8006e26:	b106      	cbz	r6, 8006e2a <_strtol_l.constprop.0+0xd6>
 8006e28:	4240      	negs	r0, r0
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d09e      	beq.n	8006d6c <_strtol_l.constprop.0+0x18>
 8006e2e:	2f00      	cmp	r7, #0
 8006e30:	d1f7      	bne.n	8006e22 <_strtol_l.constprop.0+0xce>
 8006e32:	6011      	str	r1, [r2, #0]
 8006e34:	e79a      	b.n	8006d6c <_strtol_l.constprop.0+0x18>
 8006e36:	2430      	movs	r4, #48	; 0x30
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1b5      	bne.n	8006da8 <_strtol_l.constprop.0+0x54>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	e7b3      	b.n	8006da8 <_strtol_l.constprop.0+0x54>
 8006e40:	2c30      	cmp	r4, #48	; 0x30
 8006e42:	d0a9      	beq.n	8006d98 <_strtol_l.constprop.0+0x44>
 8006e44:	230a      	movs	r3, #10
 8006e46:	e7af      	b.n	8006da8 <_strtol_l.constprop.0+0x54>
 8006e48:	08009e15 	.word	0x08009e15

08006e4c <_strtol_r>:
 8006e4c:	f7ff bf82 	b.w	8006d54 <_strtol_l.constprop.0>

08006e50 <__assert_func>:
 8006e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e52:	4614      	mov	r4, r2
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <__assert_func+0x2c>)
 8006e58:	4605      	mov	r5, r0
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68d8      	ldr	r0, [r3, #12]
 8006e5e:	b14c      	cbz	r4, 8006e74 <__assert_func+0x24>
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <__assert_func+0x30>)
 8006e62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e66:	9100      	str	r1, [sp, #0]
 8006e68:	462b      	mov	r3, r5
 8006e6a:	4906      	ldr	r1, [pc, #24]	; (8006e84 <__assert_func+0x34>)
 8006e6c:	f000 fe8a 	bl	8007b84 <fiprintf>
 8006e70:	f002 fb8e 	bl	8009590 <abort>
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <__assert_func+0x38>)
 8006e76:	461c      	mov	r4, r3
 8006e78:	e7f3      	b.n	8006e62 <__assert_func+0x12>
 8006e7a:	bf00      	nop
 8006e7c:	20000010 	.word	0x20000010
 8006e80:	08009dd8 	.word	0x08009dd8
 8006e84:	08009de5 	.word	0x08009de5
 8006e88:	08009e13 	.word	0x08009e13

08006e8c <quorem>:
 8006e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	6903      	ldr	r3, [r0, #16]
 8006e92:	690c      	ldr	r4, [r1, #16]
 8006e94:	4607      	mov	r7, r0
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	f2c0 8082 	blt.w	8006fa0 <quorem+0x114>
 8006e9c:	3c01      	subs	r4, #1
 8006e9e:	f100 0514 	add.w	r5, r0, #20
 8006ea2:	f101 0814 	add.w	r8, r1, #20
 8006ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ec4:	d331      	bcc.n	8006f2a <quorem+0x9e>
 8006ec6:	f04f 0e00 	mov.w	lr, #0
 8006eca:	4640      	mov	r0, r8
 8006ecc:	46ac      	mov	ip, r5
 8006ece:	46f2      	mov	sl, lr
 8006ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ed4:	b293      	uxth	r3, r2
 8006ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8006eda:	0c12      	lsrs	r2, r2, #16
 8006edc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	fb06 e202 	mla	r2, r6, r2, lr
 8006ee6:	ebaa 0303 	sub.w	r3, sl, r3
 8006eea:	f8dc a000 	ldr.w	sl, [ip]
 8006eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ef2:	fa1f fa8a 	uxth.w	sl, sl
 8006ef6:	4453      	add	r3, sl
 8006ef8:	f8dc a000 	ldr.w	sl, [ip]
 8006efc:	b292      	uxth	r2, r2
 8006efe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0c:	4581      	cmp	r9, r0
 8006f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f12:	f84c 3b04 	str.w	r3, [ip], #4
 8006f16:	d2db      	bcs.n	8006ed0 <quorem+0x44>
 8006f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f1c:	b92b      	cbnz	r3, 8006f2a <quorem+0x9e>
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	429d      	cmp	r5, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	d32f      	bcc.n	8006f88 <quorem+0xfc>
 8006f28:	613c      	str	r4, [r7, #16]
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f001 fca4 	bl	8008878 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	db25      	blt.n	8006f80 <quorem+0xf4>
 8006f34:	4628      	mov	r0, r5
 8006f36:	f04f 0c00 	mov.w	ip, #0
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006f40:	f8d0 e000 	ldr.w	lr, [r0]
 8006f44:	b28b      	uxth	r3, r1
 8006f46:	ebac 0303 	sub.w	r3, ip, r3
 8006f4a:	fa1f f28e 	uxth.w	r2, lr
 8006f4e:	4413      	add	r3, r2
 8006f50:	0c0a      	lsrs	r2, r1, #16
 8006f52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f60:	45c1      	cmp	r9, r8
 8006f62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f66:	f840 3b04 	str.w	r3, [r0], #4
 8006f6a:	d2e7      	bcs.n	8006f3c <quorem+0xb0>
 8006f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f74:	b922      	cbnz	r2, 8006f80 <quorem+0xf4>
 8006f76:	3b04      	subs	r3, #4
 8006f78:	429d      	cmp	r5, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	d30a      	bcc.n	8006f94 <quorem+0x108>
 8006f7e:	613c      	str	r4, [r7, #16]
 8006f80:	4630      	mov	r0, r6
 8006f82:	b003      	add	sp, #12
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	3b04      	subs	r3, #4
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	d1cb      	bne.n	8006f28 <quorem+0x9c>
 8006f90:	3c01      	subs	r4, #1
 8006f92:	e7c6      	b.n	8006f22 <quorem+0x96>
 8006f94:	6812      	ldr	r2, [r2, #0]
 8006f96:	3b04      	subs	r3, #4
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	d1f0      	bne.n	8006f7e <quorem+0xf2>
 8006f9c:	3c01      	subs	r4, #1
 8006f9e:	e7eb      	b.n	8006f78 <quorem+0xec>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	e7ee      	b.n	8006f82 <quorem+0xf6>
 8006fa4:	0000      	movs	r0, r0
	...

08006fa8 <_dtoa_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	4616      	mov	r6, r2
 8006fae:	461f      	mov	r7, r3
 8006fb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fb2:	b099      	sub	sp, #100	; 0x64
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006fba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006fbe:	b974      	cbnz	r4, 8006fde <_dtoa_r+0x36>
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f001 f95b 	bl	800827c <malloc>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6268      	str	r0, [r5, #36]	; 0x24
 8006fca:	b920      	cbnz	r0, 8006fd6 <_dtoa_r+0x2e>
 8006fcc:	21ea      	movs	r1, #234	; 0xea
 8006fce:	4ba8      	ldr	r3, [pc, #672]	; (8007270 <_dtoa_r+0x2c8>)
 8006fd0:	48a8      	ldr	r0, [pc, #672]	; (8007274 <_dtoa_r+0x2cc>)
 8006fd2:	f7ff ff3d 	bl	8006e50 <__assert_func>
 8006fd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fda:	6004      	str	r4, [r0, #0]
 8006fdc:	60c4      	str	r4, [r0, #12]
 8006fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	b151      	cbz	r1, 8006ffa <_dtoa_r+0x52>
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4093      	lsls	r3, r2
 8006fea:	604a      	str	r2, [r1, #4]
 8006fec:	608b      	str	r3, [r1, #8]
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f001 f9ba 	bl	8008368 <_Bfree>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	1e3b      	subs	r3, r7, #0
 8006ffc:	bfaf      	iteee	ge
 8006ffe:	2300      	movge	r3, #0
 8007000:	2201      	movlt	r2, #1
 8007002:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007006:	9305      	strlt	r3, [sp, #20]
 8007008:	bfa8      	it	ge
 800700a:	f8c8 3000 	strge.w	r3, [r8]
 800700e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007012:	4b99      	ldr	r3, [pc, #612]	; (8007278 <_dtoa_r+0x2d0>)
 8007014:	bfb8      	it	lt
 8007016:	f8c8 2000 	strlt.w	r2, [r8]
 800701a:	ea33 0309 	bics.w	r3, r3, r9
 800701e:	d119      	bne.n	8007054 <_dtoa_r+0xac>
 8007020:	f242 730f 	movw	r3, #9999	; 0x270f
 8007024:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800702c:	4333      	orrs	r3, r6
 800702e:	f000 857f 	beq.w	8007b30 <_dtoa_r+0xb88>
 8007032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007034:	b953      	cbnz	r3, 800704c <_dtoa_r+0xa4>
 8007036:	4b91      	ldr	r3, [pc, #580]	; (800727c <_dtoa_r+0x2d4>)
 8007038:	e022      	b.n	8007080 <_dtoa_r+0xd8>
 800703a:	4b91      	ldr	r3, [pc, #580]	; (8007280 <_dtoa_r+0x2d8>)
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	3308      	adds	r3, #8
 8007040:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	9803      	ldr	r0, [sp, #12]
 8007046:	b019      	add	sp, #100	; 0x64
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	4b8b      	ldr	r3, [pc, #556]	; (800727c <_dtoa_r+0x2d4>)
 800704e:	9303      	str	r3, [sp, #12]
 8007050:	3303      	adds	r3, #3
 8007052:	e7f5      	b.n	8007040 <_dtoa_r+0x98>
 8007054:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007058:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800705c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	f7f9 fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8007068:	4680      	mov	r8, r0
 800706a:	b158      	cbz	r0, 8007084 <_dtoa_r+0xdc>
 800706c:	2301      	movs	r3, #1
 800706e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8558 	beq.w	8007b2a <_dtoa_r+0xb82>
 800707a:	4882      	ldr	r0, [pc, #520]	; (8007284 <_dtoa_r+0x2dc>)
 800707c:	6018      	str	r0, [r3, #0]
 800707e:	1e43      	subs	r3, r0, #1
 8007080:	9303      	str	r3, [sp, #12]
 8007082:	e7df      	b.n	8007044 <_dtoa_r+0x9c>
 8007084:	ab16      	add	r3, sp, #88	; 0x58
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	ab17      	add	r3, sp, #92	; 0x5c
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4628      	mov	r0, r5
 800708e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007092:	f001 fd13 	bl	8008abc <__d2b>
 8007096:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800709a:	4683      	mov	fp, r0
 800709c:	2c00      	cmp	r4, #0
 800709e:	d07f      	beq.n	80071a0 <_dtoa_r+0x1f8>
 80070a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80070aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80070b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80070ba:	2200      	movs	r2, #0
 80070bc:	4b72      	ldr	r3, [pc, #456]	; (8007288 <_dtoa_r+0x2e0>)
 80070be:	f7f9 f853 	bl	8000168 <__aeabi_dsub>
 80070c2:	a365      	add	r3, pc, #404	; (adr r3, 8007258 <_dtoa_r+0x2b0>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 fa06 	bl	80004d8 <__aeabi_dmul>
 80070cc:	a364      	add	r3, pc, #400	; (adr r3, 8007260 <_dtoa_r+0x2b8>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f84b 	bl	800016c <__adddf3>
 80070d6:	4606      	mov	r6, r0
 80070d8:	4620      	mov	r0, r4
 80070da:	460f      	mov	r7, r1
 80070dc:	f7f9 f992 	bl	8000404 <__aeabi_i2d>
 80070e0:	a361      	add	r3, pc, #388	; (adr r3, 8007268 <_dtoa_r+0x2c0>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 f9f7 	bl	80004d8 <__aeabi_dmul>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 f83b 	bl	800016c <__adddf3>
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	f7f9 fc9d 	bl	8000a38 <__aeabi_d2iz>
 80070fe:	2200      	movs	r2, #0
 8007100:	4682      	mov	sl, r0
 8007102:	2300      	movs	r3, #0
 8007104:	4630      	mov	r0, r6
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fc58 	bl	80009bc <__aeabi_dcmplt>
 800710c:	b148      	cbz	r0, 8007122 <_dtoa_r+0x17a>
 800710e:	4650      	mov	r0, sl
 8007110:	f7f9 f978 	bl	8000404 <__aeabi_i2d>
 8007114:	4632      	mov	r2, r6
 8007116:	463b      	mov	r3, r7
 8007118:	f7f9 fc46 	bl	80009a8 <__aeabi_dcmpeq>
 800711c:	b908      	cbnz	r0, 8007122 <_dtoa_r+0x17a>
 800711e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007122:	f1ba 0f16 	cmp.w	sl, #22
 8007126:	d858      	bhi.n	80071da <_dtoa_r+0x232>
 8007128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800712c:	4b57      	ldr	r3, [pc, #348]	; (800728c <_dtoa_r+0x2e4>)
 800712e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 fc41 	bl	80009bc <__aeabi_dcmplt>
 800713a:	2800      	cmp	r0, #0
 800713c:	d04f      	beq.n	80071de <_dtoa_r+0x236>
 800713e:	2300      	movs	r3, #0
 8007140:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007144:	930f      	str	r3, [sp, #60]	; 0x3c
 8007146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007148:	1b1c      	subs	r4, r3, r4
 800714a:	1e63      	subs	r3, r4, #1
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	bf49      	itett	mi
 8007150:	f1c4 0301 	rsbmi	r3, r4, #1
 8007154:	2300      	movpl	r3, #0
 8007156:	9306      	strmi	r3, [sp, #24]
 8007158:	2300      	movmi	r3, #0
 800715a:	bf54      	ite	pl
 800715c:	9306      	strpl	r3, [sp, #24]
 800715e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007160:	f1ba 0f00 	cmp.w	sl, #0
 8007164:	db3d      	blt.n	80071e2 <_dtoa_r+0x23a>
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800716c:	4453      	add	r3, sl
 800716e:	9309      	str	r3, [sp, #36]	; 0x24
 8007170:	2300      	movs	r3, #0
 8007172:	930a      	str	r3, [sp, #40]	; 0x28
 8007174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007176:	2b09      	cmp	r3, #9
 8007178:	f200 808c 	bhi.w	8007294 <_dtoa_r+0x2ec>
 800717c:	2b05      	cmp	r3, #5
 800717e:	bfc4      	itt	gt
 8007180:	3b04      	subgt	r3, #4
 8007182:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007186:	bfc8      	it	gt
 8007188:	2400      	movgt	r4, #0
 800718a:	f1a3 0302 	sub.w	r3, r3, #2
 800718e:	bfd8      	it	le
 8007190:	2401      	movle	r4, #1
 8007192:	2b03      	cmp	r3, #3
 8007194:	f200 808a 	bhi.w	80072ac <_dtoa_r+0x304>
 8007198:	e8df f003 	tbb	[pc, r3]
 800719c:	5b4d4f2d 	.word	0x5b4d4f2d
 80071a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80071a4:	441c      	add	r4, r3
 80071a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	bfc3      	ittte	gt
 80071ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80071b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80071ba:	f1c3 0320 	rsble	r3, r3, #32
 80071be:	bfc6      	itte	gt
 80071c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071c4:	4318      	orrgt	r0, r3
 80071c6:	fa06 f003 	lslle.w	r0, r6, r3
 80071ca:	f7f9 f90b 	bl	80003e4 <__aeabi_ui2d>
 80071ce:	2301      	movs	r3, #1
 80071d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80071d4:	3c01      	subs	r4, #1
 80071d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80071d8:	e76f      	b.n	80070ba <_dtoa_r+0x112>
 80071da:	2301      	movs	r3, #1
 80071dc:	e7b2      	b.n	8007144 <_dtoa_r+0x19c>
 80071de:	900f      	str	r0, [sp, #60]	; 0x3c
 80071e0:	e7b1      	b.n	8007146 <_dtoa_r+0x19e>
 80071e2:	9b06      	ldr	r3, [sp, #24]
 80071e4:	eba3 030a 	sub.w	r3, r3, sl
 80071e8:	9306      	str	r3, [sp, #24]
 80071ea:	f1ca 0300 	rsb	r3, sl, #0
 80071ee:	930a      	str	r3, [sp, #40]	; 0x28
 80071f0:	2300      	movs	r3, #0
 80071f2:	930e      	str	r3, [sp, #56]	; 0x38
 80071f4:	e7be      	b.n	8007174 <_dtoa_r+0x1cc>
 80071f6:	2300      	movs	r3, #0
 80071f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc58      	bgt.n	80072b2 <_dtoa_r+0x30a>
 8007200:	f04f 0901 	mov.w	r9, #1
 8007204:	464b      	mov	r3, r9
 8007206:	f8cd 9020 	str.w	r9, [sp, #32]
 800720a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800720e:	2200      	movs	r2, #0
 8007210:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007212:	6042      	str	r2, [r0, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	f102 0614 	add.w	r6, r2, #20
 800721a:	429e      	cmp	r6, r3
 800721c:	6841      	ldr	r1, [r0, #4]
 800721e:	d94e      	bls.n	80072be <_dtoa_r+0x316>
 8007220:	4628      	mov	r0, r5
 8007222:	f001 f861 	bl	80082e8 <_Balloc>
 8007226:	9003      	str	r0, [sp, #12]
 8007228:	2800      	cmp	r0, #0
 800722a:	d14c      	bne.n	80072c6 <_dtoa_r+0x31e>
 800722c:	4602      	mov	r2, r0
 800722e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007232:	4b17      	ldr	r3, [pc, #92]	; (8007290 <_dtoa_r+0x2e8>)
 8007234:	e6cc      	b.n	8006fd0 <_dtoa_r+0x28>
 8007236:	2301      	movs	r3, #1
 8007238:	e7de      	b.n	80071f8 <_dtoa_r+0x250>
 800723a:	2300      	movs	r3, #0
 800723c:	930b      	str	r3, [sp, #44]	; 0x2c
 800723e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007240:	eb0a 0903 	add.w	r9, sl, r3
 8007244:	f109 0301 	add.w	r3, r9, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	9308      	str	r3, [sp, #32]
 800724c:	bfb8      	it	lt
 800724e:	2301      	movlt	r3, #1
 8007250:	e7dd      	b.n	800720e <_dtoa_r+0x266>
 8007252:	2301      	movs	r3, #1
 8007254:	e7f2      	b.n	800723c <_dtoa_r+0x294>
 8007256:	bf00      	nop
 8007258:	636f4361 	.word	0x636f4361
 800725c:	3fd287a7 	.word	0x3fd287a7
 8007260:	8b60c8b3 	.word	0x8b60c8b3
 8007264:	3fc68a28 	.word	0x3fc68a28
 8007268:	509f79fb 	.word	0x509f79fb
 800726c:	3fd34413 	.word	0x3fd34413
 8007270:	08009d15 	.word	0x08009d15
 8007274:	08009f22 	.word	0x08009f22
 8007278:	7ff00000 	.word	0x7ff00000
 800727c:	08009f1e 	.word	0x08009f1e
 8007280:	08009f15 	.word	0x08009f15
 8007284:	08009ced 	.word	0x08009ced
 8007288:	3ff80000 	.word	0x3ff80000
 800728c:	0800a090 	.word	0x0800a090
 8007290:	08009f7d 	.word	0x08009f7d
 8007294:	2401      	movs	r4, #1
 8007296:	2300      	movs	r3, #0
 8007298:	940b      	str	r4, [sp, #44]	; 0x2c
 800729a:	9322      	str	r3, [sp, #136]	; 0x88
 800729c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80072a0:	2200      	movs	r2, #0
 80072a2:	2312      	movs	r3, #18
 80072a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80072a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80072aa:	e7b0      	b.n	800720e <_dtoa_r+0x266>
 80072ac:	2301      	movs	r3, #1
 80072ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80072b0:	e7f4      	b.n	800729c <_dtoa_r+0x2f4>
 80072b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80072b6:	464b      	mov	r3, r9
 80072b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80072bc:	e7a7      	b.n	800720e <_dtoa_r+0x266>
 80072be:	3101      	adds	r1, #1
 80072c0:	6041      	str	r1, [r0, #4]
 80072c2:	0052      	lsls	r2, r2, #1
 80072c4:	e7a7      	b.n	8007216 <_dtoa_r+0x26e>
 80072c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072c8:	9a03      	ldr	r2, [sp, #12]
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	9b08      	ldr	r3, [sp, #32]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	f200 80a8 	bhi.w	8007424 <_dtoa_r+0x47c>
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	f000 80a5 	beq.w	8007424 <_dtoa_r+0x47c>
 80072da:	f1ba 0f00 	cmp.w	sl, #0
 80072de:	dd34      	ble.n	800734a <_dtoa_r+0x3a2>
 80072e0:	4a9a      	ldr	r2, [pc, #616]	; (800754c <_dtoa_r+0x5a4>)
 80072e2:	f00a 030f 	and.w	r3, sl, #15
 80072e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80072f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80072fa:	d016      	beq.n	800732a <_dtoa_r+0x382>
 80072fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007300:	4b93      	ldr	r3, [pc, #588]	; (8007550 <_dtoa_r+0x5a8>)
 8007302:	2703      	movs	r7, #3
 8007304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007308:	f7f9 fa10 	bl	800072c <__aeabi_ddiv>
 800730c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007310:	f004 040f 	and.w	r4, r4, #15
 8007314:	4e8e      	ldr	r6, [pc, #568]	; (8007550 <_dtoa_r+0x5a8>)
 8007316:	b954      	cbnz	r4, 800732e <_dtoa_r+0x386>
 8007318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800731c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007320:	f7f9 fa04 	bl	800072c <__aeabi_ddiv>
 8007324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007328:	e029      	b.n	800737e <_dtoa_r+0x3d6>
 800732a:	2702      	movs	r7, #2
 800732c:	e7f2      	b.n	8007314 <_dtoa_r+0x36c>
 800732e:	07e1      	lsls	r1, r4, #31
 8007330:	d508      	bpl.n	8007344 <_dtoa_r+0x39c>
 8007332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007336:	e9d6 2300 	ldrd	r2, r3, [r6]
 800733a:	f7f9 f8cd 	bl	80004d8 <__aeabi_dmul>
 800733e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007342:	3701      	adds	r7, #1
 8007344:	1064      	asrs	r4, r4, #1
 8007346:	3608      	adds	r6, #8
 8007348:	e7e5      	b.n	8007316 <_dtoa_r+0x36e>
 800734a:	f000 80a5 	beq.w	8007498 <_dtoa_r+0x4f0>
 800734e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007352:	f1ca 0400 	rsb	r4, sl, #0
 8007356:	4b7d      	ldr	r3, [pc, #500]	; (800754c <_dtoa_r+0x5a4>)
 8007358:	f004 020f 	and.w	r2, r4, #15
 800735c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f7f9 f8b8 	bl	80004d8 <__aeabi_dmul>
 8007368:	2702      	movs	r7, #2
 800736a:	2300      	movs	r3, #0
 800736c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007370:	4e77      	ldr	r6, [pc, #476]	; (8007550 <_dtoa_r+0x5a8>)
 8007372:	1124      	asrs	r4, r4, #4
 8007374:	2c00      	cmp	r4, #0
 8007376:	f040 8084 	bne.w	8007482 <_dtoa_r+0x4da>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1d2      	bne.n	8007324 <_dtoa_r+0x37c>
 800737e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 808b 	beq.w	800749c <_dtoa_r+0x4f4>
 8007386:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800738a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800738e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007392:	2200      	movs	r2, #0
 8007394:	4b6f      	ldr	r3, [pc, #444]	; (8007554 <_dtoa_r+0x5ac>)
 8007396:	f7f9 fb11 	bl	80009bc <__aeabi_dcmplt>
 800739a:	2800      	cmp	r0, #0
 800739c:	d07e      	beq.n	800749c <_dtoa_r+0x4f4>
 800739e:	9b08      	ldr	r3, [sp, #32]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d07b      	beq.n	800749c <_dtoa_r+0x4f4>
 80073a4:	f1b9 0f00 	cmp.w	r9, #0
 80073a8:	dd38      	ble.n	800741c <_dtoa_r+0x474>
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ae:	2200      	movs	r2, #0
 80073b0:	4b69      	ldr	r3, [pc, #420]	; (8007558 <_dtoa_r+0x5b0>)
 80073b2:	f7f9 f891 	bl	80004d8 <__aeabi_dmul>
 80073b6:	464c      	mov	r4, r9
 80073b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073bc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80073c0:	3701      	adds	r7, #1
 80073c2:	4638      	mov	r0, r7
 80073c4:	f7f9 f81e 	bl	8000404 <__aeabi_i2d>
 80073c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073cc:	f7f9 f884 	bl	80004d8 <__aeabi_dmul>
 80073d0:	2200      	movs	r2, #0
 80073d2:	4b62      	ldr	r3, [pc, #392]	; (800755c <_dtoa_r+0x5b4>)
 80073d4:	f7f8 feca 	bl	800016c <__adddf3>
 80073d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80073dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073e0:	9611      	str	r6, [sp, #68]	; 0x44
 80073e2:	2c00      	cmp	r4, #0
 80073e4:	d15d      	bne.n	80074a2 <_dtoa_r+0x4fa>
 80073e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b5c      	ldr	r3, [pc, #368]	; (8007560 <_dtoa_r+0x5b8>)
 80073ee:	f7f8 febb 	bl	8000168 <__aeabi_dsub>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073fa:	4633      	mov	r3, r6
 80073fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073fe:	f7f9 fafb 	bl	80009f8 <__aeabi_dcmpgt>
 8007402:	2800      	cmp	r0, #0
 8007404:	f040 829c 	bne.w	8007940 <_dtoa_r+0x998>
 8007408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800740e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007412:	f7f9 fad3 	bl	80009bc <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8290 	bne.w	800793c <_dtoa_r+0x994>
 800741c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007420:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007426:	2b00      	cmp	r3, #0
 8007428:	f2c0 8152 	blt.w	80076d0 <_dtoa_r+0x728>
 800742c:	f1ba 0f0e 	cmp.w	sl, #14
 8007430:	f300 814e 	bgt.w	80076d0 <_dtoa_r+0x728>
 8007434:	4b45      	ldr	r3, [pc, #276]	; (800754c <_dtoa_r+0x5a4>)
 8007436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800743a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800743e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007444:	2b00      	cmp	r3, #0
 8007446:	f280 80db 	bge.w	8007600 <_dtoa_r+0x658>
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f300 80d7 	bgt.w	8007600 <_dtoa_r+0x658>
 8007452:	f040 8272 	bne.w	800793a <_dtoa_r+0x992>
 8007456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800745a:	2200      	movs	r2, #0
 800745c:	4b40      	ldr	r3, [pc, #256]	; (8007560 <_dtoa_r+0x5b8>)
 800745e:	f7f9 f83b 	bl	80004d8 <__aeabi_dmul>
 8007462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007466:	f7f9 fabd 	bl	80009e4 <__aeabi_dcmpge>
 800746a:	9c08      	ldr	r4, [sp, #32]
 800746c:	4626      	mov	r6, r4
 800746e:	2800      	cmp	r0, #0
 8007470:	f040 8248 	bne.w	8007904 <_dtoa_r+0x95c>
 8007474:	2331      	movs	r3, #49	; 0x31
 8007476:	9f03      	ldr	r7, [sp, #12]
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	f807 3b01 	strb.w	r3, [r7], #1
 8007480:	e244      	b.n	800790c <_dtoa_r+0x964>
 8007482:	07e2      	lsls	r2, r4, #31
 8007484:	d505      	bpl.n	8007492 <_dtoa_r+0x4ea>
 8007486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800748a:	f7f9 f825 	bl	80004d8 <__aeabi_dmul>
 800748e:	2301      	movs	r3, #1
 8007490:	3701      	adds	r7, #1
 8007492:	1064      	asrs	r4, r4, #1
 8007494:	3608      	adds	r6, #8
 8007496:	e76d      	b.n	8007374 <_dtoa_r+0x3cc>
 8007498:	2702      	movs	r7, #2
 800749a:	e770      	b.n	800737e <_dtoa_r+0x3d6>
 800749c:	46d0      	mov	r8, sl
 800749e:	9c08      	ldr	r4, [sp, #32]
 80074a0:	e78f      	b.n	80073c2 <_dtoa_r+0x41a>
 80074a2:	9903      	ldr	r1, [sp, #12]
 80074a4:	4b29      	ldr	r3, [pc, #164]	; (800754c <_dtoa_r+0x5a4>)
 80074a6:	4421      	add	r1, r4
 80074a8:	9112      	str	r1, [sp, #72]	; 0x48
 80074aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80074b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	d055      	beq.n	8007568 <_dtoa_r+0x5c0>
 80074bc:	2000      	movs	r0, #0
 80074be:	4929      	ldr	r1, [pc, #164]	; (8007564 <_dtoa_r+0x5bc>)
 80074c0:	f7f9 f934 	bl	800072c <__aeabi_ddiv>
 80074c4:	463b      	mov	r3, r7
 80074c6:	4632      	mov	r2, r6
 80074c8:	f7f8 fe4e 	bl	8000168 <__aeabi_dsub>
 80074cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074d0:	9f03      	ldr	r7, [sp, #12]
 80074d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d6:	f7f9 faaf 	bl	8000a38 <__aeabi_d2iz>
 80074da:	4604      	mov	r4, r0
 80074dc:	f7f8 ff92 	bl	8000404 <__aeabi_i2d>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e8:	f7f8 fe3e 	bl	8000168 <__aeabi_dsub>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	3430      	adds	r4, #48	; 0x30
 80074f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074fa:	f807 4b01 	strb.w	r4, [r7], #1
 80074fe:	f7f9 fa5d 	bl	80009bc <__aeabi_dcmplt>
 8007502:	2800      	cmp	r0, #0
 8007504:	d174      	bne.n	80075f0 <_dtoa_r+0x648>
 8007506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750a:	2000      	movs	r0, #0
 800750c:	4911      	ldr	r1, [pc, #68]	; (8007554 <_dtoa_r+0x5ac>)
 800750e:	f7f8 fe2b 	bl	8000168 <__aeabi_dsub>
 8007512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007516:	f7f9 fa51 	bl	80009bc <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f040 80b7 	bne.w	800768e <_dtoa_r+0x6e6>
 8007520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007522:	429f      	cmp	r7, r3
 8007524:	f43f af7a 	beq.w	800741c <_dtoa_r+0x474>
 8007528:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800752c:	2200      	movs	r2, #0
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <_dtoa_r+0x5b0>)
 8007530:	f7f8 ffd2 	bl	80004d8 <__aeabi_dmul>
 8007534:	2200      	movs	r2, #0
 8007536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800753a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <_dtoa_r+0x5b0>)
 8007540:	f7f8 ffca 	bl	80004d8 <__aeabi_dmul>
 8007544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007548:	e7c3      	b.n	80074d2 <_dtoa_r+0x52a>
 800754a:	bf00      	nop
 800754c:	0800a090 	.word	0x0800a090
 8007550:	0800a068 	.word	0x0800a068
 8007554:	3ff00000 	.word	0x3ff00000
 8007558:	40240000 	.word	0x40240000
 800755c:	401c0000 	.word	0x401c0000
 8007560:	40140000 	.word	0x40140000
 8007564:	3fe00000 	.word	0x3fe00000
 8007568:	4630      	mov	r0, r6
 800756a:	4639      	mov	r1, r7
 800756c:	f7f8 ffb4 	bl	80004d8 <__aeabi_dmul>
 8007570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007572:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007576:	9c03      	ldr	r4, [sp, #12]
 8007578:	9314      	str	r3, [sp, #80]	; 0x50
 800757a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757e:	f7f9 fa5b 	bl	8000a38 <__aeabi_d2iz>
 8007582:	9015      	str	r0, [sp, #84]	; 0x54
 8007584:	f7f8 ff3e 	bl	8000404 <__aeabi_i2d>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007590:	f7f8 fdea 	bl	8000168 <__aeabi_dsub>
 8007594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007596:	4606      	mov	r6, r0
 8007598:	3330      	adds	r3, #48	; 0x30
 800759a:	f804 3b01 	strb.w	r3, [r4], #1
 800759e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075a0:	460f      	mov	r7, r1
 80075a2:	429c      	cmp	r4, r3
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	d124      	bne.n	80075f4 <_dtoa_r+0x64c>
 80075aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ae:	4bb0      	ldr	r3, [pc, #704]	; (8007870 <_dtoa_r+0x8c8>)
 80075b0:	f7f8 fddc 	bl	800016c <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d163      	bne.n	800768c <_dtoa_r+0x6e4>
 80075c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075c8:	2000      	movs	r0, #0
 80075ca:	49a9      	ldr	r1, [pc, #676]	; (8007870 <_dtoa_r+0x8c8>)
 80075cc:	f7f8 fdcc 	bl	8000168 <__aeabi_dsub>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4630      	mov	r0, r6
 80075d6:	4639      	mov	r1, r7
 80075d8:	f7f9 f9f0 	bl	80009bc <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f af1d 	beq.w	800741c <_dtoa_r+0x474>
 80075e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80075e4:	1e7b      	subs	r3, r7, #1
 80075e6:	9314      	str	r3, [sp, #80]	; 0x50
 80075e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d0f8      	beq.n	80075e2 <_dtoa_r+0x63a>
 80075f0:	46c2      	mov	sl, r8
 80075f2:	e03b      	b.n	800766c <_dtoa_r+0x6c4>
 80075f4:	4b9f      	ldr	r3, [pc, #636]	; (8007874 <_dtoa_r+0x8cc>)
 80075f6:	f7f8 ff6f 	bl	80004d8 <__aeabi_dmul>
 80075fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075fe:	e7bc      	b.n	800757a <_dtoa_r+0x5d2>
 8007600:	9f03      	ldr	r7, [sp, #12]
 8007602:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	f7f9 f88d 	bl	800072c <__aeabi_ddiv>
 8007612:	f7f9 fa11 	bl	8000a38 <__aeabi_d2iz>
 8007616:	4604      	mov	r4, r0
 8007618:	f7f8 fef4 	bl	8000404 <__aeabi_i2d>
 800761c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007620:	f7f8 ff5a 	bl	80004d8 <__aeabi_dmul>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f8 fd9c 	bl	8000168 <__aeabi_dsub>
 8007630:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007634:	f807 6b01 	strb.w	r6, [r7], #1
 8007638:	9e03      	ldr	r6, [sp, #12]
 800763a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800763e:	1bbe      	subs	r6, r7, r6
 8007640:	45b4      	cmp	ip, r6
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	d136      	bne.n	80076b6 <_dtoa_r+0x70e>
 8007648:	f7f8 fd90 	bl	800016c <__adddf3>
 800764c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007650:	4680      	mov	r8, r0
 8007652:	4689      	mov	r9, r1
 8007654:	f7f9 f9d0 	bl	80009f8 <__aeabi_dcmpgt>
 8007658:	bb58      	cbnz	r0, 80076b2 <_dtoa_r+0x70a>
 800765a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f9 f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 8007666:	b108      	cbz	r0, 800766c <_dtoa_r+0x6c4>
 8007668:	07e1      	lsls	r1, r4, #31
 800766a:	d422      	bmi.n	80076b2 <_dtoa_r+0x70a>
 800766c:	4628      	mov	r0, r5
 800766e:	4659      	mov	r1, fp
 8007670:	f000 fe7a 	bl	8008368 <_Bfree>
 8007674:	2300      	movs	r3, #0
 8007676:	703b      	strb	r3, [r7, #0]
 8007678:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800767a:	f10a 0001 	add.w	r0, sl, #1
 800767e:	6018      	str	r0, [r3, #0]
 8007680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007682:	2b00      	cmp	r3, #0
 8007684:	f43f acde 	beq.w	8007044 <_dtoa_r+0x9c>
 8007688:	601f      	str	r7, [r3, #0]
 800768a:	e4db      	b.n	8007044 <_dtoa_r+0x9c>
 800768c:	4627      	mov	r7, r4
 800768e:	463b      	mov	r3, r7
 8007690:	461f      	mov	r7, r3
 8007692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007696:	2a39      	cmp	r2, #57	; 0x39
 8007698:	d107      	bne.n	80076aa <_dtoa_r+0x702>
 800769a:	9a03      	ldr	r2, [sp, #12]
 800769c:	429a      	cmp	r2, r3
 800769e:	d1f7      	bne.n	8007690 <_dtoa_r+0x6e8>
 80076a0:	2230      	movs	r2, #48	; 0x30
 80076a2:	9903      	ldr	r1, [sp, #12]
 80076a4:	f108 0801 	add.w	r8, r8, #1
 80076a8:	700a      	strb	r2, [r1, #0]
 80076aa:	781a      	ldrb	r2, [r3, #0]
 80076ac:	3201      	adds	r2, #1
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	e79e      	b.n	80075f0 <_dtoa_r+0x648>
 80076b2:	46d0      	mov	r8, sl
 80076b4:	e7eb      	b.n	800768e <_dtoa_r+0x6e6>
 80076b6:	2200      	movs	r2, #0
 80076b8:	4b6e      	ldr	r3, [pc, #440]	; (8007874 <_dtoa_r+0x8cc>)
 80076ba:	f7f8 ff0d 	bl	80004d8 <__aeabi_dmul>
 80076be:	2200      	movs	r2, #0
 80076c0:	2300      	movs	r3, #0
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	f7f9 f96f 	bl	80009a8 <__aeabi_dcmpeq>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d09b      	beq.n	8007606 <_dtoa_r+0x65e>
 80076ce:	e7cd      	b.n	800766c <_dtoa_r+0x6c4>
 80076d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	f000 80d0 	beq.w	8007878 <_dtoa_r+0x8d0>
 80076d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076da:	2a01      	cmp	r2, #1
 80076dc:	f300 80ae 	bgt.w	800783c <_dtoa_r+0x894>
 80076e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	f000 80a6 	beq.w	8007834 <_dtoa_r+0x88c>
 80076e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076ee:	9f06      	ldr	r7, [sp, #24]
 80076f0:	9a06      	ldr	r2, [sp, #24]
 80076f2:	2101      	movs	r1, #1
 80076f4:	441a      	add	r2, r3
 80076f6:	9206      	str	r2, [sp, #24]
 80076f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076fa:	4628      	mov	r0, r5
 80076fc:	441a      	add	r2, r3
 80076fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007700:	f000 ff32 	bl	8008568 <__i2b>
 8007704:	4606      	mov	r6, r0
 8007706:	2f00      	cmp	r7, #0
 8007708:	dd0c      	ble.n	8007724 <_dtoa_r+0x77c>
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	dd09      	ble.n	8007724 <_dtoa_r+0x77c>
 8007710:	42bb      	cmp	r3, r7
 8007712:	bfa8      	it	ge
 8007714:	463b      	movge	r3, r7
 8007716:	9a06      	ldr	r2, [sp, #24]
 8007718:	1aff      	subs	r7, r7, r3
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	9206      	str	r2, [sp, #24]
 800771e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	9309      	str	r3, [sp, #36]	; 0x24
 8007724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007726:	b1f3      	cbz	r3, 8007766 <_dtoa_r+0x7be>
 8007728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80a8 	beq.w	8007880 <_dtoa_r+0x8d8>
 8007730:	2c00      	cmp	r4, #0
 8007732:	dd10      	ble.n	8007756 <_dtoa_r+0x7ae>
 8007734:	4631      	mov	r1, r6
 8007736:	4622      	mov	r2, r4
 8007738:	4628      	mov	r0, r5
 800773a:	f000 ffd3 	bl	80086e4 <__pow5mult>
 800773e:	465a      	mov	r2, fp
 8007740:	4601      	mov	r1, r0
 8007742:	4606      	mov	r6, r0
 8007744:	4628      	mov	r0, r5
 8007746:	f000 ff25 	bl	8008594 <__multiply>
 800774a:	4680      	mov	r8, r0
 800774c:	4659      	mov	r1, fp
 800774e:	4628      	mov	r0, r5
 8007750:	f000 fe0a 	bl	8008368 <_Bfree>
 8007754:	46c3      	mov	fp, r8
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	1b1a      	subs	r2, r3, r4
 800775a:	d004      	beq.n	8007766 <_dtoa_r+0x7be>
 800775c:	4659      	mov	r1, fp
 800775e:	4628      	mov	r0, r5
 8007760:	f000 ffc0 	bl	80086e4 <__pow5mult>
 8007764:	4683      	mov	fp, r0
 8007766:	2101      	movs	r1, #1
 8007768:	4628      	mov	r0, r5
 800776a:	f000 fefd 	bl	8008568 <__i2b>
 800776e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007770:	4604      	mov	r4, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	f340 8086 	ble.w	8007884 <_dtoa_r+0x8dc>
 8007778:	461a      	mov	r2, r3
 800777a:	4601      	mov	r1, r0
 800777c:	4628      	mov	r0, r5
 800777e:	f000 ffb1 	bl	80086e4 <__pow5mult>
 8007782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007784:	4604      	mov	r4, r0
 8007786:	2b01      	cmp	r3, #1
 8007788:	dd7f      	ble.n	800788a <_dtoa_r+0x8e2>
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007794:	6918      	ldr	r0, [r3, #16]
 8007796:	f000 fe99 	bl	80084cc <__hi0bits>
 800779a:	f1c0 0020 	rsb	r0, r0, #32
 800779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a0:	4418      	add	r0, r3
 80077a2:	f010 001f 	ands.w	r0, r0, #31
 80077a6:	f000 8092 	beq.w	80078ce <_dtoa_r+0x926>
 80077aa:	f1c0 0320 	rsb	r3, r0, #32
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	f340 808a 	ble.w	80078c8 <_dtoa_r+0x920>
 80077b4:	f1c0 001c 	rsb	r0, r0, #28
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	4407      	add	r7, r0
 80077bc:	4403      	add	r3, r0
 80077be:	9306      	str	r3, [sp, #24]
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	4403      	add	r3, r0
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	9b06      	ldr	r3, [sp, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dd05      	ble.n	80077d8 <_dtoa_r+0x830>
 80077cc:	4659      	mov	r1, fp
 80077ce:	461a      	mov	r2, r3
 80077d0:	4628      	mov	r0, r5
 80077d2:	f000 ffe1 	bl	8008798 <__lshift>
 80077d6:	4683      	mov	fp, r0
 80077d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd05      	ble.n	80077ea <_dtoa_r+0x842>
 80077de:	4621      	mov	r1, r4
 80077e0:	461a      	mov	r2, r3
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 ffd8 	bl	8008798 <__lshift>
 80077e8:	4604      	mov	r4, r0
 80077ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d070      	beq.n	80078d2 <_dtoa_r+0x92a>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4658      	mov	r0, fp
 80077f4:	f001 f840 	bl	8008878 <__mcmp>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	da6a      	bge.n	80078d2 <_dtoa_r+0x92a>
 80077fc:	2300      	movs	r3, #0
 80077fe:	4659      	mov	r1, fp
 8007800:	220a      	movs	r2, #10
 8007802:	4628      	mov	r0, r5
 8007804:	f000 fdd2 	bl	80083ac <__multadd>
 8007808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780a:	4683      	mov	fp, r0
 800780c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8194 	beq.w	8007b3e <_dtoa_r+0xb96>
 8007816:	4631      	mov	r1, r6
 8007818:	2300      	movs	r3, #0
 800781a:	220a      	movs	r2, #10
 800781c:	4628      	mov	r0, r5
 800781e:	f000 fdc5 	bl	80083ac <__multadd>
 8007822:	f1b9 0f00 	cmp.w	r9, #0
 8007826:	4606      	mov	r6, r0
 8007828:	f300 8093 	bgt.w	8007952 <_dtoa_r+0x9aa>
 800782c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800782e:	2b02      	cmp	r3, #2
 8007830:	dc57      	bgt.n	80078e2 <_dtoa_r+0x93a>
 8007832:	e08e      	b.n	8007952 <_dtoa_r+0x9aa>
 8007834:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800783a:	e757      	b.n	80076ec <_dtoa_r+0x744>
 800783c:	9b08      	ldr	r3, [sp, #32]
 800783e:	1e5c      	subs	r4, r3, #1
 8007840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007842:	42a3      	cmp	r3, r4
 8007844:	bfb7      	itett	lt
 8007846:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007848:	1b1c      	subge	r4, r3, r4
 800784a:	1ae2      	sublt	r2, r4, r3
 800784c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800784e:	bfbe      	ittt	lt
 8007850:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007852:	189b      	addlt	r3, r3, r2
 8007854:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	bfb8      	it	lt
 800785a:	2400      	movlt	r4, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfbb      	ittet	lt
 8007860:	9b06      	ldrlt	r3, [sp, #24]
 8007862:	9a08      	ldrlt	r2, [sp, #32]
 8007864:	9f06      	ldrge	r7, [sp, #24]
 8007866:	1a9f      	sublt	r7, r3, r2
 8007868:	bfac      	ite	ge
 800786a:	9b08      	ldrge	r3, [sp, #32]
 800786c:	2300      	movlt	r3, #0
 800786e:	e73f      	b.n	80076f0 <_dtoa_r+0x748>
 8007870:	3fe00000 	.word	0x3fe00000
 8007874:	40240000 	.word	0x40240000
 8007878:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800787a:	9f06      	ldr	r7, [sp, #24]
 800787c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800787e:	e742      	b.n	8007706 <_dtoa_r+0x75e>
 8007880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007882:	e76b      	b.n	800775c <_dtoa_r+0x7b4>
 8007884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007886:	2b01      	cmp	r3, #1
 8007888:	dc19      	bgt.n	80078be <_dtoa_r+0x916>
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	b9bb      	cbnz	r3, 80078be <_dtoa_r+0x916>
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007894:	b99b      	cbnz	r3, 80078be <_dtoa_r+0x916>
 8007896:	9b05      	ldr	r3, [sp, #20]
 8007898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800789c:	0d1b      	lsrs	r3, r3, #20
 800789e:	051b      	lsls	r3, r3, #20
 80078a0:	b183      	cbz	r3, 80078c4 <_dtoa_r+0x91c>
 80078a2:	f04f 0801 	mov.w	r8, #1
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	3301      	adds	r3, #1
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	3301      	adds	r3, #1
 80078b0:	9309      	str	r3, [sp, #36]	; 0x24
 80078b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f47f af6a 	bne.w	800778e <_dtoa_r+0x7e6>
 80078ba:	2001      	movs	r0, #1
 80078bc:	e76f      	b.n	800779e <_dtoa_r+0x7f6>
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	e7f6      	b.n	80078b2 <_dtoa_r+0x90a>
 80078c4:	4698      	mov	r8, r3
 80078c6:	e7f4      	b.n	80078b2 <_dtoa_r+0x90a>
 80078c8:	f43f af7d 	beq.w	80077c6 <_dtoa_r+0x81e>
 80078cc:	4618      	mov	r0, r3
 80078ce:	301c      	adds	r0, #28
 80078d0:	e772      	b.n	80077b8 <_dtoa_r+0x810>
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dc36      	bgt.n	8007946 <_dtoa_r+0x99e>
 80078d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078da:	2b02      	cmp	r3, #2
 80078dc:	dd33      	ble.n	8007946 <_dtoa_r+0x99e>
 80078de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078e2:	f1b9 0f00 	cmp.w	r9, #0
 80078e6:	d10d      	bne.n	8007904 <_dtoa_r+0x95c>
 80078e8:	4621      	mov	r1, r4
 80078ea:	464b      	mov	r3, r9
 80078ec:	2205      	movs	r2, #5
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 fd5c 	bl	80083ac <__multadd>
 80078f4:	4601      	mov	r1, r0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4658      	mov	r0, fp
 80078fa:	f000 ffbd 	bl	8008878 <__mcmp>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f73f adb8 	bgt.w	8007474 <_dtoa_r+0x4cc>
 8007904:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007906:	9f03      	ldr	r7, [sp, #12]
 8007908:	ea6f 0a03 	mvn.w	sl, r3
 800790c:	f04f 0800 	mov.w	r8, #0
 8007910:	4621      	mov	r1, r4
 8007912:	4628      	mov	r0, r5
 8007914:	f000 fd28 	bl	8008368 <_Bfree>
 8007918:	2e00      	cmp	r6, #0
 800791a:	f43f aea7 	beq.w	800766c <_dtoa_r+0x6c4>
 800791e:	f1b8 0f00 	cmp.w	r8, #0
 8007922:	d005      	beq.n	8007930 <_dtoa_r+0x988>
 8007924:	45b0      	cmp	r8, r6
 8007926:	d003      	beq.n	8007930 <_dtoa_r+0x988>
 8007928:	4641      	mov	r1, r8
 800792a:	4628      	mov	r0, r5
 800792c:	f000 fd1c 	bl	8008368 <_Bfree>
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fd18 	bl	8008368 <_Bfree>
 8007938:	e698      	b.n	800766c <_dtoa_r+0x6c4>
 800793a:	2400      	movs	r4, #0
 800793c:	4626      	mov	r6, r4
 800793e:	e7e1      	b.n	8007904 <_dtoa_r+0x95c>
 8007940:	46c2      	mov	sl, r8
 8007942:	4626      	mov	r6, r4
 8007944:	e596      	b.n	8007474 <_dtoa_r+0x4cc>
 8007946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80fd 	beq.w	8007b4c <_dtoa_r+0xba4>
 8007952:	2f00      	cmp	r7, #0
 8007954:	dd05      	ble.n	8007962 <_dtoa_r+0x9ba>
 8007956:	4631      	mov	r1, r6
 8007958:	463a      	mov	r2, r7
 800795a:	4628      	mov	r0, r5
 800795c:	f000 ff1c 	bl	8008798 <__lshift>
 8007960:	4606      	mov	r6, r0
 8007962:	f1b8 0f00 	cmp.w	r8, #0
 8007966:	d05c      	beq.n	8007a22 <_dtoa_r+0xa7a>
 8007968:	4628      	mov	r0, r5
 800796a:	6871      	ldr	r1, [r6, #4]
 800796c:	f000 fcbc 	bl	80082e8 <_Balloc>
 8007970:	4607      	mov	r7, r0
 8007972:	b928      	cbnz	r0, 8007980 <_dtoa_r+0x9d8>
 8007974:	4602      	mov	r2, r0
 8007976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800797a:	4b7f      	ldr	r3, [pc, #508]	; (8007b78 <_dtoa_r+0xbd0>)
 800797c:	f7ff bb28 	b.w	8006fd0 <_dtoa_r+0x28>
 8007980:	6932      	ldr	r2, [r6, #16]
 8007982:	f106 010c 	add.w	r1, r6, #12
 8007986:	3202      	adds	r2, #2
 8007988:	0092      	lsls	r2, r2, #2
 800798a:	300c      	adds	r0, #12
 800798c:	f000 fc9e 	bl	80082cc <memcpy>
 8007990:	2201      	movs	r2, #1
 8007992:	4639      	mov	r1, r7
 8007994:	4628      	mov	r0, r5
 8007996:	f000 feff 	bl	8008798 <__lshift>
 800799a:	46b0      	mov	r8, r6
 800799c:	4606      	mov	r6, r0
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	9308      	str	r3, [sp, #32]
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	444b      	add	r3, r9
 80079a8:	930a      	str	r3, [sp, #40]	; 0x28
 80079aa:	9b04      	ldr	r3, [sp, #16]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	4621      	mov	r1, r4
 80079b6:	3b01      	subs	r3, #1
 80079b8:	4658      	mov	r0, fp
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	f7ff fa66 	bl	8006e8c <quorem>
 80079c0:	4603      	mov	r3, r0
 80079c2:	4641      	mov	r1, r8
 80079c4:	3330      	adds	r3, #48	; 0x30
 80079c6:	9006      	str	r0, [sp, #24]
 80079c8:	4658      	mov	r0, fp
 80079ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80079cc:	f000 ff54 	bl	8008878 <__mcmp>
 80079d0:	4632      	mov	r2, r6
 80079d2:	4681      	mov	r9, r0
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 ff6a 	bl	80088b0 <__mdiff>
 80079dc:	68c2      	ldr	r2, [r0, #12]
 80079de:	4607      	mov	r7, r0
 80079e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e2:	bb02      	cbnz	r2, 8007a26 <_dtoa_r+0xa7e>
 80079e4:	4601      	mov	r1, r0
 80079e6:	4658      	mov	r0, fp
 80079e8:	f000 ff46 	bl	8008878 <__mcmp>
 80079ec:	4602      	mov	r2, r0
 80079ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f0:	4639      	mov	r1, r7
 80079f2:	4628      	mov	r0, r5
 80079f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80079f8:	f000 fcb6 	bl	8008368 <_Bfree>
 80079fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a00:	9f08      	ldr	r7, [sp, #32]
 8007a02:	ea43 0102 	orr.w	r1, r3, r2
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0c:	d10d      	bne.n	8007a2a <_dtoa_r+0xa82>
 8007a0e:	2b39      	cmp	r3, #57	; 0x39
 8007a10:	d029      	beq.n	8007a66 <_dtoa_r+0xabe>
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	dd01      	ble.n	8007a1c <_dtoa_r+0xa74>
 8007a18:	9b06      	ldr	r3, [sp, #24]
 8007a1a:	3331      	adds	r3, #49	; 0x31
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	7013      	strb	r3, [r2, #0]
 8007a20:	e776      	b.n	8007910 <_dtoa_r+0x968>
 8007a22:	4630      	mov	r0, r6
 8007a24:	e7b9      	b.n	800799a <_dtoa_r+0x9f2>
 8007a26:	2201      	movs	r2, #1
 8007a28:	e7e2      	b.n	80079f0 <_dtoa_r+0xa48>
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	db06      	blt.n	8007a3e <_dtoa_r+0xa96>
 8007a30:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a32:	ea41 0909 	orr.w	r9, r1, r9
 8007a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a38:	ea59 0101 	orrs.w	r1, r9, r1
 8007a3c:	d120      	bne.n	8007a80 <_dtoa_r+0xad8>
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	ddec      	ble.n	8007a1c <_dtoa_r+0xa74>
 8007a42:	4659      	mov	r1, fp
 8007a44:	2201      	movs	r2, #1
 8007a46:	4628      	mov	r0, r5
 8007a48:	9308      	str	r3, [sp, #32]
 8007a4a:	f000 fea5 	bl	8008798 <__lshift>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4683      	mov	fp, r0
 8007a52:	f000 ff11 	bl	8008878 <__mcmp>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	9b08      	ldr	r3, [sp, #32]
 8007a5a:	dc02      	bgt.n	8007a62 <_dtoa_r+0xaba>
 8007a5c:	d1de      	bne.n	8007a1c <_dtoa_r+0xa74>
 8007a5e:	07da      	lsls	r2, r3, #31
 8007a60:	d5dc      	bpl.n	8007a1c <_dtoa_r+0xa74>
 8007a62:	2b39      	cmp	r3, #57	; 0x39
 8007a64:	d1d8      	bne.n	8007a18 <_dtoa_r+0xa70>
 8007a66:	2339      	movs	r3, #57	; 0x39
 8007a68:	9a04      	ldr	r2, [sp, #16]
 8007a6a:	7013      	strb	r3, [r2, #0]
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	461f      	mov	r7, r3
 8007a70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	2a39      	cmp	r2, #57	; 0x39
 8007a78:	d050      	beq.n	8007b1c <_dtoa_r+0xb74>
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e747      	b.n	8007910 <_dtoa_r+0x968>
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	dd03      	ble.n	8007a8c <_dtoa_r+0xae4>
 8007a84:	2b39      	cmp	r3, #57	; 0x39
 8007a86:	d0ee      	beq.n	8007a66 <_dtoa_r+0xabe>
 8007a88:	3301      	adds	r3, #1
 8007a8a:	e7c7      	b.n	8007a1c <_dtoa_r+0xa74>
 8007a8c:	9a08      	ldr	r2, [sp, #32]
 8007a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a94:	428a      	cmp	r2, r1
 8007a96:	d02a      	beq.n	8007aee <_dtoa_r+0xb46>
 8007a98:	4659      	mov	r1, fp
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fc84 	bl	80083ac <__multadd>
 8007aa4:	45b0      	cmp	r8, r6
 8007aa6:	4683      	mov	fp, r0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	f04f 020a 	mov.w	r2, #10
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	d107      	bne.n	8007ac6 <_dtoa_r+0xb1e>
 8007ab6:	f000 fc79 	bl	80083ac <__multadd>
 8007aba:	4680      	mov	r8, r0
 8007abc:	4606      	mov	r6, r0
 8007abe:	9b08      	ldr	r3, [sp, #32]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	9308      	str	r3, [sp, #32]
 8007ac4:	e775      	b.n	80079b2 <_dtoa_r+0xa0a>
 8007ac6:	f000 fc71 	bl	80083ac <__multadd>
 8007aca:	4631      	mov	r1, r6
 8007acc:	4680      	mov	r8, r0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 fc6a 	bl	80083ac <__multadd>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	e7f0      	b.n	8007abe <_dtoa_r+0xb16>
 8007adc:	f1b9 0f00 	cmp.w	r9, #0
 8007ae0:	bfcc      	ite	gt
 8007ae2:	464f      	movgt	r7, r9
 8007ae4:	2701      	movle	r7, #1
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	9a03      	ldr	r2, [sp, #12]
 8007aec:	4417      	add	r7, r2
 8007aee:	4659      	mov	r1, fp
 8007af0:	2201      	movs	r2, #1
 8007af2:	4628      	mov	r0, r5
 8007af4:	9308      	str	r3, [sp, #32]
 8007af6:	f000 fe4f 	bl	8008798 <__lshift>
 8007afa:	4621      	mov	r1, r4
 8007afc:	4683      	mov	fp, r0
 8007afe:	f000 febb 	bl	8008878 <__mcmp>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	dcb2      	bgt.n	8007a6c <_dtoa_r+0xac4>
 8007b06:	d102      	bne.n	8007b0e <_dtoa_r+0xb66>
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d4ae      	bmi.n	8007a6c <_dtoa_r+0xac4>
 8007b0e:	463b      	mov	r3, r7
 8007b10:	461f      	mov	r7, r3
 8007b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b16:	2a30      	cmp	r2, #48	; 0x30
 8007b18:	d0fa      	beq.n	8007b10 <_dtoa_r+0xb68>
 8007b1a:	e6f9      	b.n	8007910 <_dtoa_r+0x968>
 8007b1c:	9a03      	ldr	r2, [sp, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d1a5      	bne.n	8007a6e <_dtoa_r+0xac6>
 8007b22:	2331      	movs	r3, #49	; 0x31
 8007b24:	f10a 0a01 	add.w	sl, sl, #1
 8007b28:	e779      	b.n	8007a1e <_dtoa_r+0xa76>
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <_dtoa_r+0xbd4>)
 8007b2c:	f7ff baa8 	b.w	8007080 <_dtoa_r+0xd8>
 8007b30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f47f aa81 	bne.w	800703a <_dtoa_r+0x92>
 8007b38:	4b11      	ldr	r3, [pc, #68]	; (8007b80 <_dtoa_r+0xbd8>)
 8007b3a:	f7ff baa1 	b.w	8007080 <_dtoa_r+0xd8>
 8007b3e:	f1b9 0f00 	cmp.w	r9, #0
 8007b42:	dc03      	bgt.n	8007b4c <_dtoa_r+0xba4>
 8007b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	f73f aecb 	bgt.w	80078e2 <_dtoa_r+0x93a>
 8007b4c:	9f03      	ldr	r7, [sp, #12]
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4658      	mov	r0, fp
 8007b52:	f7ff f99b 	bl	8006e8c <quorem>
 8007b56:	9a03      	ldr	r2, [sp, #12]
 8007b58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b5c:	f807 3b01 	strb.w	r3, [r7], #1
 8007b60:	1aba      	subs	r2, r7, r2
 8007b62:	4591      	cmp	r9, r2
 8007b64:	ddba      	ble.n	8007adc <_dtoa_r+0xb34>
 8007b66:	4659      	mov	r1, fp
 8007b68:	2300      	movs	r3, #0
 8007b6a:	220a      	movs	r2, #10
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f000 fc1d 	bl	80083ac <__multadd>
 8007b72:	4683      	mov	fp, r0
 8007b74:	e7eb      	b.n	8007b4e <_dtoa_r+0xba6>
 8007b76:	bf00      	nop
 8007b78:	08009f7d 	.word	0x08009f7d
 8007b7c:	08009cec 	.word	0x08009cec
 8007b80:	08009f15 	.word	0x08009f15

08007b84 <fiprintf>:
 8007b84:	b40e      	push	{r1, r2, r3}
 8007b86:	b503      	push	{r0, r1, lr}
 8007b88:	4601      	mov	r1, r0
 8007b8a:	ab03      	add	r3, sp, #12
 8007b8c:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <fiprintf+0x20>)
 8007b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b92:	6800      	ldr	r0, [r0, #0]
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	f001 fad3 	bl	8009140 <_vfiprintf_r>
 8007b9a:	b002      	add	sp, #8
 8007b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba0:	b003      	add	sp, #12
 8007ba2:	4770      	bx	lr
 8007ba4:	20000010 	.word	0x20000010

08007ba8 <rshift>:
 8007ba8:	6903      	ldr	r3, [r0, #16]
 8007baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007bb2:	f100 0414 	add.w	r4, r0, #20
 8007bb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007bba:	dd46      	ble.n	8007c4a <rshift+0xa2>
 8007bbc:	f011 011f 	ands.w	r1, r1, #31
 8007bc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007bc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007bc8:	d10c      	bne.n	8007be4 <rshift+0x3c>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f100 0710 	add.w	r7, r0, #16
 8007bd0:	42b1      	cmp	r1, r6
 8007bd2:	d335      	bcc.n	8007c40 <rshift+0x98>
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	1eea      	subs	r2, r5, #3
 8007bda:	4296      	cmp	r6, r2
 8007bdc:	bf38      	it	cc
 8007bde:	2300      	movcc	r3, #0
 8007be0:	4423      	add	r3, r4
 8007be2:	e015      	b.n	8007c10 <rshift+0x68>
 8007be4:	46a1      	mov	r9, r4
 8007be6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bea:	f1c1 0820 	rsb	r8, r1, #32
 8007bee:	40cf      	lsrs	r7, r1
 8007bf0:	f105 0e04 	add.w	lr, r5, #4
 8007bf4:	4576      	cmp	r6, lr
 8007bf6:	46f4      	mov	ip, lr
 8007bf8:	d816      	bhi.n	8007c28 <rshift+0x80>
 8007bfa:	1a9a      	subs	r2, r3, r2
 8007bfc:	0092      	lsls	r2, r2, #2
 8007bfe:	3a04      	subs	r2, #4
 8007c00:	3501      	adds	r5, #1
 8007c02:	42ae      	cmp	r6, r5
 8007c04:	bf38      	it	cc
 8007c06:	2200      	movcc	r2, #0
 8007c08:	18a3      	adds	r3, r4, r2
 8007c0a:	50a7      	str	r7, [r4, r2]
 8007c0c:	b107      	cbz	r7, 8007c10 <rshift+0x68>
 8007c0e:	3304      	adds	r3, #4
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	eba3 0204 	sub.w	r2, r3, r4
 8007c16:	bf08      	it	eq
 8007c18:	2300      	moveq	r3, #0
 8007c1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c1e:	6102      	str	r2, [r0, #16]
 8007c20:	bf08      	it	eq
 8007c22:	6143      	streq	r3, [r0, #20]
 8007c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c28:	f8dc c000 	ldr.w	ip, [ip]
 8007c2c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c30:	ea4c 0707 	orr.w	r7, ip, r7
 8007c34:	f849 7b04 	str.w	r7, [r9], #4
 8007c38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c3c:	40cf      	lsrs	r7, r1
 8007c3e:	e7d9      	b.n	8007bf4 <rshift+0x4c>
 8007c40:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c44:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c48:	e7c2      	b.n	8007bd0 <rshift+0x28>
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	e7e0      	b.n	8007c10 <rshift+0x68>

08007c4e <__hexdig_fun>:
 8007c4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c52:	2b09      	cmp	r3, #9
 8007c54:	d802      	bhi.n	8007c5c <__hexdig_fun+0xe>
 8007c56:	3820      	subs	r0, #32
 8007c58:	b2c0      	uxtb	r0, r0
 8007c5a:	4770      	bx	lr
 8007c5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	d801      	bhi.n	8007c68 <__hexdig_fun+0x1a>
 8007c64:	3847      	subs	r0, #71	; 0x47
 8007c66:	e7f7      	b.n	8007c58 <__hexdig_fun+0xa>
 8007c68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c6c:	2b05      	cmp	r3, #5
 8007c6e:	d801      	bhi.n	8007c74 <__hexdig_fun+0x26>
 8007c70:	3827      	subs	r0, #39	; 0x27
 8007c72:	e7f1      	b.n	8007c58 <__hexdig_fun+0xa>
 8007c74:	2000      	movs	r0, #0
 8007c76:	4770      	bx	lr

08007c78 <__gethex>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	b08b      	sub	sp, #44	; 0x2c
 8007c7e:	9305      	str	r3, [sp, #20]
 8007c80:	4bb2      	ldr	r3, [pc, #712]	; (8007f4c <__gethex+0x2d4>)
 8007c82:	9002      	str	r0, [sp, #8]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	468b      	mov	fp, r1
 8007c88:	4618      	mov	r0, r3
 8007c8a:	4690      	mov	r8, r2
 8007c8c:	9303      	str	r3, [sp, #12]
 8007c8e:	f7f8 fa5f 	bl	8000150 <strlen>
 8007c92:	4682      	mov	sl, r0
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	f8db 2000 	ldr.w	r2, [fp]
 8007c9a:	4403      	add	r3, r0
 8007c9c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ca0:	9306      	str	r3, [sp, #24]
 8007ca2:	1c93      	adds	r3, r2, #2
 8007ca4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007ca8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007cac:	32fe      	adds	r2, #254	; 0xfe
 8007cae:	18d1      	adds	r1, r2, r3
 8007cb0:	461f      	mov	r7, r3
 8007cb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007cb6:	9101      	str	r1, [sp, #4]
 8007cb8:	2830      	cmp	r0, #48	; 0x30
 8007cba:	d0f8      	beq.n	8007cae <__gethex+0x36>
 8007cbc:	f7ff ffc7 	bl	8007c4e <__hexdig_fun>
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d13a      	bne.n	8007d3c <__gethex+0xc4>
 8007cc6:	4652      	mov	r2, sl
 8007cc8:	4638      	mov	r0, r7
 8007cca:	9903      	ldr	r1, [sp, #12]
 8007ccc:	f001 fb7e 	bl	80093cc <strncmp>
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d166      	bne.n	8007da4 <__gethex+0x12c>
 8007cd6:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007cda:	eb07 060a 	add.w	r6, r7, sl
 8007cde:	f7ff ffb6 	bl	8007c4e <__hexdig_fun>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d060      	beq.n	8007da8 <__gethex+0x130>
 8007ce6:	4633      	mov	r3, r6
 8007ce8:	7818      	ldrb	r0, [r3, #0]
 8007cea:	461f      	mov	r7, r3
 8007cec:	2830      	cmp	r0, #48	; 0x30
 8007cee:	f103 0301 	add.w	r3, r3, #1
 8007cf2:	d0f9      	beq.n	8007ce8 <__gethex+0x70>
 8007cf4:	f7ff ffab 	bl	8007c4e <__hexdig_fun>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	fab0 f480 	clz	r4, r0
 8007cfe:	4635      	mov	r5, r6
 8007d00:	0964      	lsrs	r4, r4, #5
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	463a      	mov	r2, r7
 8007d06:	4616      	mov	r6, r2
 8007d08:	7830      	ldrb	r0, [r6, #0]
 8007d0a:	3201      	adds	r2, #1
 8007d0c:	f7ff ff9f 	bl	8007c4e <__hexdig_fun>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d1f8      	bne.n	8007d06 <__gethex+0x8e>
 8007d14:	4652      	mov	r2, sl
 8007d16:	4630      	mov	r0, r6
 8007d18:	9903      	ldr	r1, [sp, #12]
 8007d1a:	f001 fb57 	bl	80093cc <strncmp>
 8007d1e:	b980      	cbnz	r0, 8007d42 <__gethex+0xca>
 8007d20:	b94d      	cbnz	r5, 8007d36 <__gethex+0xbe>
 8007d22:	eb06 050a 	add.w	r5, r6, sl
 8007d26:	462a      	mov	r2, r5
 8007d28:	4616      	mov	r6, r2
 8007d2a:	7830      	ldrb	r0, [r6, #0]
 8007d2c:	3201      	adds	r2, #1
 8007d2e:	f7ff ff8e 	bl	8007c4e <__hexdig_fun>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d1f8      	bne.n	8007d28 <__gethex+0xb0>
 8007d36:	1bad      	subs	r5, r5, r6
 8007d38:	00ad      	lsls	r5, r5, #2
 8007d3a:	e004      	b.n	8007d46 <__gethex+0xce>
 8007d3c:	2400      	movs	r4, #0
 8007d3e:	4625      	mov	r5, r4
 8007d40:	e7e0      	b.n	8007d04 <__gethex+0x8c>
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	d1f7      	bne.n	8007d36 <__gethex+0xbe>
 8007d46:	7833      	ldrb	r3, [r6, #0]
 8007d48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d4c:	2b50      	cmp	r3, #80	; 0x50
 8007d4e:	d139      	bne.n	8007dc4 <__gethex+0x14c>
 8007d50:	7873      	ldrb	r3, [r6, #1]
 8007d52:	2b2b      	cmp	r3, #43	; 0x2b
 8007d54:	d02a      	beq.n	8007dac <__gethex+0x134>
 8007d56:	2b2d      	cmp	r3, #45	; 0x2d
 8007d58:	d02c      	beq.n	8007db4 <__gethex+0x13c>
 8007d5a:	f04f 0900 	mov.w	r9, #0
 8007d5e:	1c71      	adds	r1, r6, #1
 8007d60:	7808      	ldrb	r0, [r1, #0]
 8007d62:	f7ff ff74 	bl	8007c4e <__hexdig_fun>
 8007d66:	1e43      	subs	r3, r0, #1
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b18      	cmp	r3, #24
 8007d6c:	d82a      	bhi.n	8007dc4 <__gethex+0x14c>
 8007d6e:	f1a0 0210 	sub.w	r2, r0, #16
 8007d72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d76:	f7ff ff6a 	bl	8007c4e <__hexdig_fun>
 8007d7a:	1e43      	subs	r3, r0, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b18      	cmp	r3, #24
 8007d80:	d91b      	bls.n	8007dba <__gethex+0x142>
 8007d82:	f1b9 0f00 	cmp.w	r9, #0
 8007d86:	d000      	beq.n	8007d8a <__gethex+0x112>
 8007d88:	4252      	negs	r2, r2
 8007d8a:	4415      	add	r5, r2
 8007d8c:	f8cb 1000 	str.w	r1, [fp]
 8007d90:	b1d4      	cbz	r4, 8007dc8 <__gethex+0x150>
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bf14      	ite	ne
 8007d98:	2700      	movne	r7, #0
 8007d9a:	2706      	moveq	r7, #6
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	b00b      	add	sp, #44	; 0x2c
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	463e      	mov	r6, r7
 8007da6:	4625      	mov	r5, r4
 8007da8:	2401      	movs	r4, #1
 8007daa:	e7cc      	b.n	8007d46 <__gethex+0xce>
 8007dac:	f04f 0900 	mov.w	r9, #0
 8007db0:	1cb1      	adds	r1, r6, #2
 8007db2:	e7d5      	b.n	8007d60 <__gethex+0xe8>
 8007db4:	f04f 0901 	mov.w	r9, #1
 8007db8:	e7fa      	b.n	8007db0 <__gethex+0x138>
 8007dba:	230a      	movs	r3, #10
 8007dbc:	fb03 0202 	mla	r2, r3, r2, r0
 8007dc0:	3a10      	subs	r2, #16
 8007dc2:	e7d6      	b.n	8007d72 <__gethex+0xfa>
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	e7e1      	b.n	8007d8c <__gethex+0x114>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	1bf3      	subs	r3, r6, r7
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	2b07      	cmp	r3, #7
 8007dd0:	dc0a      	bgt.n	8007de8 <__gethex+0x170>
 8007dd2:	9802      	ldr	r0, [sp, #8]
 8007dd4:	f000 fa88 	bl	80082e8 <_Balloc>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	b940      	cbnz	r0, 8007dee <__gethex+0x176>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	21de      	movs	r1, #222	; 0xde
 8007de0:	4b5b      	ldr	r3, [pc, #364]	; (8007f50 <__gethex+0x2d8>)
 8007de2:	485c      	ldr	r0, [pc, #368]	; (8007f54 <__gethex+0x2dc>)
 8007de4:	f7ff f834 	bl	8006e50 <__assert_func>
 8007de8:	3101      	adds	r1, #1
 8007dea:	105b      	asrs	r3, r3, #1
 8007dec:	e7ef      	b.n	8007dce <__gethex+0x156>
 8007dee:	f04f 0b00 	mov.w	fp, #0
 8007df2:	f100 0914 	add.w	r9, r0, #20
 8007df6:	f1ca 0301 	rsb	r3, sl, #1
 8007dfa:	f8cd 9010 	str.w	r9, [sp, #16]
 8007dfe:	f8cd b004 	str.w	fp, [sp, #4]
 8007e02:	9308      	str	r3, [sp, #32]
 8007e04:	42b7      	cmp	r7, r6
 8007e06:	d33f      	bcc.n	8007e88 <__gethex+0x210>
 8007e08:	9f04      	ldr	r7, [sp, #16]
 8007e0a:	9b01      	ldr	r3, [sp, #4]
 8007e0c:	f847 3b04 	str.w	r3, [r7], #4
 8007e10:	eba7 0709 	sub.w	r7, r7, r9
 8007e14:	10bf      	asrs	r7, r7, #2
 8007e16:	6127      	str	r7, [r4, #16]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fb57 	bl	80084cc <__hi0bits>
 8007e1e:	017f      	lsls	r7, r7, #5
 8007e20:	f8d8 6000 	ldr.w	r6, [r8]
 8007e24:	1a3f      	subs	r7, r7, r0
 8007e26:	42b7      	cmp	r7, r6
 8007e28:	dd62      	ble.n	8007ef0 <__gethex+0x278>
 8007e2a:	1bbf      	subs	r7, r7, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fef1 	bl	8008c16 <__any_on>
 8007e34:	4682      	mov	sl, r0
 8007e36:	b1a8      	cbz	r0, 8007e64 <__gethex+0x1ec>
 8007e38:	f04f 0a01 	mov.w	sl, #1
 8007e3c:	1e7b      	subs	r3, r7, #1
 8007e3e:	1159      	asrs	r1, r3, #5
 8007e40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e44:	f003 021f 	and.w	r2, r3, #31
 8007e48:	fa0a f202 	lsl.w	r2, sl, r2
 8007e4c:	420a      	tst	r2, r1
 8007e4e:	d009      	beq.n	8007e64 <__gethex+0x1ec>
 8007e50:	4553      	cmp	r3, sl
 8007e52:	dd05      	ble.n	8007e60 <__gethex+0x1e8>
 8007e54:	4620      	mov	r0, r4
 8007e56:	1eb9      	subs	r1, r7, #2
 8007e58:	f000 fedd 	bl	8008c16 <__any_on>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d144      	bne.n	8007eea <__gethex+0x272>
 8007e60:	f04f 0a02 	mov.w	sl, #2
 8007e64:	4639      	mov	r1, r7
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7ff fe9e 	bl	8007ba8 <rshift>
 8007e6c:	443d      	add	r5, r7
 8007e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e72:	42ab      	cmp	r3, r5
 8007e74:	da4a      	bge.n	8007f0c <__gethex+0x294>
 8007e76:	4621      	mov	r1, r4
 8007e78:	9802      	ldr	r0, [sp, #8]
 8007e7a:	f000 fa75 	bl	8008368 <_Bfree>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e82:	27a3      	movs	r7, #163	; 0xa3
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	e789      	b.n	8007d9c <__gethex+0x124>
 8007e88:	1e73      	subs	r3, r6, #1
 8007e8a:	9a06      	ldr	r2, [sp, #24]
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d019      	beq.n	8007eca <__gethex+0x252>
 8007e96:	f1bb 0f20 	cmp.w	fp, #32
 8007e9a:	d107      	bne.n	8007eac <__gethex+0x234>
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	9a01      	ldr	r2, [sp, #4]
 8007ea0:	f843 2b04 	str.w	r2, [r3], #4
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	469b      	mov	fp, r3
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007eb0:	f7ff fecd 	bl	8007c4e <__hexdig_fun>
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	f000 000f 	and.w	r0, r0, #15
 8007eba:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ebe:	4303      	orrs	r3, r0
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f10b 0b04 	add.w	fp, fp, #4
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	e00d      	b.n	8007ee6 <__gethex+0x26e>
 8007eca:	9a08      	ldr	r2, [sp, #32]
 8007ecc:	1e73      	subs	r3, r6, #1
 8007ece:	4413      	add	r3, r2
 8007ed0:	42bb      	cmp	r3, r7
 8007ed2:	d3e0      	bcc.n	8007e96 <__gethex+0x21e>
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	9903      	ldr	r1, [sp, #12]
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	f001 fa76 	bl	80093cc <strncmp>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1d7      	bne.n	8007e96 <__gethex+0x21e>
 8007ee6:	461e      	mov	r6, r3
 8007ee8:	e78c      	b.n	8007e04 <__gethex+0x18c>
 8007eea:	f04f 0a03 	mov.w	sl, #3
 8007eee:	e7b9      	b.n	8007e64 <__gethex+0x1ec>
 8007ef0:	da09      	bge.n	8007f06 <__gethex+0x28e>
 8007ef2:	1bf7      	subs	r7, r6, r7
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	463a      	mov	r2, r7
 8007ef8:	9802      	ldr	r0, [sp, #8]
 8007efa:	f000 fc4d 	bl	8008798 <__lshift>
 8007efe:	4604      	mov	r4, r0
 8007f00:	1bed      	subs	r5, r5, r7
 8007f02:	f100 0914 	add.w	r9, r0, #20
 8007f06:	f04f 0a00 	mov.w	sl, #0
 8007f0a:	e7b0      	b.n	8007e6e <__gethex+0x1f6>
 8007f0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007f10:	42a8      	cmp	r0, r5
 8007f12:	dd72      	ble.n	8007ffa <__gethex+0x382>
 8007f14:	1b45      	subs	r5, r0, r5
 8007f16:	42ae      	cmp	r6, r5
 8007f18:	dc35      	bgt.n	8007f86 <__gethex+0x30e>
 8007f1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d029      	beq.n	8007f76 <__gethex+0x2fe>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d02b      	beq.n	8007f7e <__gethex+0x306>
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d11c      	bne.n	8007f64 <__gethex+0x2ec>
 8007f2a:	42ae      	cmp	r6, r5
 8007f2c:	d11a      	bne.n	8007f64 <__gethex+0x2ec>
 8007f2e:	2e01      	cmp	r6, #1
 8007f30:	d112      	bne.n	8007f58 <__gethex+0x2e0>
 8007f32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f36:	9a05      	ldr	r2, [sp, #20]
 8007f38:	2762      	movs	r7, #98	; 0x62
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	f8c9 3000 	str.w	r3, [r9]
 8007f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f46:	601c      	str	r4, [r3, #0]
 8007f48:	e728      	b.n	8007d9c <__gethex+0x124>
 8007f4a:	bf00      	nop
 8007f4c:	08009ff4 	.word	0x08009ff4
 8007f50:	08009f7d 	.word	0x08009f7d
 8007f54:	08009f8e 	.word	0x08009f8e
 8007f58:	4620      	mov	r0, r4
 8007f5a:	1e71      	subs	r1, r6, #1
 8007f5c:	f000 fe5b 	bl	8008c16 <__any_on>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d1e6      	bne.n	8007f32 <__gethex+0x2ba>
 8007f64:	4621      	mov	r1, r4
 8007f66:	9802      	ldr	r0, [sp, #8]
 8007f68:	f000 f9fe 	bl	8008368 <_Bfree>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f70:	2750      	movs	r7, #80	; 0x50
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e712      	b.n	8007d9c <__gethex+0x124>
 8007f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f3      	bne.n	8007f64 <__gethex+0x2ec>
 8007f7c:	e7d9      	b.n	8007f32 <__gethex+0x2ba>
 8007f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1d6      	bne.n	8007f32 <__gethex+0x2ba>
 8007f84:	e7ee      	b.n	8007f64 <__gethex+0x2ec>
 8007f86:	1e6f      	subs	r7, r5, #1
 8007f88:	f1ba 0f00 	cmp.w	sl, #0
 8007f8c:	d132      	bne.n	8007ff4 <__gethex+0x37c>
 8007f8e:	b127      	cbz	r7, 8007f9a <__gethex+0x322>
 8007f90:	4639      	mov	r1, r7
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fe3f 	bl	8008c16 <__any_on>
 8007f98:	4682      	mov	sl, r0
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	117b      	asrs	r3, r7, #5
 8007f9e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007fa2:	f007 071f 	and.w	r7, r7, #31
 8007fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8007faa:	421f      	tst	r7, r3
 8007fac:	f04f 0702 	mov.w	r7, #2
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	bf18      	it	ne
 8007fb6:	f04a 0a02 	orrne.w	sl, sl, #2
 8007fba:	1b76      	subs	r6, r6, r5
 8007fbc:	f7ff fdf4 	bl	8007ba8 <rshift>
 8007fc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007fc4:	f1ba 0f00 	cmp.w	sl, #0
 8007fc8:	d048      	beq.n	800805c <__gethex+0x3e4>
 8007fca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d015      	beq.n	8007ffe <__gethex+0x386>
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d017      	beq.n	8008006 <__gethex+0x38e>
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d109      	bne.n	8007fee <__gethex+0x376>
 8007fda:	f01a 0f02 	tst.w	sl, #2
 8007fde:	d006      	beq.n	8007fee <__gethex+0x376>
 8007fe0:	f8d9 0000 	ldr.w	r0, [r9]
 8007fe4:	ea4a 0a00 	orr.w	sl, sl, r0
 8007fe8:	f01a 0f01 	tst.w	sl, #1
 8007fec:	d10e      	bne.n	800800c <__gethex+0x394>
 8007fee:	f047 0710 	orr.w	r7, r7, #16
 8007ff2:	e033      	b.n	800805c <__gethex+0x3e4>
 8007ff4:	f04f 0a01 	mov.w	sl, #1
 8007ff8:	e7cf      	b.n	8007f9a <__gethex+0x322>
 8007ffa:	2701      	movs	r7, #1
 8007ffc:	e7e2      	b.n	8007fc4 <__gethex+0x34c>
 8007ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008000:	f1c3 0301 	rsb	r3, r3, #1
 8008004:	9315      	str	r3, [sp, #84]	; 0x54
 8008006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0f0      	beq.n	8007fee <__gethex+0x376>
 800800c:	f04f 0c00 	mov.w	ip, #0
 8008010:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008014:	f104 0314 	add.w	r3, r4, #20
 8008018:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800801c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008020:	4618      	mov	r0, r3
 8008022:	f853 2b04 	ldr.w	r2, [r3], #4
 8008026:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800802a:	d01c      	beq.n	8008066 <__gethex+0x3ee>
 800802c:	3201      	adds	r2, #1
 800802e:	6002      	str	r2, [r0, #0]
 8008030:	2f02      	cmp	r7, #2
 8008032:	f104 0314 	add.w	r3, r4, #20
 8008036:	d13d      	bne.n	80080b4 <__gethex+0x43c>
 8008038:	f8d8 2000 	ldr.w	r2, [r8]
 800803c:	3a01      	subs	r2, #1
 800803e:	42b2      	cmp	r2, r6
 8008040:	d10a      	bne.n	8008058 <__gethex+0x3e0>
 8008042:	2201      	movs	r2, #1
 8008044:	1171      	asrs	r1, r6, #5
 8008046:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800804a:	f006 061f 	and.w	r6, r6, #31
 800804e:	fa02 f606 	lsl.w	r6, r2, r6
 8008052:	421e      	tst	r6, r3
 8008054:	bf18      	it	ne
 8008056:	4617      	movne	r7, r2
 8008058:	f047 0720 	orr.w	r7, r7, #32
 800805c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800805e:	601c      	str	r4, [r3, #0]
 8008060:	9b05      	ldr	r3, [sp, #20]
 8008062:	601d      	str	r5, [r3, #0]
 8008064:	e69a      	b.n	8007d9c <__gethex+0x124>
 8008066:	4299      	cmp	r1, r3
 8008068:	f843 cc04 	str.w	ip, [r3, #-4]
 800806c:	d8d8      	bhi.n	8008020 <__gethex+0x3a8>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	459b      	cmp	fp, r3
 8008072:	db17      	blt.n	80080a4 <__gethex+0x42c>
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	9802      	ldr	r0, [sp, #8]
 8008078:	3101      	adds	r1, #1
 800807a:	f000 f935 	bl	80082e8 <_Balloc>
 800807e:	4681      	mov	r9, r0
 8008080:	b918      	cbnz	r0, 800808a <__gethex+0x412>
 8008082:	4602      	mov	r2, r0
 8008084:	2184      	movs	r1, #132	; 0x84
 8008086:	4b19      	ldr	r3, [pc, #100]	; (80080ec <__gethex+0x474>)
 8008088:	e6ab      	b.n	8007de2 <__gethex+0x16a>
 800808a:	6922      	ldr	r2, [r4, #16]
 800808c:	f104 010c 	add.w	r1, r4, #12
 8008090:	3202      	adds	r2, #2
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	300c      	adds	r0, #12
 8008096:	f000 f919 	bl	80082cc <memcpy>
 800809a:	4621      	mov	r1, r4
 800809c:	9802      	ldr	r0, [sp, #8]
 800809e:	f000 f963 	bl	8008368 <_Bfree>
 80080a2:	464c      	mov	r4, r9
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	6122      	str	r2, [r4, #16]
 80080aa:	2201      	movs	r2, #1
 80080ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080b0:	615a      	str	r2, [r3, #20]
 80080b2:	e7bd      	b.n	8008030 <__gethex+0x3b8>
 80080b4:	6922      	ldr	r2, [r4, #16]
 80080b6:	455a      	cmp	r2, fp
 80080b8:	dd0b      	ble.n	80080d2 <__gethex+0x45a>
 80080ba:	2101      	movs	r1, #1
 80080bc:	4620      	mov	r0, r4
 80080be:	f7ff fd73 	bl	8007ba8 <rshift>
 80080c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080c6:	3501      	adds	r5, #1
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	f6ff aed4 	blt.w	8007e76 <__gethex+0x1fe>
 80080ce:	2701      	movs	r7, #1
 80080d0:	e7c2      	b.n	8008058 <__gethex+0x3e0>
 80080d2:	f016 061f 	ands.w	r6, r6, #31
 80080d6:	d0fa      	beq.n	80080ce <__gethex+0x456>
 80080d8:	4453      	add	r3, sl
 80080da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80080de:	f000 f9f5 	bl	80084cc <__hi0bits>
 80080e2:	f1c6 0620 	rsb	r6, r6, #32
 80080e6:	42b0      	cmp	r0, r6
 80080e8:	dbe7      	blt.n	80080ba <__gethex+0x442>
 80080ea:	e7f0      	b.n	80080ce <__gethex+0x456>
 80080ec:	08009f7d 	.word	0x08009f7d

080080f0 <L_shift>:
 80080f0:	f1c2 0208 	rsb	r2, r2, #8
 80080f4:	0092      	lsls	r2, r2, #2
 80080f6:	b570      	push	{r4, r5, r6, lr}
 80080f8:	f1c2 0620 	rsb	r6, r2, #32
 80080fc:	6843      	ldr	r3, [r0, #4]
 80080fe:	6804      	ldr	r4, [r0, #0]
 8008100:	fa03 f506 	lsl.w	r5, r3, r6
 8008104:	432c      	orrs	r4, r5
 8008106:	40d3      	lsrs	r3, r2
 8008108:	6004      	str	r4, [r0, #0]
 800810a:	f840 3f04 	str.w	r3, [r0, #4]!
 800810e:	4288      	cmp	r0, r1
 8008110:	d3f4      	bcc.n	80080fc <L_shift+0xc>
 8008112:	bd70      	pop	{r4, r5, r6, pc}

08008114 <__match>:
 8008114:	b530      	push	{r4, r5, lr}
 8008116:	6803      	ldr	r3, [r0, #0]
 8008118:	3301      	adds	r3, #1
 800811a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811e:	b914      	cbnz	r4, 8008126 <__match+0x12>
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	2001      	movs	r0, #1
 8008124:	bd30      	pop	{r4, r5, pc}
 8008126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800812e:	2d19      	cmp	r5, #25
 8008130:	bf98      	it	ls
 8008132:	3220      	addls	r2, #32
 8008134:	42a2      	cmp	r2, r4
 8008136:	d0f0      	beq.n	800811a <__match+0x6>
 8008138:	2000      	movs	r0, #0
 800813a:	e7f3      	b.n	8008124 <__match+0x10>

0800813c <__hexnan>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	2500      	movs	r5, #0
 8008142:	680b      	ldr	r3, [r1, #0]
 8008144:	4682      	mov	sl, r0
 8008146:	115e      	asrs	r6, r3, #5
 8008148:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800814c:	f013 031f 	ands.w	r3, r3, #31
 8008150:	bf18      	it	ne
 8008152:	3604      	addne	r6, #4
 8008154:	1f37      	subs	r7, r6, #4
 8008156:	46b9      	mov	r9, r7
 8008158:	463c      	mov	r4, r7
 800815a:	46ab      	mov	fp, r5
 800815c:	b087      	sub	sp, #28
 800815e:	4690      	mov	r8, r2
 8008160:	6802      	ldr	r2, [r0, #0]
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	f846 5c04 	str.w	r5, [r6, #-4]
 8008168:	9502      	str	r5, [sp, #8]
 800816a:	7851      	ldrb	r1, [r2, #1]
 800816c:	1c53      	adds	r3, r2, #1
 800816e:	9303      	str	r3, [sp, #12]
 8008170:	b341      	cbz	r1, 80081c4 <__hexnan+0x88>
 8008172:	4608      	mov	r0, r1
 8008174:	9205      	str	r2, [sp, #20]
 8008176:	9104      	str	r1, [sp, #16]
 8008178:	f7ff fd69 	bl	8007c4e <__hexdig_fun>
 800817c:	2800      	cmp	r0, #0
 800817e:	d14f      	bne.n	8008220 <__hexnan+0xe4>
 8008180:	9904      	ldr	r1, [sp, #16]
 8008182:	9a05      	ldr	r2, [sp, #20]
 8008184:	2920      	cmp	r1, #32
 8008186:	d818      	bhi.n	80081ba <__hexnan+0x7e>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	459b      	cmp	fp, r3
 800818c:	dd13      	ble.n	80081b6 <__hexnan+0x7a>
 800818e:	454c      	cmp	r4, r9
 8008190:	d206      	bcs.n	80081a0 <__hexnan+0x64>
 8008192:	2d07      	cmp	r5, #7
 8008194:	dc04      	bgt.n	80081a0 <__hexnan+0x64>
 8008196:	462a      	mov	r2, r5
 8008198:	4649      	mov	r1, r9
 800819a:	4620      	mov	r0, r4
 800819c:	f7ff ffa8 	bl	80080f0 <L_shift>
 80081a0:	4544      	cmp	r4, r8
 80081a2:	d950      	bls.n	8008246 <__hexnan+0x10a>
 80081a4:	2300      	movs	r3, #0
 80081a6:	f1a4 0904 	sub.w	r9, r4, #4
 80081aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ae:	461d      	mov	r5, r3
 80081b0:	464c      	mov	r4, r9
 80081b2:	f8cd b008 	str.w	fp, [sp, #8]
 80081b6:	9a03      	ldr	r2, [sp, #12]
 80081b8:	e7d7      	b.n	800816a <__hexnan+0x2e>
 80081ba:	2929      	cmp	r1, #41	; 0x29
 80081bc:	d156      	bne.n	800826c <__hexnan+0x130>
 80081be:	3202      	adds	r2, #2
 80081c0:	f8ca 2000 	str.w	r2, [sl]
 80081c4:	f1bb 0f00 	cmp.w	fp, #0
 80081c8:	d050      	beq.n	800826c <__hexnan+0x130>
 80081ca:	454c      	cmp	r4, r9
 80081cc:	d206      	bcs.n	80081dc <__hexnan+0xa0>
 80081ce:	2d07      	cmp	r5, #7
 80081d0:	dc04      	bgt.n	80081dc <__hexnan+0xa0>
 80081d2:	462a      	mov	r2, r5
 80081d4:	4649      	mov	r1, r9
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff ff8a 	bl	80080f0 <L_shift>
 80081dc:	4544      	cmp	r4, r8
 80081de:	d934      	bls.n	800824a <__hexnan+0x10e>
 80081e0:	4623      	mov	r3, r4
 80081e2:	f1a8 0204 	sub.w	r2, r8, #4
 80081e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80081ea:	429f      	cmp	r7, r3
 80081ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80081f0:	d2f9      	bcs.n	80081e6 <__hexnan+0xaa>
 80081f2:	1b3b      	subs	r3, r7, r4
 80081f4:	f023 0303 	bic.w	r3, r3, #3
 80081f8:	3304      	adds	r3, #4
 80081fa:	3401      	adds	r4, #1
 80081fc:	3e03      	subs	r6, #3
 80081fe:	42b4      	cmp	r4, r6
 8008200:	bf88      	it	hi
 8008202:	2304      	movhi	r3, #4
 8008204:	2200      	movs	r2, #0
 8008206:	4443      	add	r3, r8
 8008208:	f843 2b04 	str.w	r2, [r3], #4
 800820c:	429f      	cmp	r7, r3
 800820e:	d2fb      	bcs.n	8008208 <__hexnan+0xcc>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	b91b      	cbnz	r3, 800821c <__hexnan+0xe0>
 8008214:	4547      	cmp	r7, r8
 8008216:	d127      	bne.n	8008268 <__hexnan+0x12c>
 8008218:	2301      	movs	r3, #1
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	2005      	movs	r0, #5
 800821e:	e026      	b.n	800826e <__hexnan+0x132>
 8008220:	3501      	adds	r5, #1
 8008222:	2d08      	cmp	r5, #8
 8008224:	f10b 0b01 	add.w	fp, fp, #1
 8008228:	dd06      	ble.n	8008238 <__hexnan+0xfc>
 800822a:	4544      	cmp	r4, r8
 800822c:	d9c3      	bls.n	80081b6 <__hexnan+0x7a>
 800822e:	2300      	movs	r3, #0
 8008230:	2501      	movs	r5, #1
 8008232:	f844 3c04 	str.w	r3, [r4, #-4]
 8008236:	3c04      	subs	r4, #4
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	f000 000f 	and.w	r0, r0, #15
 800823e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008242:	6022      	str	r2, [r4, #0]
 8008244:	e7b7      	b.n	80081b6 <__hexnan+0x7a>
 8008246:	2508      	movs	r5, #8
 8008248:	e7b5      	b.n	80081b6 <__hexnan+0x7a>
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0df      	beq.n	8008210 <__hexnan+0xd4>
 8008250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008254:	f1c3 0320 	rsb	r3, r3, #32
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
 800825c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008260:	401a      	ands	r2, r3
 8008262:	f846 2c04 	str.w	r2, [r6, #-4]
 8008266:	e7d3      	b.n	8008210 <__hexnan+0xd4>
 8008268:	3f04      	subs	r7, #4
 800826a:	e7d1      	b.n	8008210 <__hexnan+0xd4>
 800826c:	2004      	movs	r0, #4
 800826e:	b007      	add	sp, #28
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008274 <_localeconv_r>:
 8008274:	4800      	ldr	r0, [pc, #0]	; (8008278 <_localeconv_r+0x4>)
 8008276:	4770      	bx	lr
 8008278:	20000168 	.word	0x20000168

0800827c <malloc>:
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <malloc+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 bd65 	b.w	8008d50 <_malloc_r>
 8008286:	bf00      	nop
 8008288:	20000010 	.word	0x20000010

0800828c <__ascii_mbtowc>:
 800828c:	b082      	sub	sp, #8
 800828e:	b901      	cbnz	r1, 8008292 <__ascii_mbtowc+0x6>
 8008290:	a901      	add	r1, sp, #4
 8008292:	b142      	cbz	r2, 80082a6 <__ascii_mbtowc+0x1a>
 8008294:	b14b      	cbz	r3, 80082aa <__ascii_mbtowc+0x1e>
 8008296:	7813      	ldrb	r3, [r2, #0]
 8008298:	600b      	str	r3, [r1, #0]
 800829a:	7812      	ldrb	r2, [r2, #0]
 800829c:	1e10      	subs	r0, r2, #0
 800829e:	bf18      	it	ne
 80082a0:	2001      	movne	r0, #1
 80082a2:	b002      	add	sp, #8
 80082a4:	4770      	bx	lr
 80082a6:	4610      	mov	r0, r2
 80082a8:	e7fb      	b.n	80082a2 <__ascii_mbtowc+0x16>
 80082aa:	f06f 0001 	mvn.w	r0, #1
 80082ae:	e7f8      	b.n	80082a2 <__ascii_mbtowc+0x16>

080082b0 <memchr>:
 80082b0:	4603      	mov	r3, r0
 80082b2:	b510      	push	{r4, lr}
 80082b4:	b2c9      	uxtb	r1, r1
 80082b6:	4402      	add	r2, r0
 80082b8:	4293      	cmp	r3, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	d101      	bne.n	80082c2 <memchr+0x12>
 80082be:	2000      	movs	r0, #0
 80082c0:	e003      	b.n	80082ca <memchr+0x1a>
 80082c2:	7804      	ldrb	r4, [r0, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	428c      	cmp	r4, r1
 80082c8:	d1f6      	bne.n	80082b8 <memchr+0x8>
 80082ca:	bd10      	pop	{r4, pc}

080082cc <memcpy>:
 80082cc:	440a      	add	r2, r1
 80082ce:	4291      	cmp	r1, r2
 80082d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082d4:	d100      	bne.n	80082d8 <memcpy+0xc>
 80082d6:	4770      	bx	lr
 80082d8:	b510      	push	{r4, lr}
 80082da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082de:	4291      	cmp	r1, r2
 80082e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e4:	d1f9      	bne.n	80082da <memcpy+0xe>
 80082e6:	bd10      	pop	{r4, pc}

080082e8 <_Balloc>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	b976      	cbnz	r6, 8008310 <_Balloc+0x28>
 80082f2:	2010      	movs	r0, #16
 80082f4:	f7ff ffc2 	bl	800827c <malloc>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6260      	str	r0, [r4, #36]	; 0x24
 80082fc:	b920      	cbnz	r0, 8008308 <_Balloc+0x20>
 80082fe:	2166      	movs	r1, #102	; 0x66
 8008300:	4b17      	ldr	r3, [pc, #92]	; (8008360 <_Balloc+0x78>)
 8008302:	4818      	ldr	r0, [pc, #96]	; (8008364 <_Balloc+0x7c>)
 8008304:	f7fe fda4 	bl	8006e50 <__assert_func>
 8008308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800830c:	6006      	str	r6, [r0, #0]
 800830e:	60c6      	str	r6, [r0, #12]
 8008310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008312:	68f3      	ldr	r3, [r6, #12]
 8008314:	b183      	cbz	r3, 8008338 <_Balloc+0x50>
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800831e:	b9b8      	cbnz	r0, 8008350 <_Balloc+0x68>
 8008320:	2101      	movs	r1, #1
 8008322:	fa01 f605 	lsl.w	r6, r1, r5
 8008326:	1d72      	adds	r2, r6, #5
 8008328:	4620      	mov	r0, r4
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	f000 fc94 	bl	8008c58 <_calloc_r>
 8008330:	b160      	cbz	r0, 800834c <_Balloc+0x64>
 8008332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008336:	e00e      	b.n	8008356 <_Balloc+0x6e>
 8008338:	2221      	movs	r2, #33	; 0x21
 800833a:	2104      	movs	r1, #4
 800833c:	4620      	mov	r0, r4
 800833e:	f000 fc8b 	bl	8008c58 <_calloc_r>
 8008342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008344:	60f0      	str	r0, [r6, #12]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <_Balloc+0x2e>
 800834c:	2000      	movs	r0, #0
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	6802      	ldr	r2, [r0, #0]
 8008352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008356:	2300      	movs	r3, #0
 8008358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800835c:	e7f7      	b.n	800834e <_Balloc+0x66>
 800835e:	bf00      	nop
 8008360:	08009d15 	.word	0x08009d15
 8008364:	0800a008 	.word	0x0800a008

08008368 <_Bfree>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800836c:	4605      	mov	r5, r0
 800836e:	460c      	mov	r4, r1
 8008370:	b976      	cbnz	r6, 8008390 <_Bfree+0x28>
 8008372:	2010      	movs	r0, #16
 8008374:	f7ff ff82 	bl	800827c <malloc>
 8008378:	4602      	mov	r2, r0
 800837a:	6268      	str	r0, [r5, #36]	; 0x24
 800837c:	b920      	cbnz	r0, 8008388 <_Bfree+0x20>
 800837e:	218a      	movs	r1, #138	; 0x8a
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <_Bfree+0x3c>)
 8008382:	4809      	ldr	r0, [pc, #36]	; (80083a8 <_Bfree+0x40>)
 8008384:	f7fe fd64 	bl	8006e50 <__assert_func>
 8008388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800838c:	6006      	str	r6, [r0, #0]
 800838e:	60c6      	str	r6, [r0, #12]
 8008390:	b13c      	cbz	r4, 80083a2 <_Bfree+0x3a>
 8008392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008394:	6862      	ldr	r2, [r4, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800839c:	6021      	str	r1, [r4, #0]
 800839e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	08009d15 	.word	0x08009d15
 80083a8:	0800a008 	.word	0x0800a008

080083ac <__multadd>:
 80083ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b0:	4607      	mov	r7, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	461e      	mov	r6, r3
 80083b6:	2000      	movs	r0, #0
 80083b8:	690d      	ldr	r5, [r1, #16]
 80083ba:	f101 0c14 	add.w	ip, r1, #20
 80083be:	f8dc 3000 	ldr.w	r3, [ip]
 80083c2:	3001      	adds	r0, #1
 80083c4:	b299      	uxth	r1, r3
 80083c6:	fb02 6101 	mla	r1, r2, r1, r6
 80083ca:	0c1e      	lsrs	r6, r3, #16
 80083cc:	0c0b      	lsrs	r3, r1, #16
 80083ce:	fb02 3306 	mla	r3, r2, r6, r3
 80083d2:	b289      	uxth	r1, r1
 80083d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083d8:	4285      	cmp	r5, r0
 80083da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083de:	f84c 1b04 	str.w	r1, [ip], #4
 80083e2:	dcec      	bgt.n	80083be <__multadd+0x12>
 80083e4:	b30e      	cbz	r6, 800842a <__multadd+0x7e>
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc19      	bgt.n	8008420 <__multadd+0x74>
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	4638      	mov	r0, r7
 80083f0:	3101      	adds	r1, #1
 80083f2:	f7ff ff79 	bl	80082e8 <_Balloc>
 80083f6:	4680      	mov	r8, r0
 80083f8:	b928      	cbnz	r0, 8008406 <__multadd+0x5a>
 80083fa:	4602      	mov	r2, r0
 80083fc:	21b5      	movs	r1, #181	; 0xb5
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <__multadd+0x84>)
 8008400:	480c      	ldr	r0, [pc, #48]	; (8008434 <__multadd+0x88>)
 8008402:	f7fe fd25 	bl	8006e50 <__assert_func>
 8008406:	6922      	ldr	r2, [r4, #16]
 8008408:	f104 010c 	add.w	r1, r4, #12
 800840c:	3202      	adds	r2, #2
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	300c      	adds	r0, #12
 8008412:	f7ff ff5b 	bl	80082cc <memcpy>
 8008416:	4621      	mov	r1, r4
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff ffa5 	bl	8008368 <_Bfree>
 800841e:	4644      	mov	r4, r8
 8008420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008424:	3501      	adds	r5, #1
 8008426:	615e      	str	r6, [r3, #20]
 8008428:	6125      	str	r5, [r4, #16]
 800842a:	4620      	mov	r0, r4
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	08009f7d 	.word	0x08009f7d
 8008434:	0800a008 	.word	0x0800a008

08008438 <__s2b>:
 8008438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800843c:	4615      	mov	r5, r2
 800843e:	2209      	movs	r2, #9
 8008440:	461f      	mov	r7, r3
 8008442:	3308      	adds	r3, #8
 8008444:	460c      	mov	r4, r1
 8008446:	fb93 f3f2 	sdiv	r3, r3, r2
 800844a:	4606      	mov	r6, r0
 800844c:	2201      	movs	r2, #1
 800844e:	2100      	movs	r1, #0
 8008450:	429a      	cmp	r2, r3
 8008452:	db09      	blt.n	8008468 <__s2b+0x30>
 8008454:	4630      	mov	r0, r6
 8008456:	f7ff ff47 	bl	80082e8 <_Balloc>
 800845a:	b940      	cbnz	r0, 800846e <__s2b+0x36>
 800845c:	4602      	mov	r2, r0
 800845e:	21ce      	movs	r1, #206	; 0xce
 8008460:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <__s2b+0x8c>)
 8008462:	4819      	ldr	r0, [pc, #100]	; (80084c8 <__s2b+0x90>)
 8008464:	f7fe fcf4 	bl	8006e50 <__assert_func>
 8008468:	0052      	lsls	r2, r2, #1
 800846a:	3101      	adds	r1, #1
 800846c:	e7f0      	b.n	8008450 <__s2b+0x18>
 800846e:	9b08      	ldr	r3, [sp, #32]
 8008470:	2d09      	cmp	r5, #9
 8008472:	6143      	str	r3, [r0, #20]
 8008474:	f04f 0301 	mov.w	r3, #1
 8008478:	6103      	str	r3, [r0, #16]
 800847a:	dd16      	ble.n	80084aa <__s2b+0x72>
 800847c:	f104 0909 	add.w	r9, r4, #9
 8008480:	46c8      	mov	r8, r9
 8008482:	442c      	add	r4, r5
 8008484:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008488:	4601      	mov	r1, r0
 800848a:	220a      	movs	r2, #10
 800848c:	4630      	mov	r0, r6
 800848e:	3b30      	subs	r3, #48	; 0x30
 8008490:	f7ff ff8c 	bl	80083ac <__multadd>
 8008494:	45a0      	cmp	r8, r4
 8008496:	d1f5      	bne.n	8008484 <__s2b+0x4c>
 8008498:	f1a5 0408 	sub.w	r4, r5, #8
 800849c:	444c      	add	r4, r9
 800849e:	1b2d      	subs	r5, r5, r4
 80084a0:	1963      	adds	r3, r4, r5
 80084a2:	42bb      	cmp	r3, r7
 80084a4:	db04      	blt.n	80084b0 <__s2b+0x78>
 80084a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084aa:	2509      	movs	r5, #9
 80084ac:	340a      	adds	r4, #10
 80084ae:	e7f6      	b.n	800849e <__s2b+0x66>
 80084b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084b4:	4601      	mov	r1, r0
 80084b6:	220a      	movs	r2, #10
 80084b8:	4630      	mov	r0, r6
 80084ba:	3b30      	subs	r3, #48	; 0x30
 80084bc:	f7ff ff76 	bl	80083ac <__multadd>
 80084c0:	e7ee      	b.n	80084a0 <__s2b+0x68>
 80084c2:	bf00      	nop
 80084c4:	08009f7d 	.word	0x08009f7d
 80084c8:	0800a008 	.word	0x0800a008

080084cc <__hi0bits>:
 80084cc:	0c02      	lsrs	r2, r0, #16
 80084ce:	0412      	lsls	r2, r2, #16
 80084d0:	4603      	mov	r3, r0
 80084d2:	b9ca      	cbnz	r2, 8008508 <__hi0bits+0x3c>
 80084d4:	0403      	lsls	r3, r0, #16
 80084d6:	2010      	movs	r0, #16
 80084d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084dc:	bf04      	itt	eq
 80084de:	021b      	lsleq	r3, r3, #8
 80084e0:	3008      	addeq	r0, #8
 80084e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084e6:	bf04      	itt	eq
 80084e8:	011b      	lsleq	r3, r3, #4
 80084ea:	3004      	addeq	r0, #4
 80084ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084f0:	bf04      	itt	eq
 80084f2:	009b      	lsleq	r3, r3, #2
 80084f4:	3002      	addeq	r0, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	db05      	blt.n	8008506 <__hi0bits+0x3a>
 80084fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80084fe:	f100 0001 	add.w	r0, r0, #1
 8008502:	bf08      	it	eq
 8008504:	2020      	moveq	r0, #32
 8008506:	4770      	bx	lr
 8008508:	2000      	movs	r0, #0
 800850a:	e7e5      	b.n	80084d8 <__hi0bits+0xc>

0800850c <__lo0bits>:
 800850c:	6803      	ldr	r3, [r0, #0]
 800850e:	4602      	mov	r2, r0
 8008510:	f013 0007 	ands.w	r0, r3, #7
 8008514:	d00b      	beq.n	800852e <__lo0bits+0x22>
 8008516:	07d9      	lsls	r1, r3, #31
 8008518:	d421      	bmi.n	800855e <__lo0bits+0x52>
 800851a:	0798      	lsls	r0, r3, #30
 800851c:	bf49      	itett	mi
 800851e:	085b      	lsrmi	r3, r3, #1
 8008520:	089b      	lsrpl	r3, r3, #2
 8008522:	2001      	movmi	r0, #1
 8008524:	6013      	strmi	r3, [r2, #0]
 8008526:	bf5c      	itt	pl
 8008528:	2002      	movpl	r0, #2
 800852a:	6013      	strpl	r3, [r2, #0]
 800852c:	4770      	bx	lr
 800852e:	b299      	uxth	r1, r3
 8008530:	b909      	cbnz	r1, 8008536 <__lo0bits+0x2a>
 8008532:	2010      	movs	r0, #16
 8008534:	0c1b      	lsrs	r3, r3, #16
 8008536:	b2d9      	uxtb	r1, r3
 8008538:	b909      	cbnz	r1, 800853e <__lo0bits+0x32>
 800853a:	3008      	adds	r0, #8
 800853c:	0a1b      	lsrs	r3, r3, #8
 800853e:	0719      	lsls	r1, r3, #28
 8008540:	bf04      	itt	eq
 8008542:	091b      	lsreq	r3, r3, #4
 8008544:	3004      	addeq	r0, #4
 8008546:	0799      	lsls	r1, r3, #30
 8008548:	bf04      	itt	eq
 800854a:	089b      	lsreq	r3, r3, #2
 800854c:	3002      	addeq	r0, #2
 800854e:	07d9      	lsls	r1, r3, #31
 8008550:	d403      	bmi.n	800855a <__lo0bits+0x4e>
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	f100 0001 	add.w	r0, r0, #1
 8008558:	d003      	beq.n	8008562 <__lo0bits+0x56>
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	4770      	bx	lr
 800855e:	2000      	movs	r0, #0
 8008560:	4770      	bx	lr
 8008562:	2020      	movs	r0, #32
 8008564:	4770      	bx	lr
	...

08008568 <__i2b>:
 8008568:	b510      	push	{r4, lr}
 800856a:	460c      	mov	r4, r1
 800856c:	2101      	movs	r1, #1
 800856e:	f7ff febb 	bl	80082e8 <_Balloc>
 8008572:	4602      	mov	r2, r0
 8008574:	b928      	cbnz	r0, 8008582 <__i2b+0x1a>
 8008576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800857a:	4b04      	ldr	r3, [pc, #16]	; (800858c <__i2b+0x24>)
 800857c:	4804      	ldr	r0, [pc, #16]	; (8008590 <__i2b+0x28>)
 800857e:	f7fe fc67 	bl	8006e50 <__assert_func>
 8008582:	2301      	movs	r3, #1
 8008584:	6144      	str	r4, [r0, #20]
 8008586:	6103      	str	r3, [r0, #16]
 8008588:	bd10      	pop	{r4, pc}
 800858a:	bf00      	nop
 800858c:	08009f7d 	.word	0x08009f7d
 8008590:	0800a008 	.word	0x0800a008

08008594 <__multiply>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	4691      	mov	r9, r2
 800859a:	690a      	ldr	r2, [r1, #16]
 800859c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085a0:	460c      	mov	r4, r1
 80085a2:	429a      	cmp	r2, r3
 80085a4:	bfbe      	ittt	lt
 80085a6:	460b      	movlt	r3, r1
 80085a8:	464c      	movlt	r4, r9
 80085aa:	4699      	movlt	r9, r3
 80085ac:	6927      	ldr	r7, [r4, #16]
 80085ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	eb07 060a 	add.w	r6, r7, sl
 80085ba:	42b3      	cmp	r3, r6
 80085bc:	b085      	sub	sp, #20
 80085be:	bfb8      	it	lt
 80085c0:	3101      	addlt	r1, #1
 80085c2:	f7ff fe91 	bl	80082e8 <_Balloc>
 80085c6:	b930      	cbnz	r0, 80085d6 <__multiply+0x42>
 80085c8:	4602      	mov	r2, r0
 80085ca:	f240 115d 	movw	r1, #349	; 0x15d
 80085ce:	4b43      	ldr	r3, [pc, #268]	; (80086dc <__multiply+0x148>)
 80085d0:	4843      	ldr	r0, [pc, #268]	; (80086e0 <__multiply+0x14c>)
 80085d2:	f7fe fc3d 	bl	8006e50 <__assert_func>
 80085d6:	f100 0514 	add.w	r5, r0, #20
 80085da:	462b      	mov	r3, r5
 80085dc:	2200      	movs	r2, #0
 80085de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085e2:	4543      	cmp	r3, r8
 80085e4:	d321      	bcc.n	800862a <__multiply+0x96>
 80085e6:	f104 0314 	add.w	r3, r4, #20
 80085ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085ee:	f109 0314 	add.w	r3, r9, #20
 80085f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085f6:	9202      	str	r2, [sp, #8]
 80085f8:	1b3a      	subs	r2, r7, r4
 80085fa:	3a15      	subs	r2, #21
 80085fc:	f022 0203 	bic.w	r2, r2, #3
 8008600:	3204      	adds	r2, #4
 8008602:	f104 0115 	add.w	r1, r4, #21
 8008606:	428f      	cmp	r7, r1
 8008608:	bf38      	it	cc
 800860a:	2204      	movcc	r2, #4
 800860c:	9201      	str	r2, [sp, #4]
 800860e:	9a02      	ldr	r2, [sp, #8]
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	429a      	cmp	r2, r3
 8008614:	d80c      	bhi.n	8008630 <__multiply+0x9c>
 8008616:	2e00      	cmp	r6, #0
 8008618:	dd03      	ble.n	8008622 <__multiply+0x8e>
 800861a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800861e:	2b00      	cmp	r3, #0
 8008620:	d059      	beq.n	80086d6 <__multiply+0x142>
 8008622:	6106      	str	r6, [r0, #16]
 8008624:	b005      	add	sp, #20
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	f843 2b04 	str.w	r2, [r3], #4
 800862e:	e7d8      	b.n	80085e2 <__multiply+0x4e>
 8008630:	f8b3 a000 	ldrh.w	sl, [r3]
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d023      	beq.n	8008682 <__multiply+0xee>
 800863a:	46a9      	mov	r9, r5
 800863c:	f04f 0c00 	mov.w	ip, #0
 8008640:	f104 0e14 	add.w	lr, r4, #20
 8008644:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008648:	f8d9 1000 	ldr.w	r1, [r9]
 800864c:	fa1f fb82 	uxth.w	fp, r2
 8008650:	b289      	uxth	r1, r1
 8008652:	fb0a 110b 	mla	r1, sl, fp, r1
 8008656:	4461      	add	r1, ip
 8008658:	f8d9 c000 	ldr.w	ip, [r9]
 800865c:	0c12      	lsrs	r2, r2, #16
 800865e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008662:	fb0a c202 	mla	r2, sl, r2, ip
 8008666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800866a:	b289      	uxth	r1, r1
 800866c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008670:	4577      	cmp	r7, lr
 8008672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008676:	f849 1b04 	str.w	r1, [r9], #4
 800867a:	d8e3      	bhi.n	8008644 <__multiply+0xb0>
 800867c:	9a01      	ldr	r2, [sp, #4]
 800867e:	f845 c002 	str.w	ip, [r5, r2]
 8008682:	9a03      	ldr	r2, [sp, #12]
 8008684:	3304      	adds	r3, #4
 8008686:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d020      	beq.n	80086d2 <__multiply+0x13e>
 8008690:	46ae      	mov	lr, r5
 8008692:	f04f 0a00 	mov.w	sl, #0
 8008696:	6829      	ldr	r1, [r5, #0]
 8008698:	f104 0c14 	add.w	ip, r4, #20
 800869c:	f8bc b000 	ldrh.w	fp, [ip]
 80086a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086a4:	b289      	uxth	r1, r1
 80086a6:	fb09 220b 	mla	r2, r9, fp, r2
 80086aa:	4492      	add	sl, r2
 80086ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086b0:	f84e 1b04 	str.w	r1, [lr], #4
 80086b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086b8:	f8be 1000 	ldrh.w	r1, [lr]
 80086bc:	0c12      	lsrs	r2, r2, #16
 80086be:	fb09 1102 	mla	r1, r9, r2, r1
 80086c2:	4567      	cmp	r7, ip
 80086c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086cc:	d8e6      	bhi.n	800869c <__multiply+0x108>
 80086ce:	9a01      	ldr	r2, [sp, #4]
 80086d0:	50a9      	str	r1, [r5, r2]
 80086d2:	3504      	adds	r5, #4
 80086d4:	e79b      	b.n	800860e <__multiply+0x7a>
 80086d6:	3e01      	subs	r6, #1
 80086d8:	e79d      	b.n	8008616 <__multiply+0x82>
 80086da:	bf00      	nop
 80086dc:	08009f7d 	.word	0x08009f7d
 80086e0:	0800a008 	.word	0x0800a008

080086e4 <__pow5mult>:
 80086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4615      	mov	r5, r2
 80086ea:	f012 0203 	ands.w	r2, r2, #3
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	d007      	beq.n	8008704 <__pow5mult+0x20>
 80086f4:	4c25      	ldr	r4, [pc, #148]	; (800878c <__pow5mult+0xa8>)
 80086f6:	3a01      	subs	r2, #1
 80086f8:	2300      	movs	r3, #0
 80086fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086fe:	f7ff fe55 	bl	80083ac <__multadd>
 8008702:	4607      	mov	r7, r0
 8008704:	10ad      	asrs	r5, r5, #2
 8008706:	d03d      	beq.n	8008784 <__pow5mult+0xa0>
 8008708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800870a:	b97c      	cbnz	r4, 800872c <__pow5mult+0x48>
 800870c:	2010      	movs	r0, #16
 800870e:	f7ff fdb5 	bl	800827c <malloc>
 8008712:	4602      	mov	r2, r0
 8008714:	6270      	str	r0, [r6, #36]	; 0x24
 8008716:	b928      	cbnz	r0, 8008724 <__pow5mult+0x40>
 8008718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800871c:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <__pow5mult+0xac>)
 800871e:	481d      	ldr	r0, [pc, #116]	; (8008794 <__pow5mult+0xb0>)
 8008720:	f7fe fb96 	bl	8006e50 <__assert_func>
 8008724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008728:	6004      	str	r4, [r0, #0]
 800872a:	60c4      	str	r4, [r0, #12]
 800872c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008734:	b94c      	cbnz	r4, 800874a <__pow5mult+0x66>
 8008736:	f240 2171 	movw	r1, #625	; 0x271
 800873a:	4630      	mov	r0, r6
 800873c:	f7ff ff14 	bl	8008568 <__i2b>
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	f8c8 0008 	str.w	r0, [r8, #8]
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	07eb      	lsls	r3, r5, #31
 8008750:	d50a      	bpl.n	8008768 <__pow5mult+0x84>
 8008752:	4639      	mov	r1, r7
 8008754:	4622      	mov	r2, r4
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ff1c 	bl	8008594 <__multiply>
 800875c:	4680      	mov	r8, r0
 800875e:	4639      	mov	r1, r7
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff fe01 	bl	8008368 <_Bfree>
 8008766:	4647      	mov	r7, r8
 8008768:	106d      	asrs	r5, r5, #1
 800876a:	d00b      	beq.n	8008784 <__pow5mult+0xa0>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	b938      	cbnz	r0, 8008780 <__pow5mult+0x9c>
 8008770:	4622      	mov	r2, r4
 8008772:	4621      	mov	r1, r4
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff ff0d 	bl	8008594 <__multiply>
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	f8c0 9000 	str.w	r9, [r0]
 8008780:	4604      	mov	r4, r0
 8008782:	e7e4      	b.n	800874e <__pow5mult+0x6a>
 8008784:	4638      	mov	r0, r7
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	bf00      	nop
 800878c:	0800a158 	.word	0x0800a158
 8008790:	08009d15 	.word	0x08009d15
 8008794:	0800a008 	.word	0x0800a008

08008798 <__lshift>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	4607      	mov	r7, r0
 80087a0:	4691      	mov	r9, r2
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	6849      	ldr	r1, [r1, #4]
 80087a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087b0:	f108 0601 	add.w	r6, r8, #1
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	db0b      	blt.n	80087d0 <__lshift+0x38>
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff fd95 	bl	80082e8 <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b948      	cbnz	r0, 80087d6 <__lshift+0x3e>
 80087c2:	4602      	mov	r2, r0
 80087c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087c8:	4b29      	ldr	r3, [pc, #164]	; (8008870 <__lshift+0xd8>)
 80087ca:	482a      	ldr	r0, [pc, #168]	; (8008874 <__lshift+0xdc>)
 80087cc:	f7fe fb40 	bl	8006e50 <__assert_func>
 80087d0:	3101      	adds	r1, #1
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	e7ee      	b.n	80087b4 <__lshift+0x1c>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f100 0114 	add.w	r1, r0, #20
 80087dc:	f100 0210 	add.w	r2, r0, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	4553      	cmp	r3, sl
 80087e4:	db37      	blt.n	8008856 <__lshift+0xbe>
 80087e6:	6920      	ldr	r0, [r4, #16]
 80087e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087ec:	f104 0314 	add.w	r3, r4, #20
 80087f0:	f019 091f 	ands.w	r9, r9, #31
 80087f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087fc:	d02f      	beq.n	800885e <__lshift+0xc6>
 80087fe:	468a      	mov	sl, r1
 8008800:	f04f 0c00 	mov.w	ip, #0
 8008804:	f1c9 0e20 	rsb	lr, r9, #32
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	fa02 f209 	lsl.w	r2, r2, r9
 800880e:	ea42 020c 	orr.w	r2, r2, ip
 8008812:	f84a 2b04 	str.w	r2, [sl], #4
 8008816:	f853 2b04 	ldr.w	r2, [r3], #4
 800881a:	4298      	cmp	r0, r3
 800881c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008820:	d8f2      	bhi.n	8008808 <__lshift+0x70>
 8008822:	1b03      	subs	r3, r0, r4
 8008824:	3b15      	subs	r3, #21
 8008826:	f023 0303 	bic.w	r3, r3, #3
 800882a:	3304      	adds	r3, #4
 800882c:	f104 0215 	add.w	r2, r4, #21
 8008830:	4290      	cmp	r0, r2
 8008832:	bf38      	it	cc
 8008834:	2304      	movcc	r3, #4
 8008836:	f841 c003 	str.w	ip, [r1, r3]
 800883a:	f1bc 0f00 	cmp.w	ip, #0
 800883e:	d001      	beq.n	8008844 <__lshift+0xac>
 8008840:	f108 0602 	add.w	r6, r8, #2
 8008844:	3e01      	subs	r6, #1
 8008846:	4638      	mov	r0, r7
 8008848:	4621      	mov	r1, r4
 800884a:	612e      	str	r6, [r5, #16]
 800884c:	f7ff fd8c 	bl	8008368 <_Bfree>
 8008850:	4628      	mov	r0, r5
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	f842 0f04 	str.w	r0, [r2, #4]!
 800885a:	3301      	adds	r3, #1
 800885c:	e7c1      	b.n	80087e2 <__lshift+0x4a>
 800885e:	3904      	subs	r1, #4
 8008860:	f853 2b04 	ldr.w	r2, [r3], #4
 8008864:	4298      	cmp	r0, r3
 8008866:	f841 2f04 	str.w	r2, [r1, #4]!
 800886a:	d8f9      	bhi.n	8008860 <__lshift+0xc8>
 800886c:	e7ea      	b.n	8008844 <__lshift+0xac>
 800886e:	bf00      	nop
 8008870:	08009f7d 	.word	0x08009f7d
 8008874:	0800a008 	.word	0x0800a008

08008878 <__mcmp>:
 8008878:	4603      	mov	r3, r0
 800887a:	690a      	ldr	r2, [r1, #16]
 800887c:	6900      	ldr	r0, [r0, #16]
 800887e:	b530      	push	{r4, r5, lr}
 8008880:	1a80      	subs	r0, r0, r2
 8008882:	d10d      	bne.n	80088a0 <__mcmp+0x28>
 8008884:	3314      	adds	r3, #20
 8008886:	3114      	adds	r1, #20
 8008888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800888c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008898:	4295      	cmp	r5, r2
 800889a:	d002      	beq.n	80088a2 <__mcmp+0x2a>
 800889c:	d304      	bcc.n	80088a8 <__mcmp+0x30>
 800889e:	2001      	movs	r0, #1
 80088a0:	bd30      	pop	{r4, r5, pc}
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	d3f4      	bcc.n	8008890 <__mcmp+0x18>
 80088a6:	e7fb      	b.n	80088a0 <__mcmp+0x28>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ac:	e7f8      	b.n	80088a0 <__mcmp+0x28>
	...

080088b0 <__mdiff>:
 80088b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	460d      	mov	r5, r1
 80088b6:	4607      	mov	r7, r0
 80088b8:	4611      	mov	r1, r2
 80088ba:	4628      	mov	r0, r5
 80088bc:	4614      	mov	r4, r2
 80088be:	f7ff ffdb 	bl	8008878 <__mcmp>
 80088c2:	1e06      	subs	r6, r0, #0
 80088c4:	d111      	bne.n	80088ea <__mdiff+0x3a>
 80088c6:	4631      	mov	r1, r6
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff fd0d 	bl	80082e8 <_Balloc>
 80088ce:	4602      	mov	r2, r0
 80088d0:	b928      	cbnz	r0, 80088de <__mdiff+0x2e>
 80088d2:	f240 2132 	movw	r1, #562	; 0x232
 80088d6:	4b3a      	ldr	r3, [pc, #232]	; (80089c0 <__mdiff+0x110>)
 80088d8:	483a      	ldr	r0, [pc, #232]	; (80089c4 <__mdiff+0x114>)
 80088da:	f7fe fab9 	bl	8006e50 <__assert_func>
 80088de:	2301      	movs	r3, #1
 80088e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80088e4:	4610      	mov	r0, r2
 80088e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ea:	bfa4      	itt	ge
 80088ec:	4623      	movge	r3, r4
 80088ee:	462c      	movge	r4, r5
 80088f0:	4638      	mov	r0, r7
 80088f2:	6861      	ldr	r1, [r4, #4]
 80088f4:	bfa6      	itte	ge
 80088f6:	461d      	movge	r5, r3
 80088f8:	2600      	movge	r6, #0
 80088fa:	2601      	movlt	r6, #1
 80088fc:	f7ff fcf4 	bl	80082e8 <_Balloc>
 8008900:	4602      	mov	r2, r0
 8008902:	b918      	cbnz	r0, 800890c <__mdiff+0x5c>
 8008904:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008908:	4b2d      	ldr	r3, [pc, #180]	; (80089c0 <__mdiff+0x110>)
 800890a:	e7e5      	b.n	80088d8 <__mdiff+0x28>
 800890c:	f102 0814 	add.w	r8, r2, #20
 8008910:	46c2      	mov	sl, r8
 8008912:	f04f 0c00 	mov.w	ip, #0
 8008916:	6927      	ldr	r7, [r4, #16]
 8008918:	60c6      	str	r6, [r0, #12]
 800891a:	692e      	ldr	r6, [r5, #16]
 800891c:	f104 0014 	add.w	r0, r4, #20
 8008920:	f105 0914 	add.w	r9, r5, #20
 8008924:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800892c:	3410      	adds	r4, #16
 800892e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008932:	f859 3b04 	ldr.w	r3, [r9], #4
 8008936:	fa1f f18b 	uxth.w	r1, fp
 800893a:	448c      	add	ip, r1
 800893c:	b299      	uxth	r1, r3
 800893e:	0c1b      	lsrs	r3, r3, #16
 8008940:	ebac 0101 	sub.w	r1, ip, r1
 8008944:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008948:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800894c:	b289      	uxth	r1, r1
 800894e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008952:	454e      	cmp	r6, r9
 8008954:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008958:	f84a 3b04 	str.w	r3, [sl], #4
 800895c:	d8e7      	bhi.n	800892e <__mdiff+0x7e>
 800895e:	1b73      	subs	r3, r6, r5
 8008960:	3b15      	subs	r3, #21
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	3515      	adds	r5, #21
 8008968:	3304      	adds	r3, #4
 800896a:	42ae      	cmp	r6, r5
 800896c:	bf38      	it	cc
 800896e:	2304      	movcc	r3, #4
 8008970:	4418      	add	r0, r3
 8008972:	4443      	add	r3, r8
 8008974:	461e      	mov	r6, r3
 8008976:	4605      	mov	r5, r0
 8008978:	4575      	cmp	r5, lr
 800897a:	d30e      	bcc.n	800899a <__mdiff+0xea>
 800897c:	f10e 0103 	add.w	r1, lr, #3
 8008980:	1a09      	subs	r1, r1, r0
 8008982:	f021 0103 	bic.w	r1, r1, #3
 8008986:	3803      	subs	r0, #3
 8008988:	4586      	cmp	lr, r0
 800898a:	bf38      	it	cc
 800898c:	2100      	movcc	r1, #0
 800898e:	4419      	add	r1, r3
 8008990:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008994:	b18b      	cbz	r3, 80089ba <__mdiff+0x10a>
 8008996:	6117      	str	r7, [r2, #16]
 8008998:	e7a4      	b.n	80088e4 <__mdiff+0x34>
 800899a:	f855 8b04 	ldr.w	r8, [r5], #4
 800899e:	fa1f f188 	uxth.w	r1, r8
 80089a2:	4461      	add	r1, ip
 80089a4:	140c      	asrs	r4, r1, #16
 80089a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089aa:	b289      	uxth	r1, r1
 80089ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80089b4:	f846 1b04 	str.w	r1, [r6], #4
 80089b8:	e7de      	b.n	8008978 <__mdiff+0xc8>
 80089ba:	3f01      	subs	r7, #1
 80089bc:	e7e8      	b.n	8008990 <__mdiff+0xe0>
 80089be:	bf00      	nop
 80089c0:	08009f7d 	.word	0x08009f7d
 80089c4:	0800a008 	.word	0x0800a008

080089c8 <__ulp>:
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <__ulp+0x48>)
 80089ca:	400b      	ands	r3, r1
 80089cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	dd02      	ble.n	80089da <__ulp+0x12>
 80089d4:	2000      	movs	r0, #0
 80089d6:	4619      	mov	r1, r3
 80089d8:	4770      	bx	lr
 80089da:	425b      	negs	r3, r3
 80089dc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80089e0:	f04f 0000 	mov.w	r0, #0
 80089e4:	f04f 0100 	mov.w	r1, #0
 80089e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089ec:	da04      	bge.n	80089f8 <__ulp+0x30>
 80089ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089f2:	fa43 f102 	asr.w	r1, r3, r2
 80089f6:	4770      	bx	lr
 80089f8:	f1a2 0314 	sub.w	r3, r2, #20
 80089fc:	2b1e      	cmp	r3, #30
 80089fe:	bfd6      	itet	le
 8008a00:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008a04:	2301      	movgt	r3, #1
 8008a06:	fa22 f303 	lsrle.w	r3, r2, r3
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	7ff00000 	.word	0x7ff00000

08008a14 <__b2d>:
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	6907      	ldr	r7, [r0, #16]
 8008a1a:	f100 0914 	add.w	r9, r0, #20
 8008a1e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008a22:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008a26:	f1a7 0804 	sub.w	r8, r7, #4
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff fd4e 	bl	80084cc <__hi0bits>
 8008a30:	f1c0 0320 	rsb	r3, r0, #32
 8008a34:	280a      	cmp	r0, #10
 8008a36:	600b      	str	r3, [r1, #0]
 8008a38:	491f      	ldr	r1, [pc, #124]	; (8008ab8 <__b2d+0xa4>)
 8008a3a:	dc17      	bgt.n	8008a6c <__b2d+0x58>
 8008a3c:	45c1      	cmp	r9, r8
 8008a3e:	bf28      	it	cs
 8008a40:	2200      	movcs	r2, #0
 8008a42:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a46:	fa26 f30c 	lsr.w	r3, r6, ip
 8008a4a:	bf38      	it	cc
 8008a4c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008a50:	ea43 0501 	orr.w	r5, r3, r1
 8008a54:	f100 0315 	add.w	r3, r0, #21
 8008a58:	fa06 f303 	lsl.w	r3, r6, r3
 8008a5c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008a60:	ea43 0402 	orr.w	r4, r3, r2
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6c:	45c1      	cmp	r9, r8
 8008a6e:	bf2e      	itee	cs
 8008a70:	2200      	movcs	r2, #0
 8008a72:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008a76:	f1a7 0808 	subcc.w	r8, r7, #8
 8008a7a:	f1b0 030b 	subs.w	r3, r0, #11
 8008a7e:	d016      	beq.n	8008aae <__b2d+0x9a>
 8008a80:	f1c3 0720 	rsb	r7, r3, #32
 8008a84:	fa22 f107 	lsr.w	r1, r2, r7
 8008a88:	45c8      	cmp	r8, r9
 8008a8a:	fa06 f603 	lsl.w	r6, r6, r3
 8008a8e:	ea46 0601 	orr.w	r6, r6, r1
 8008a92:	bf94      	ite	ls
 8008a94:	2100      	movls	r1, #0
 8008a96:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008a9a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008a9e:	fa02 f003 	lsl.w	r0, r2, r3
 8008aa2:	40f9      	lsrs	r1, r7
 8008aa4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008aa8:	ea40 0401 	orr.w	r4, r0, r1
 8008aac:	e7da      	b.n	8008a64 <__b2d+0x50>
 8008aae:	4614      	mov	r4, r2
 8008ab0:	ea46 0501 	orr.w	r5, r6, r1
 8008ab4:	e7d6      	b.n	8008a64 <__b2d+0x50>
 8008ab6:	bf00      	nop
 8008ab8:	3ff00000 	.word	0x3ff00000

08008abc <__d2b>:
 8008abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008ac6:	4690      	mov	r8, r2
 8008ac8:	461d      	mov	r5, r3
 8008aca:	f7ff fc0d 	bl	80082e8 <_Balloc>
 8008ace:	4604      	mov	r4, r0
 8008ad0:	b930      	cbnz	r0, 8008ae0 <__d2b+0x24>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	f240 310a 	movw	r1, #778	; 0x30a
 8008ad8:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <__d2b+0xb0>)
 8008ada:	4825      	ldr	r0, [pc, #148]	; (8008b70 <__d2b+0xb4>)
 8008adc:	f7fe f9b8 	bl	8006e50 <__assert_func>
 8008ae0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008ae4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008ae8:	bb2d      	cbnz	r5, 8008b36 <__d2b+0x7a>
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	f1b8 0300 	subs.w	r3, r8, #0
 8008af0:	d026      	beq.n	8008b40 <__d2b+0x84>
 8008af2:	4668      	mov	r0, sp
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	f7ff fd09 	bl	800850c <__lo0bits>
 8008afa:	9900      	ldr	r1, [sp, #0]
 8008afc:	b1f0      	cbz	r0, 8008b3c <__d2b+0x80>
 8008afe:	9a01      	ldr	r2, [sp, #4]
 8008b00:	f1c0 0320 	rsb	r3, r0, #32
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	40c2      	lsrs	r2, r0
 8008b0c:	6163      	str	r3, [r4, #20]
 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	bf14      	ite	ne
 8008b16:	2102      	movne	r1, #2
 8008b18:	2101      	moveq	r1, #1
 8008b1a:	61a3      	str	r3, [r4, #24]
 8008b1c:	6121      	str	r1, [r4, #16]
 8008b1e:	b1c5      	cbz	r5, 8008b52 <__d2b+0x96>
 8008b20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b24:	4405      	add	r5, r0
 8008b26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b2a:	603d      	str	r5, [r7, #0]
 8008b2c:	6030      	str	r0, [r6, #0]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	b002      	add	sp, #8
 8008b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b3a:	e7d6      	b.n	8008aea <__d2b+0x2e>
 8008b3c:	6161      	str	r1, [r4, #20]
 8008b3e:	e7e7      	b.n	8008b10 <__d2b+0x54>
 8008b40:	a801      	add	r0, sp, #4
 8008b42:	f7ff fce3 	bl	800850c <__lo0bits>
 8008b46:	2101      	movs	r1, #1
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	6121      	str	r1, [r4, #16]
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	3020      	adds	r0, #32
 8008b50:	e7e5      	b.n	8008b1e <__d2b+0x62>
 8008b52:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b5a:	6038      	str	r0, [r7, #0]
 8008b5c:	6918      	ldr	r0, [r3, #16]
 8008b5e:	f7ff fcb5 	bl	80084cc <__hi0bits>
 8008b62:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008b66:	6031      	str	r1, [r6, #0]
 8008b68:	e7e1      	b.n	8008b2e <__d2b+0x72>
 8008b6a:	bf00      	nop
 8008b6c:	08009f7d 	.word	0x08009f7d
 8008b70:	0800a008 	.word	0x0800a008

08008b74 <__ratio>:
 8008b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4688      	mov	r8, r1
 8008b7a:	4669      	mov	r1, sp
 8008b7c:	4681      	mov	r9, r0
 8008b7e:	f7ff ff49 	bl	8008a14 <__b2d>
 8008b82:	460f      	mov	r7, r1
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	4640      	mov	r0, r8
 8008b8a:	a901      	add	r1, sp, #4
 8008b8c:	f7ff ff42 	bl	8008a14 <__b2d>
 8008b90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b98:	468b      	mov	fp, r1
 8008b9a:	eba3 0c02 	sub.w	ip, r3, r2
 8008b9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ba2:	1a9b      	subs	r3, r3, r2
 8008ba4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bfd5      	itete	le
 8008bac:	460a      	movle	r2, r1
 8008bae:	462a      	movgt	r2, r5
 8008bb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008bb4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008bb8:	bfd8      	it	le
 8008bba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008bbe:	465b      	mov	r3, fp
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f7f7 fdb1 	bl	800072c <__aeabi_ddiv>
 8008bca:	b003      	add	sp, #12
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bd0 <__copybits>:
 8008bd0:	3901      	subs	r1, #1
 8008bd2:	b570      	push	{r4, r5, r6, lr}
 8008bd4:	1149      	asrs	r1, r1, #5
 8008bd6:	6914      	ldr	r4, [r2, #16]
 8008bd8:	3101      	adds	r1, #1
 8008bda:	f102 0314 	add.w	r3, r2, #20
 8008bde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008be2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008be6:	1f05      	subs	r5, r0, #4
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	d30c      	bcc.n	8008c06 <__copybits+0x36>
 8008bec:	1aa3      	subs	r3, r4, r2
 8008bee:	3b11      	subs	r3, #17
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	3211      	adds	r2, #17
 8008bf6:	42a2      	cmp	r2, r4
 8008bf8:	bf88      	it	hi
 8008bfa:	2300      	movhi	r3, #0
 8008bfc:	4418      	add	r0, r3
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4288      	cmp	r0, r1
 8008c02:	d305      	bcc.n	8008c10 <__copybits+0x40>
 8008c04:	bd70      	pop	{r4, r5, r6, pc}
 8008c06:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c0e:	e7eb      	b.n	8008be8 <__copybits+0x18>
 8008c10:	f840 3b04 	str.w	r3, [r0], #4
 8008c14:	e7f4      	b.n	8008c00 <__copybits+0x30>

08008c16 <__any_on>:
 8008c16:	f100 0214 	add.w	r2, r0, #20
 8008c1a:	6900      	ldr	r0, [r0, #16]
 8008c1c:	114b      	asrs	r3, r1, #5
 8008c1e:	4298      	cmp	r0, r3
 8008c20:	b510      	push	{r4, lr}
 8008c22:	db11      	blt.n	8008c48 <__any_on+0x32>
 8008c24:	dd0a      	ble.n	8008c3c <__any_on+0x26>
 8008c26:	f011 011f 	ands.w	r1, r1, #31
 8008c2a:	d007      	beq.n	8008c3c <__any_on+0x26>
 8008c2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c30:	fa24 f001 	lsr.w	r0, r4, r1
 8008c34:	fa00 f101 	lsl.w	r1, r0, r1
 8008c38:	428c      	cmp	r4, r1
 8008c3a:	d10b      	bne.n	8008c54 <__any_on+0x3e>
 8008c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d803      	bhi.n	8008c4c <__any_on+0x36>
 8008c44:	2000      	movs	r0, #0
 8008c46:	bd10      	pop	{r4, pc}
 8008c48:	4603      	mov	r3, r0
 8008c4a:	e7f7      	b.n	8008c3c <__any_on+0x26>
 8008c4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c50:	2900      	cmp	r1, #0
 8008c52:	d0f5      	beq.n	8008c40 <__any_on+0x2a>
 8008c54:	2001      	movs	r0, #1
 8008c56:	e7f6      	b.n	8008c46 <__any_on+0x30>

08008c58 <_calloc_r>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008c5e:	b934      	cbnz	r4, 8008c6e <_calloc_r+0x16>
 8008c60:	4629      	mov	r1, r5
 8008c62:	f000 f875 	bl	8008d50 <_malloc_r>
 8008c66:	4606      	mov	r6, r0
 8008c68:	b928      	cbnz	r0, 8008c76 <_calloc_r+0x1e>
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	220c      	movs	r2, #12
 8008c70:	2600      	movs	r6, #0
 8008c72:	6002      	str	r2, [r0, #0]
 8008c74:	e7f9      	b.n	8008c6a <_calloc_r+0x12>
 8008c76:	462a      	mov	r2, r5
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7fc fb21 	bl	80052c0 <memset>
 8008c7e:	e7f4      	b.n	8008c6a <_calloc_r+0x12>

08008c80 <_free_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4605      	mov	r5, r0
 8008c84:	2900      	cmp	r1, #0
 8008c86:	d040      	beq.n	8008d0a <_free_r+0x8a>
 8008c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8c:	1f0c      	subs	r4, r1, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	bfb8      	it	lt
 8008c92:	18e4      	addlt	r4, r4, r3
 8008c94:	f000 feba 	bl	8009a0c <__malloc_lock>
 8008c98:	4a1c      	ldr	r2, [pc, #112]	; (8008d0c <_free_r+0x8c>)
 8008c9a:	6813      	ldr	r3, [r2, #0]
 8008c9c:	b933      	cbnz	r3, 8008cac <_free_r+0x2c>
 8008c9e:	6063      	str	r3, [r4, #4]
 8008ca0:	6014      	str	r4, [r2, #0]
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca8:	f000 beb6 	b.w	8009a18 <__malloc_unlock>
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d908      	bls.n	8008cc2 <_free_r+0x42>
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	1821      	adds	r1, r4, r0
 8008cb4:	428b      	cmp	r3, r1
 8008cb6:	bf01      	itttt	eq
 8008cb8:	6819      	ldreq	r1, [r3, #0]
 8008cba:	685b      	ldreq	r3, [r3, #4]
 8008cbc:	1809      	addeq	r1, r1, r0
 8008cbe:	6021      	streq	r1, [r4, #0]
 8008cc0:	e7ed      	b.n	8008c9e <_free_r+0x1e>
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	b10b      	cbz	r3, 8008ccc <_free_r+0x4c>
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	d9fa      	bls.n	8008cc2 <_free_r+0x42>
 8008ccc:	6811      	ldr	r1, [r2, #0]
 8008cce:	1850      	adds	r0, r2, r1
 8008cd0:	42a0      	cmp	r0, r4
 8008cd2:	d10b      	bne.n	8008cec <_free_r+0x6c>
 8008cd4:	6820      	ldr	r0, [r4, #0]
 8008cd6:	4401      	add	r1, r0
 8008cd8:	1850      	adds	r0, r2, r1
 8008cda:	4283      	cmp	r3, r0
 8008cdc:	6011      	str	r1, [r2, #0]
 8008cde:	d1e0      	bne.n	8008ca2 <_free_r+0x22>
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4401      	add	r1, r0
 8008ce6:	6011      	str	r1, [r2, #0]
 8008ce8:	6053      	str	r3, [r2, #4]
 8008cea:	e7da      	b.n	8008ca2 <_free_r+0x22>
 8008cec:	d902      	bls.n	8008cf4 <_free_r+0x74>
 8008cee:	230c      	movs	r3, #12
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	e7d6      	b.n	8008ca2 <_free_r+0x22>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	1821      	adds	r1, r4, r0
 8008cf8:	428b      	cmp	r3, r1
 8008cfa:	bf01      	itttt	eq
 8008cfc:	6819      	ldreq	r1, [r3, #0]
 8008cfe:	685b      	ldreq	r3, [r3, #4]
 8008d00:	1809      	addeq	r1, r1, r0
 8008d02:	6021      	streq	r1, [r4, #0]
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	6054      	str	r4, [r2, #4]
 8008d08:	e7cb      	b.n	8008ca2 <_free_r+0x22>
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	2000037c 	.word	0x2000037c

08008d10 <sbrk_aligned>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4e0e      	ldr	r6, [pc, #56]	; (8008d4c <sbrk_aligned+0x3c>)
 8008d14:	460c      	mov	r4, r1
 8008d16:	6831      	ldr	r1, [r6, #0]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	b911      	cbnz	r1, 8008d22 <sbrk_aligned+0x12>
 8008d1c:	f000 fb46 	bl	80093ac <_sbrk_r>
 8008d20:	6030      	str	r0, [r6, #0]
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 fb41 	bl	80093ac <_sbrk_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d00a      	beq.n	8008d44 <sbrk_aligned+0x34>
 8008d2e:	1cc4      	adds	r4, r0, #3
 8008d30:	f024 0403 	bic.w	r4, r4, #3
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d007      	beq.n	8008d48 <sbrk_aligned+0x38>
 8008d38:	1a21      	subs	r1, r4, r0
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 fb36 	bl	80093ac <_sbrk_r>
 8008d40:	3001      	adds	r0, #1
 8008d42:	d101      	bne.n	8008d48 <sbrk_aligned+0x38>
 8008d44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	20000380 	.word	0x20000380

08008d50 <_malloc_r>:
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	1ccd      	adds	r5, r1, #3
 8008d56:	f025 0503 	bic.w	r5, r5, #3
 8008d5a:	3508      	adds	r5, #8
 8008d5c:	2d0c      	cmp	r5, #12
 8008d5e:	bf38      	it	cc
 8008d60:	250c      	movcc	r5, #12
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	4607      	mov	r7, r0
 8008d66:	db01      	blt.n	8008d6c <_malloc_r+0x1c>
 8008d68:	42a9      	cmp	r1, r5
 8008d6a:	d905      	bls.n	8008d78 <_malloc_r+0x28>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	2600      	movs	r6, #0
 8008d70:	603b      	str	r3, [r7, #0]
 8008d72:	4630      	mov	r0, r6
 8008d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d78:	4e2e      	ldr	r6, [pc, #184]	; (8008e34 <_malloc_r+0xe4>)
 8008d7a:	f000 fe47 	bl	8009a0c <__malloc_lock>
 8008d7e:	6833      	ldr	r3, [r6, #0]
 8008d80:	461c      	mov	r4, r3
 8008d82:	bb34      	cbnz	r4, 8008dd2 <_malloc_r+0x82>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ffc2 	bl	8008d10 <sbrk_aligned>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	4604      	mov	r4, r0
 8008d90:	d14d      	bne.n	8008e2e <_malloc_r+0xde>
 8008d92:	6834      	ldr	r4, [r6, #0]
 8008d94:	4626      	mov	r6, r4
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	d140      	bne.n	8008e1c <_malloc_r+0xcc>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4638      	mov	r0, r7
 8008da0:	eb04 0803 	add.w	r8, r4, r3
 8008da4:	f000 fb02 	bl	80093ac <_sbrk_r>
 8008da8:	4580      	cmp	r8, r0
 8008daa:	d13a      	bne.n	8008e22 <_malloc_r+0xd2>
 8008dac:	6821      	ldr	r1, [r4, #0]
 8008dae:	3503      	adds	r5, #3
 8008db0:	1a6d      	subs	r5, r5, r1
 8008db2:	f025 0503 	bic.w	r5, r5, #3
 8008db6:	3508      	adds	r5, #8
 8008db8:	2d0c      	cmp	r5, #12
 8008dba:	bf38      	it	cc
 8008dbc:	250c      	movcc	r5, #12
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7ff ffa5 	bl	8008d10 <sbrk_aligned>
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d02b      	beq.n	8008e22 <_malloc_r+0xd2>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	442b      	add	r3, r5
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	e00e      	b.n	8008df0 <_malloc_r+0xa0>
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	1b52      	subs	r2, r2, r5
 8008dd6:	d41e      	bmi.n	8008e16 <_malloc_r+0xc6>
 8008dd8:	2a0b      	cmp	r2, #11
 8008dda:	d916      	bls.n	8008e0a <_malloc_r+0xba>
 8008ddc:	1961      	adds	r1, r4, r5
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	6025      	str	r5, [r4, #0]
 8008de2:	bf18      	it	ne
 8008de4:	6059      	strne	r1, [r3, #4]
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	bf08      	it	eq
 8008dea:	6031      	streq	r1, [r6, #0]
 8008dec:	5162      	str	r2, [r4, r5]
 8008dee:	604b      	str	r3, [r1, #4]
 8008df0:	4638      	mov	r0, r7
 8008df2:	f104 060b 	add.w	r6, r4, #11
 8008df6:	f000 fe0f 	bl	8009a18 <__malloc_unlock>
 8008dfa:	f026 0607 	bic.w	r6, r6, #7
 8008dfe:	1d23      	adds	r3, r4, #4
 8008e00:	1af2      	subs	r2, r6, r3
 8008e02:	d0b6      	beq.n	8008d72 <_malloc_r+0x22>
 8008e04:	1b9b      	subs	r3, r3, r6
 8008e06:	50a3      	str	r3, [r4, r2]
 8008e08:	e7b3      	b.n	8008d72 <_malloc_r+0x22>
 8008e0a:	6862      	ldr	r2, [r4, #4]
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	bf0c      	ite	eq
 8008e10:	6032      	streq	r2, [r6, #0]
 8008e12:	605a      	strne	r2, [r3, #4]
 8008e14:	e7ec      	b.n	8008df0 <_malloc_r+0xa0>
 8008e16:	4623      	mov	r3, r4
 8008e18:	6864      	ldr	r4, [r4, #4]
 8008e1a:	e7b2      	b.n	8008d82 <_malloc_r+0x32>
 8008e1c:	4634      	mov	r4, r6
 8008e1e:	6876      	ldr	r6, [r6, #4]
 8008e20:	e7b9      	b.n	8008d96 <_malloc_r+0x46>
 8008e22:	230c      	movs	r3, #12
 8008e24:	4638      	mov	r0, r7
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	f000 fdf6 	bl	8009a18 <__malloc_unlock>
 8008e2c:	e7a1      	b.n	8008d72 <_malloc_r+0x22>
 8008e2e:	6025      	str	r5, [r4, #0]
 8008e30:	e7de      	b.n	8008df0 <_malloc_r+0xa0>
 8008e32:	bf00      	nop
 8008e34:	2000037c 	.word	0x2000037c

08008e38 <__ssputs_r>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	688e      	ldr	r6, [r1, #8]
 8008e3e:	4682      	mov	sl, r0
 8008e40:	429e      	cmp	r6, r3
 8008e42:	460c      	mov	r4, r1
 8008e44:	4690      	mov	r8, r2
 8008e46:	461f      	mov	r7, r3
 8008e48:	d838      	bhi.n	8008ebc <__ssputs_r+0x84>
 8008e4a:	898a      	ldrh	r2, [r1, #12]
 8008e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e50:	d032      	beq.n	8008eb8 <__ssputs_r+0x80>
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	6909      	ldr	r1, [r1, #16]
 8008e56:	3301      	adds	r3, #1
 8008e58:	eba5 0901 	sub.w	r9, r5, r1
 8008e5c:	6965      	ldr	r5, [r4, #20]
 8008e5e:	444b      	add	r3, r9
 8008e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e68:	106d      	asrs	r5, r5, #1
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	bf38      	it	cc
 8008e6e:	461d      	movcc	r5, r3
 8008e70:	0553      	lsls	r3, r2, #21
 8008e72:	d531      	bpl.n	8008ed8 <__ssputs_r+0xa0>
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7ff ff6b 	bl	8008d50 <_malloc_r>
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	b950      	cbnz	r0, 8008e94 <__ssputs_r+0x5c>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e84:	f8ca 3000 	str.w	r3, [sl]
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e94:	464a      	mov	r2, r9
 8008e96:	6921      	ldr	r1, [r4, #16]
 8008e98:	f7ff fa18 	bl	80082cc <memcpy>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	6126      	str	r6, [r4, #16]
 8008eaa:	444e      	add	r6, r9
 8008eac:	6026      	str	r6, [r4, #0]
 8008eae:	463e      	mov	r6, r7
 8008eb0:	6165      	str	r5, [r4, #20]
 8008eb2:	eba5 0509 	sub.w	r5, r5, r9
 8008eb6:	60a5      	str	r5, [r4, #8]
 8008eb8:	42be      	cmp	r6, r7
 8008eba:	d900      	bls.n	8008ebe <__ssputs_r+0x86>
 8008ebc:	463e      	mov	r6, r7
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	6820      	ldr	r0, [r4, #0]
 8008ec4:	f000 fd88 	bl	80099d8 <memmove>
 8008ec8:	68a3      	ldr	r3, [r4, #8]
 8008eca:	2000      	movs	r0, #0
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	4433      	add	r3, r6
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	e7db      	b.n	8008e90 <__ssputs_r+0x58>
 8008ed8:	462a      	mov	r2, r5
 8008eda:	f000 fda3 	bl	8009a24 <_realloc_r>
 8008ede:	4606      	mov	r6, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1e1      	bne.n	8008ea8 <__ssputs_r+0x70>
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	6921      	ldr	r1, [r4, #16]
 8008ee8:	f7ff feca 	bl	8008c80 <_free_r>
 8008eec:	e7c7      	b.n	8008e7e <__ssputs_r+0x46>
	...

08008ef0 <_svfiprintf_r>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4698      	mov	r8, r3
 8008ef6:	898b      	ldrh	r3, [r1, #12]
 8008ef8:	4607      	mov	r7, r0
 8008efa:	061b      	lsls	r3, r3, #24
 8008efc:	460d      	mov	r5, r1
 8008efe:	4614      	mov	r4, r2
 8008f00:	b09d      	sub	sp, #116	; 0x74
 8008f02:	d50e      	bpl.n	8008f22 <_svfiprintf_r+0x32>
 8008f04:	690b      	ldr	r3, [r1, #16]
 8008f06:	b963      	cbnz	r3, 8008f22 <_svfiprintf_r+0x32>
 8008f08:	2140      	movs	r1, #64	; 0x40
 8008f0a:	f7ff ff21 	bl	8008d50 <_malloc_r>
 8008f0e:	6028      	str	r0, [r5, #0]
 8008f10:	6128      	str	r0, [r5, #16]
 8008f12:	b920      	cbnz	r0, 8008f1e <_svfiprintf_r+0x2e>
 8008f14:	230c      	movs	r3, #12
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f1c:	e0d1      	b.n	80090c2 <_svfiprintf_r+0x1d2>
 8008f1e:	2340      	movs	r3, #64	; 0x40
 8008f20:	616b      	str	r3, [r5, #20]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9309      	str	r3, [sp, #36]	; 0x24
 8008f26:	2320      	movs	r3, #32
 8008f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f2c:	2330      	movs	r3, #48	; 0x30
 8008f2e:	f04f 0901 	mov.w	r9, #1
 8008f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090dc <_svfiprintf_r+0x1ec>
 8008f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f3e:	4623      	mov	r3, r4
 8008f40:	469a      	mov	sl, r3
 8008f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f46:	b10a      	cbz	r2, 8008f4c <_svfiprintf_r+0x5c>
 8008f48:	2a25      	cmp	r2, #37	; 0x25
 8008f4a:	d1f9      	bne.n	8008f40 <_svfiprintf_r+0x50>
 8008f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f50:	d00b      	beq.n	8008f6a <_svfiprintf_r+0x7a>
 8008f52:	465b      	mov	r3, fp
 8008f54:	4622      	mov	r2, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff ff6d 	bl	8008e38 <__ssputs_r>
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f000 80aa 	beq.w	80090b8 <_svfiprintf_r+0x1c8>
 8008f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f66:	445a      	add	r2, fp
 8008f68:	9209      	str	r2, [sp, #36]	; 0x24
 8008f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 80a2 	beq.w	80090b8 <_svfiprintf_r+0x1c8>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7e:	f10a 0a01 	add.w	sl, sl, #1
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f8c:	4654      	mov	r4, sl
 8008f8e:	2205      	movs	r2, #5
 8008f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f94:	4851      	ldr	r0, [pc, #324]	; (80090dc <_svfiprintf_r+0x1ec>)
 8008f96:	f7ff f98b 	bl	80082b0 <memchr>
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	b9d8      	cbnz	r0, 8008fd6 <_svfiprintf_r+0xe6>
 8008f9e:	06d0      	lsls	r0, r2, #27
 8008fa0:	bf44      	itt	mi
 8008fa2:	2320      	movmi	r3, #32
 8008fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa8:	0711      	lsls	r1, r2, #28
 8008faa:	bf44      	itt	mi
 8008fac:	232b      	movmi	r3, #43	; 0x2b
 8008fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb8:	d015      	beq.n	8008fe6 <_svfiprintf_r+0xf6>
 8008fba:	4654      	mov	r4, sl
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f04f 0c0a 	mov.w	ip, #10
 8008fc2:	9a07      	ldr	r2, [sp, #28]
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fca:	3b30      	subs	r3, #48	; 0x30
 8008fcc:	2b09      	cmp	r3, #9
 8008fce:	d94e      	bls.n	800906e <_svfiprintf_r+0x17e>
 8008fd0:	b1b0      	cbz	r0, 8009000 <_svfiprintf_r+0x110>
 8008fd2:	9207      	str	r2, [sp, #28]
 8008fd4:	e014      	b.n	8009000 <_svfiprintf_r+0x110>
 8008fd6:	eba0 0308 	sub.w	r3, r0, r8
 8008fda:	fa09 f303 	lsl.w	r3, r9, r3
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	46a2      	mov	sl, r4
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	e7d2      	b.n	8008f8c <_svfiprintf_r+0x9c>
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	1d19      	adds	r1, r3, #4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	9103      	str	r1, [sp, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfbb      	ittet	lt
 8008ff2:	425b      	neglt	r3, r3
 8008ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff8:	9307      	strge	r3, [sp, #28]
 8008ffa:	9307      	strlt	r3, [sp, #28]
 8008ffc:	bfb8      	it	lt
 8008ffe:	9204      	strlt	r2, [sp, #16]
 8009000:	7823      	ldrb	r3, [r4, #0]
 8009002:	2b2e      	cmp	r3, #46	; 0x2e
 8009004:	d10c      	bne.n	8009020 <_svfiprintf_r+0x130>
 8009006:	7863      	ldrb	r3, [r4, #1]
 8009008:	2b2a      	cmp	r3, #42	; 0x2a
 800900a:	d135      	bne.n	8009078 <_svfiprintf_r+0x188>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	3402      	adds	r4, #2
 8009010:	1d1a      	adds	r2, r3, #4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	9203      	str	r2, [sp, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	bfb8      	it	lt
 800901a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800901e:	9305      	str	r3, [sp, #20]
 8009020:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80090e0 <_svfiprintf_r+0x1f0>
 8009024:	2203      	movs	r2, #3
 8009026:	4650      	mov	r0, sl
 8009028:	7821      	ldrb	r1, [r4, #0]
 800902a:	f7ff f941 	bl	80082b0 <memchr>
 800902e:	b140      	cbz	r0, 8009042 <_svfiprintf_r+0x152>
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	eba0 000a 	sub.w	r0, r0, sl
 8009036:	fa03 f000 	lsl.w	r0, r3, r0
 800903a:	9b04      	ldr	r3, [sp, #16]
 800903c:	3401      	adds	r4, #1
 800903e:	4303      	orrs	r3, r0
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	2206      	movs	r2, #6
 8009048:	4826      	ldr	r0, [pc, #152]	; (80090e4 <_svfiprintf_r+0x1f4>)
 800904a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800904e:	f7ff f92f 	bl	80082b0 <memchr>
 8009052:	2800      	cmp	r0, #0
 8009054:	d038      	beq.n	80090c8 <_svfiprintf_r+0x1d8>
 8009056:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <_svfiprintf_r+0x1f8>)
 8009058:	bb1b      	cbnz	r3, 80090a2 <_svfiprintf_r+0x1b2>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	3307      	adds	r3, #7
 800905e:	f023 0307 	bic.w	r3, r3, #7
 8009062:	3308      	adds	r3, #8
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009068:	4433      	add	r3, r6
 800906a:	9309      	str	r3, [sp, #36]	; 0x24
 800906c:	e767      	b.n	8008f3e <_svfiprintf_r+0x4e>
 800906e:	460c      	mov	r4, r1
 8009070:	2001      	movs	r0, #1
 8009072:	fb0c 3202 	mla	r2, ip, r2, r3
 8009076:	e7a5      	b.n	8008fc4 <_svfiprintf_r+0xd4>
 8009078:	2300      	movs	r3, #0
 800907a:	f04f 0c0a 	mov.w	ip, #10
 800907e:	4619      	mov	r1, r3
 8009080:	3401      	adds	r4, #1
 8009082:	9305      	str	r3, [sp, #20]
 8009084:	4620      	mov	r0, r4
 8009086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800908a:	3a30      	subs	r2, #48	; 0x30
 800908c:	2a09      	cmp	r2, #9
 800908e:	d903      	bls.n	8009098 <_svfiprintf_r+0x1a8>
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0c5      	beq.n	8009020 <_svfiprintf_r+0x130>
 8009094:	9105      	str	r1, [sp, #20]
 8009096:	e7c3      	b.n	8009020 <_svfiprintf_r+0x130>
 8009098:	4604      	mov	r4, r0
 800909a:	2301      	movs	r3, #1
 800909c:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a0:	e7f0      	b.n	8009084 <_svfiprintf_r+0x194>
 80090a2:	ab03      	add	r3, sp, #12
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	462a      	mov	r2, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	4b10      	ldr	r3, [pc, #64]	; (80090ec <_svfiprintf_r+0x1fc>)
 80090ac:	a904      	add	r1, sp, #16
 80090ae:	f7fc f9ad 	bl	800540c <_printf_float>
 80090b2:	1c42      	adds	r2, r0, #1
 80090b4:	4606      	mov	r6, r0
 80090b6:	d1d6      	bne.n	8009066 <_svfiprintf_r+0x176>
 80090b8:	89ab      	ldrh	r3, [r5, #12]
 80090ba:	065b      	lsls	r3, r3, #25
 80090bc:	f53f af2c 	bmi.w	8008f18 <_svfiprintf_r+0x28>
 80090c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c2:	b01d      	add	sp, #116	; 0x74
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	ab03      	add	r3, sp, #12
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	462a      	mov	r2, r5
 80090ce:	4638      	mov	r0, r7
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <_svfiprintf_r+0x1fc>)
 80090d2:	a904      	add	r1, sp, #16
 80090d4:	f7fc fc36 	bl	8005944 <_printf_i>
 80090d8:	e7eb      	b.n	80090b2 <_svfiprintf_r+0x1c2>
 80090da:	bf00      	nop
 80090dc:	0800a164 	.word	0x0800a164
 80090e0:	0800a16a 	.word	0x0800a16a
 80090e4:	0800a16e 	.word	0x0800a16e
 80090e8:	0800540d 	.word	0x0800540d
 80090ec:	08008e39 	.word	0x08008e39

080090f0 <__sfputc_r>:
 80090f0:	6893      	ldr	r3, [r2, #8]
 80090f2:	b410      	push	{r4}
 80090f4:	3b01      	subs	r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	6093      	str	r3, [r2, #8]
 80090fa:	da07      	bge.n	800910c <__sfputc_r+0x1c>
 80090fc:	6994      	ldr	r4, [r2, #24]
 80090fe:	42a3      	cmp	r3, r4
 8009100:	db01      	blt.n	8009106 <__sfputc_r+0x16>
 8009102:	290a      	cmp	r1, #10
 8009104:	d102      	bne.n	800910c <__sfputc_r+0x1c>
 8009106:	bc10      	pop	{r4}
 8009108:	f000 b974 	b.w	80093f4 <__swbuf_r>
 800910c:	6813      	ldr	r3, [r2, #0]
 800910e:	1c58      	adds	r0, r3, #1
 8009110:	6010      	str	r0, [r2, #0]
 8009112:	7019      	strb	r1, [r3, #0]
 8009114:	4608      	mov	r0, r1
 8009116:	bc10      	pop	{r4}
 8009118:	4770      	bx	lr

0800911a <__sfputs_r>:
 800911a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	4614      	mov	r4, r2
 8009122:	18d5      	adds	r5, r2, r3
 8009124:	42ac      	cmp	r4, r5
 8009126:	d101      	bne.n	800912c <__sfputs_r+0x12>
 8009128:	2000      	movs	r0, #0
 800912a:	e007      	b.n	800913c <__sfputs_r+0x22>
 800912c:	463a      	mov	r2, r7
 800912e:	4630      	mov	r0, r6
 8009130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009134:	f7ff ffdc 	bl	80090f0 <__sfputc_r>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d1f3      	bne.n	8009124 <__sfputs_r+0xa>
 800913c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009140 <_vfiprintf_r>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	460d      	mov	r5, r1
 8009146:	4614      	mov	r4, r2
 8009148:	4698      	mov	r8, r3
 800914a:	4606      	mov	r6, r0
 800914c:	b09d      	sub	sp, #116	; 0x74
 800914e:	b118      	cbz	r0, 8009158 <_vfiprintf_r+0x18>
 8009150:	6983      	ldr	r3, [r0, #24]
 8009152:	b90b      	cbnz	r3, 8009158 <_vfiprintf_r+0x18>
 8009154:	f000 fb3a 	bl	80097cc <__sinit>
 8009158:	4b89      	ldr	r3, [pc, #548]	; (8009380 <_vfiprintf_r+0x240>)
 800915a:	429d      	cmp	r5, r3
 800915c:	d11b      	bne.n	8009196 <_vfiprintf_r+0x56>
 800915e:	6875      	ldr	r5, [r6, #4]
 8009160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009162:	07d9      	lsls	r1, r3, #31
 8009164:	d405      	bmi.n	8009172 <_vfiprintf_r+0x32>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	059a      	lsls	r2, r3, #22
 800916a:	d402      	bmi.n	8009172 <_vfiprintf_r+0x32>
 800916c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800916e:	f000 fbcb 	bl	8009908 <__retarget_lock_acquire_recursive>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	071b      	lsls	r3, r3, #28
 8009176:	d501      	bpl.n	800917c <_vfiprintf_r+0x3c>
 8009178:	692b      	ldr	r3, [r5, #16]
 800917a:	b9eb      	cbnz	r3, 80091b8 <_vfiprintf_r+0x78>
 800917c:	4629      	mov	r1, r5
 800917e:	4630      	mov	r0, r6
 8009180:	f000 f998 	bl	80094b4 <__swsetup_r>
 8009184:	b1c0      	cbz	r0, 80091b8 <_vfiprintf_r+0x78>
 8009186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009188:	07dc      	lsls	r4, r3, #31
 800918a:	d50e      	bpl.n	80091aa <_vfiprintf_r+0x6a>
 800918c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009190:	b01d      	add	sp, #116	; 0x74
 8009192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009196:	4b7b      	ldr	r3, [pc, #492]	; (8009384 <_vfiprintf_r+0x244>)
 8009198:	429d      	cmp	r5, r3
 800919a:	d101      	bne.n	80091a0 <_vfiprintf_r+0x60>
 800919c:	68b5      	ldr	r5, [r6, #8]
 800919e:	e7df      	b.n	8009160 <_vfiprintf_r+0x20>
 80091a0:	4b79      	ldr	r3, [pc, #484]	; (8009388 <_vfiprintf_r+0x248>)
 80091a2:	429d      	cmp	r5, r3
 80091a4:	bf08      	it	eq
 80091a6:	68f5      	ldreq	r5, [r6, #12]
 80091a8:	e7da      	b.n	8009160 <_vfiprintf_r+0x20>
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	0598      	lsls	r0, r3, #22
 80091ae:	d4ed      	bmi.n	800918c <_vfiprintf_r+0x4c>
 80091b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b2:	f000 fbaa 	bl	800990a <__retarget_lock_release_recursive>
 80091b6:	e7e9      	b.n	800918c <_vfiprintf_r+0x4c>
 80091b8:	2300      	movs	r3, #0
 80091ba:	9309      	str	r3, [sp, #36]	; 0x24
 80091bc:	2320      	movs	r3, #32
 80091be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091c2:	2330      	movs	r3, #48	; 0x30
 80091c4:	f04f 0901 	mov.w	r9, #1
 80091c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80091cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800938c <_vfiprintf_r+0x24c>
 80091d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091d4:	4623      	mov	r3, r4
 80091d6:	469a      	mov	sl, r3
 80091d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091dc:	b10a      	cbz	r2, 80091e2 <_vfiprintf_r+0xa2>
 80091de:	2a25      	cmp	r2, #37	; 0x25
 80091e0:	d1f9      	bne.n	80091d6 <_vfiprintf_r+0x96>
 80091e2:	ebba 0b04 	subs.w	fp, sl, r4
 80091e6:	d00b      	beq.n	8009200 <_vfiprintf_r+0xc0>
 80091e8:	465b      	mov	r3, fp
 80091ea:	4622      	mov	r2, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7ff ff93 	bl	800911a <__sfputs_r>
 80091f4:	3001      	adds	r0, #1
 80091f6:	f000 80aa 	beq.w	800934e <_vfiprintf_r+0x20e>
 80091fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091fc:	445a      	add	r2, fp
 80091fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009200:	f89a 3000 	ldrb.w	r3, [sl]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80a2 	beq.w	800934e <_vfiprintf_r+0x20e>
 800920a:	2300      	movs	r3, #0
 800920c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009214:	f10a 0a01 	add.w	sl, sl, #1
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	9307      	str	r3, [sp, #28]
 800921c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009220:	931a      	str	r3, [sp, #104]	; 0x68
 8009222:	4654      	mov	r4, sl
 8009224:	2205      	movs	r2, #5
 8009226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922a:	4858      	ldr	r0, [pc, #352]	; (800938c <_vfiprintf_r+0x24c>)
 800922c:	f7ff f840 	bl	80082b0 <memchr>
 8009230:	9a04      	ldr	r2, [sp, #16]
 8009232:	b9d8      	cbnz	r0, 800926c <_vfiprintf_r+0x12c>
 8009234:	06d1      	lsls	r1, r2, #27
 8009236:	bf44      	itt	mi
 8009238:	2320      	movmi	r3, #32
 800923a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800923e:	0713      	lsls	r3, r2, #28
 8009240:	bf44      	itt	mi
 8009242:	232b      	movmi	r3, #43	; 0x2b
 8009244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009248:	f89a 3000 	ldrb.w	r3, [sl]
 800924c:	2b2a      	cmp	r3, #42	; 0x2a
 800924e:	d015      	beq.n	800927c <_vfiprintf_r+0x13c>
 8009250:	4654      	mov	r4, sl
 8009252:	2000      	movs	r0, #0
 8009254:	f04f 0c0a 	mov.w	ip, #10
 8009258:	9a07      	ldr	r2, [sp, #28]
 800925a:	4621      	mov	r1, r4
 800925c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009260:	3b30      	subs	r3, #48	; 0x30
 8009262:	2b09      	cmp	r3, #9
 8009264:	d94e      	bls.n	8009304 <_vfiprintf_r+0x1c4>
 8009266:	b1b0      	cbz	r0, 8009296 <_vfiprintf_r+0x156>
 8009268:	9207      	str	r2, [sp, #28]
 800926a:	e014      	b.n	8009296 <_vfiprintf_r+0x156>
 800926c:	eba0 0308 	sub.w	r3, r0, r8
 8009270:	fa09 f303 	lsl.w	r3, r9, r3
 8009274:	4313      	orrs	r3, r2
 8009276:	46a2      	mov	sl, r4
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	e7d2      	b.n	8009222 <_vfiprintf_r+0xe2>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	1d19      	adds	r1, r3, #4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	9103      	str	r1, [sp, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	bfbb      	ittet	lt
 8009288:	425b      	neglt	r3, r3
 800928a:	f042 0202 	orrlt.w	r2, r2, #2
 800928e:	9307      	strge	r3, [sp, #28]
 8009290:	9307      	strlt	r3, [sp, #28]
 8009292:	bfb8      	it	lt
 8009294:	9204      	strlt	r2, [sp, #16]
 8009296:	7823      	ldrb	r3, [r4, #0]
 8009298:	2b2e      	cmp	r3, #46	; 0x2e
 800929a:	d10c      	bne.n	80092b6 <_vfiprintf_r+0x176>
 800929c:	7863      	ldrb	r3, [r4, #1]
 800929e:	2b2a      	cmp	r3, #42	; 0x2a
 80092a0:	d135      	bne.n	800930e <_vfiprintf_r+0x1ce>
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	3402      	adds	r4, #2
 80092a6:	1d1a      	adds	r2, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb8      	it	lt
 80092b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009390 <_vfiprintf_r+0x250>
 80092ba:	2203      	movs	r2, #3
 80092bc:	4650      	mov	r0, sl
 80092be:	7821      	ldrb	r1, [r4, #0]
 80092c0:	f7fe fff6 	bl	80082b0 <memchr>
 80092c4:	b140      	cbz	r0, 80092d8 <_vfiprintf_r+0x198>
 80092c6:	2340      	movs	r3, #64	; 0x40
 80092c8:	eba0 000a 	sub.w	r0, r0, sl
 80092cc:	fa03 f000 	lsl.w	r0, r3, r0
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	3401      	adds	r4, #1
 80092d4:	4303      	orrs	r3, r0
 80092d6:	9304      	str	r3, [sp, #16]
 80092d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092dc:	2206      	movs	r2, #6
 80092de:	482d      	ldr	r0, [pc, #180]	; (8009394 <_vfiprintf_r+0x254>)
 80092e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092e4:	f7fe ffe4 	bl	80082b0 <memchr>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d03f      	beq.n	800936c <_vfiprintf_r+0x22c>
 80092ec:	4b2a      	ldr	r3, [pc, #168]	; (8009398 <_vfiprintf_r+0x258>)
 80092ee:	bb1b      	cbnz	r3, 8009338 <_vfiprintf_r+0x1f8>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	3307      	adds	r3, #7
 80092f4:	f023 0307 	bic.w	r3, r3, #7
 80092f8:	3308      	adds	r3, #8
 80092fa:	9303      	str	r3, [sp, #12]
 80092fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fe:	443b      	add	r3, r7
 8009300:	9309      	str	r3, [sp, #36]	; 0x24
 8009302:	e767      	b.n	80091d4 <_vfiprintf_r+0x94>
 8009304:	460c      	mov	r4, r1
 8009306:	2001      	movs	r0, #1
 8009308:	fb0c 3202 	mla	r2, ip, r2, r3
 800930c:	e7a5      	b.n	800925a <_vfiprintf_r+0x11a>
 800930e:	2300      	movs	r3, #0
 8009310:	f04f 0c0a 	mov.w	ip, #10
 8009314:	4619      	mov	r1, r3
 8009316:	3401      	adds	r4, #1
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	4620      	mov	r0, r4
 800931c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009320:	3a30      	subs	r2, #48	; 0x30
 8009322:	2a09      	cmp	r2, #9
 8009324:	d903      	bls.n	800932e <_vfiprintf_r+0x1ee>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0c5      	beq.n	80092b6 <_vfiprintf_r+0x176>
 800932a:	9105      	str	r1, [sp, #20]
 800932c:	e7c3      	b.n	80092b6 <_vfiprintf_r+0x176>
 800932e:	4604      	mov	r4, r0
 8009330:	2301      	movs	r3, #1
 8009332:	fb0c 2101 	mla	r1, ip, r1, r2
 8009336:	e7f0      	b.n	800931a <_vfiprintf_r+0x1da>
 8009338:	ab03      	add	r3, sp, #12
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	462a      	mov	r2, r5
 800933e:	4630      	mov	r0, r6
 8009340:	4b16      	ldr	r3, [pc, #88]	; (800939c <_vfiprintf_r+0x25c>)
 8009342:	a904      	add	r1, sp, #16
 8009344:	f7fc f862 	bl	800540c <_printf_float>
 8009348:	4607      	mov	r7, r0
 800934a:	1c78      	adds	r0, r7, #1
 800934c:	d1d6      	bne.n	80092fc <_vfiprintf_r+0x1bc>
 800934e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009350:	07d9      	lsls	r1, r3, #31
 8009352:	d405      	bmi.n	8009360 <_vfiprintf_r+0x220>
 8009354:	89ab      	ldrh	r3, [r5, #12]
 8009356:	059a      	lsls	r2, r3, #22
 8009358:	d402      	bmi.n	8009360 <_vfiprintf_r+0x220>
 800935a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935c:	f000 fad5 	bl	800990a <__retarget_lock_release_recursive>
 8009360:	89ab      	ldrh	r3, [r5, #12]
 8009362:	065b      	lsls	r3, r3, #25
 8009364:	f53f af12 	bmi.w	800918c <_vfiprintf_r+0x4c>
 8009368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800936a:	e711      	b.n	8009190 <_vfiprintf_r+0x50>
 800936c:	ab03      	add	r3, sp, #12
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	462a      	mov	r2, r5
 8009372:	4630      	mov	r0, r6
 8009374:	4b09      	ldr	r3, [pc, #36]	; (800939c <_vfiprintf_r+0x25c>)
 8009376:	a904      	add	r1, sp, #16
 8009378:	f7fc fae4 	bl	8005944 <_printf_i>
 800937c:	e7e4      	b.n	8009348 <_vfiprintf_r+0x208>
 800937e:	bf00      	nop
 8009380:	0800a198 	.word	0x0800a198
 8009384:	0800a1b8 	.word	0x0800a1b8
 8009388:	0800a178 	.word	0x0800a178
 800938c:	0800a164 	.word	0x0800a164
 8009390:	0800a16a 	.word	0x0800a16a
 8009394:	0800a16e 	.word	0x0800a16e
 8009398:	0800540d 	.word	0x0800540d
 800939c:	0800911b 	.word	0x0800911b

080093a0 <nan>:
 80093a0:	2000      	movs	r0, #0
 80093a2:	4901      	ldr	r1, [pc, #4]	; (80093a8 <nan+0x8>)
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	7ff80000 	.word	0x7ff80000

080093ac <_sbrk_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	2300      	movs	r3, #0
 80093b0:	4d05      	ldr	r5, [pc, #20]	; (80093c8 <_sbrk_r+0x1c>)
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	f7f8 fd58 	bl	8001e6c <_sbrk>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_sbrk_r+0x1a>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_sbrk_r+0x1a>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000388 	.word	0x20000388

080093cc <strncmp>:
 80093cc:	4603      	mov	r3, r0
 80093ce:	b510      	push	{r4, lr}
 80093d0:	b172      	cbz	r2, 80093f0 <strncmp+0x24>
 80093d2:	3901      	subs	r1, #1
 80093d4:	1884      	adds	r4, r0, r2
 80093d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093de:	4290      	cmp	r0, r2
 80093e0:	d101      	bne.n	80093e6 <strncmp+0x1a>
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	d101      	bne.n	80093ea <strncmp+0x1e>
 80093e6:	1a80      	subs	r0, r0, r2
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d1f3      	bne.n	80093d6 <strncmp+0xa>
 80093ee:	e7fa      	b.n	80093e6 <strncmp+0x1a>
 80093f0:	4610      	mov	r0, r2
 80093f2:	e7f9      	b.n	80093e8 <strncmp+0x1c>

080093f4 <__swbuf_r>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	460e      	mov	r6, r1
 80093f8:	4614      	mov	r4, r2
 80093fa:	4605      	mov	r5, r0
 80093fc:	b118      	cbz	r0, 8009406 <__swbuf_r+0x12>
 80093fe:	6983      	ldr	r3, [r0, #24]
 8009400:	b90b      	cbnz	r3, 8009406 <__swbuf_r+0x12>
 8009402:	f000 f9e3 	bl	80097cc <__sinit>
 8009406:	4b21      	ldr	r3, [pc, #132]	; (800948c <__swbuf_r+0x98>)
 8009408:	429c      	cmp	r4, r3
 800940a:	d12b      	bne.n	8009464 <__swbuf_r+0x70>
 800940c:	686c      	ldr	r4, [r5, #4]
 800940e:	69a3      	ldr	r3, [r4, #24]
 8009410:	60a3      	str	r3, [r4, #8]
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	071a      	lsls	r2, r3, #28
 8009416:	d52f      	bpl.n	8009478 <__swbuf_r+0x84>
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	b36b      	cbz	r3, 8009478 <__swbuf_r+0x84>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	6820      	ldr	r0, [r4, #0]
 8009420:	b2f6      	uxtb	r6, r6
 8009422:	1ac0      	subs	r0, r0, r3
 8009424:	6963      	ldr	r3, [r4, #20]
 8009426:	4637      	mov	r7, r6
 8009428:	4283      	cmp	r3, r0
 800942a:	dc04      	bgt.n	8009436 <__swbuf_r+0x42>
 800942c:	4621      	mov	r1, r4
 800942e:	4628      	mov	r0, r5
 8009430:	f000 f938 	bl	80096a4 <_fflush_r>
 8009434:	bb30      	cbnz	r0, 8009484 <__swbuf_r+0x90>
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	3001      	adds	r0, #1
 800943a:	3b01      	subs	r3, #1
 800943c:	60a3      	str	r3, [r4, #8]
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	6022      	str	r2, [r4, #0]
 8009444:	701e      	strb	r6, [r3, #0]
 8009446:	6963      	ldr	r3, [r4, #20]
 8009448:	4283      	cmp	r3, r0
 800944a:	d004      	beq.n	8009456 <__swbuf_r+0x62>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	07db      	lsls	r3, r3, #31
 8009450:	d506      	bpl.n	8009460 <__swbuf_r+0x6c>
 8009452:	2e0a      	cmp	r6, #10
 8009454:	d104      	bne.n	8009460 <__swbuf_r+0x6c>
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f000 f923 	bl	80096a4 <_fflush_r>
 800945e:	b988      	cbnz	r0, 8009484 <__swbuf_r+0x90>
 8009460:	4638      	mov	r0, r7
 8009462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009464:	4b0a      	ldr	r3, [pc, #40]	; (8009490 <__swbuf_r+0x9c>)
 8009466:	429c      	cmp	r4, r3
 8009468:	d101      	bne.n	800946e <__swbuf_r+0x7a>
 800946a:	68ac      	ldr	r4, [r5, #8]
 800946c:	e7cf      	b.n	800940e <__swbuf_r+0x1a>
 800946e:	4b09      	ldr	r3, [pc, #36]	; (8009494 <__swbuf_r+0xa0>)
 8009470:	429c      	cmp	r4, r3
 8009472:	bf08      	it	eq
 8009474:	68ec      	ldreq	r4, [r5, #12]
 8009476:	e7ca      	b.n	800940e <__swbuf_r+0x1a>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f81a 	bl	80094b4 <__swsetup_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d0cb      	beq.n	800941c <__swbuf_r+0x28>
 8009484:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009488:	e7ea      	b.n	8009460 <__swbuf_r+0x6c>
 800948a:	bf00      	nop
 800948c:	0800a198 	.word	0x0800a198
 8009490:	0800a1b8 	.word	0x0800a1b8
 8009494:	0800a178 	.word	0x0800a178

08009498 <__ascii_wctomb>:
 8009498:	4603      	mov	r3, r0
 800949a:	4608      	mov	r0, r1
 800949c:	b141      	cbz	r1, 80094b0 <__ascii_wctomb+0x18>
 800949e:	2aff      	cmp	r2, #255	; 0xff
 80094a0:	d904      	bls.n	80094ac <__ascii_wctomb+0x14>
 80094a2:	228a      	movs	r2, #138	; 0x8a
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	4770      	bx	lr
 80094ac:	2001      	movs	r0, #1
 80094ae:	700a      	strb	r2, [r1, #0]
 80094b0:	4770      	bx	lr
	...

080094b4 <__swsetup_r>:
 80094b4:	4b32      	ldr	r3, [pc, #200]	; (8009580 <__swsetup_r+0xcc>)
 80094b6:	b570      	push	{r4, r5, r6, lr}
 80094b8:	681d      	ldr	r5, [r3, #0]
 80094ba:	4606      	mov	r6, r0
 80094bc:	460c      	mov	r4, r1
 80094be:	b125      	cbz	r5, 80094ca <__swsetup_r+0x16>
 80094c0:	69ab      	ldr	r3, [r5, #24]
 80094c2:	b913      	cbnz	r3, 80094ca <__swsetup_r+0x16>
 80094c4:	4628      	mov	r0, r5
 80094c6:	f000 f981 	bl	80097cc <__sinit>
 80094ca:	4b2e      	ldr	r3, [pc, #184]	; (8009584 <__swsetup_r+0xd0>)
 80094cc:	429c      	cmp	r4, r3
 80094ce:	d10f      	bne.n	80094f0 <__swsetup_r+0x3c>
 80094d0:	686c      	ldr	r4, [r5, #4]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094d8:	0719      	lsls	r1, r3, #28
 80094da:	d42c      	bmi.n	8009536 <__swsetup_r+0x82>
 80094dc:	06dd      	lsls	r5, r3, #27
 80094de:	d411      	bmi.n	8009504 <__swsetup_r+0x50>
 80094e0:	2309      	movs	r3, #9
 80094e2:	6033      	str	r3, [r6, #0]
 80094e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	e03e      	b.n	800956e <__swsetup_r+0xba>
 80094f0:	4b25      	ldr	r3, [pc, #148]	; (8009588 <__swsetup_r+0xd4>)
 80094f2:	429c      	cmp	r4, r3
 80094f4:	d101      	bne.n	80094fa <__swsetup_r+0x46>
 80094f6:	68ac      	ldr	r4, [r5, #8]
 80094f8:	e7eb      	b.n	80094d2 <__swsetup_r+0x1e>
 80094fa:	4b24      	ldr	r3, [pc, #144]	; (800958c <__swsetup_r+0xd8>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	bf08      	it	eq
 8009500:	68ec      	ldreq	r4, [r5, #12]
 8009502:	e7e6      	b.n	80094d2 <__swsetup_r+0x1e>
 8009504:	0758      	lsls	r0, r3, #29
 8009506:	d512      	bpl.n	800952e <__swsetup_r+0x7a>
 8009508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800950a:	b141      	cbz	r1, 800951e <__swsetup_r+0x6a>
 800950c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009510:	4299      	cmp	r1, r3
 8009512:	d002      	beq.n	800951a <__swsetup_r+0x66>
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff fbb3 	bl	8008c80 <_free_r>
 800951a:	2300      	movs	r3, #0
 800951c:	6363      	str	r3, [r4, #52]	; 0x34
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009524:	81a3      	strh	r3, [r4, #12]
 8009526:	2300      	movs	r3, #0
 8009528:	6063      	str	r3, [r4, #4]
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	f043 0308 	orr.w	r3, r3, #8
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	b94b      	cbnz	r3, 800954e <__swsetup_r+0x9a>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009544:	d003      	beq.n	800954e <__swsetup_r+0x9a>
 8009546:	4621      	mov	r1, r4
 8009548:	4630      	mov	r0, r6
 800954a:	f000 fa05 	bl	8009958 <__smakebuf_r>
 800954e:	89a0      	ldrh	r0, [r4, #12]
 8009550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009554:	f010 0301 	ands.w	r3, r0, #1
 8009558:	d00a      	beq.n	8009570 <__swsetup_r+0xbc>
 800955a:	2300      	movs	r3, #0
 800955c:	60a3      	str	r3, [r4, #8]
 800955e:	6963      	ldr	r3, [r4, #20]
 8009560:	425b      	negs	r3, r3
 8009562:	61a3      	str	r3, [r4, #24]
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	b943      	cbnz	r3, 800957a <__swsetup_r+0xc6>
 8009568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800956c:	d1ba      	bne.n	80094e4 <__swsetup_r+0x30>
 800956e:	bd70      	pop	{r4, r5, r6, pc}
 8009570:	0781      	lsls	r1, r0, #30
 8009572:	bf58      	it	pl
 8009574:	6963      	ldrpl	r3, [r4, #20]
 8009576:	60a3      	str	r3, [r4, #8]
 8009578:	e7f4      	b.n	8009564 <__swsetup_r+0xb0>
 800957a:	2000      	movs	r0, #0
 800957c:	e7f7      	b.n	800956e <__swsetup_r+0xba>
 800957e:	bf00      	nop
 8009580:	20000010 	.word	0x20000010
 8009584:	0800a198 	.word	0x0800a198
 8009588:	0800a1b8 	.word	0x0800a1b8
 800958c:	0800a178 	.word	0x0800a178

08009590 <abort>:
 8009590:	2006      	movs	r0, #6
 8009592:	b508      	push	{r3, lr}
 8009594:	f000 fa9e 	bl	8009ad4 <raise>
 8009598:	2001      	movs	r0, #1
 800959a:	f7f8 fbf4 	bl	8001d86 <_exit>
	...

080095a0 <__sflush_r>:
 80095a0:	898a      	ldrh	r2, [r1, #12]
 80095a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a4:	4605      	mov	r5, r0
 80095a6:	0710      	lsls	r0, r2, #28
 80095a8:	460c      	mov	r4, r1
 80095aa:	d457      	bmi.n	800965c <__sflush_r+0xbc>
 80095ac:	684b      	ldr	r3, [r1, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dc04      	bgt.n	80095bc <__sflush_r+0x1c>
 80095b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dc01      	bgt.n	80095bc <__sflush_r+0x1c>
 80095b8:	2000      	movs	r0, #0
 80095ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d0fa      	beq.n	80095b8 <__sflush_r+0x18>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095c8:	682f      	ldr	r7, [r5, #0]
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	d032      	beq.n	8009634 <__sflush_r+0x94>
 80095ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	075a      	lsls	r2, r3, #29
 80095d4:	d505      	bpl.n	80095e2 <__sflush_r+0x42>
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	1ac0      	subs	r0, r0, r3
 80095da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095dc:	b10b      	cbz	r3, 80095e2 <__sflush_r+0x42>
 80095de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095e0:	1ac0      	subs	r0, r0, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	4602      	mov	r2, r0
 80095e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095e8:	4628      	mov	r0, r5
 80095ea:	6a21      	ldr	r1, [r4, #32]
 80095ec:	47b0      	blx	r6
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	d106      	bne.n	8009602 <__sflush_r+0x62>
 80095f4:	6829      	ldr	r1, [r5, #0]
 80095f6:	291d      	cmp	r1, #29
 80095f8:	d82c      	bhi.n	8009654 <__sflush_r+0xb4>
 80095fa:	4a29      	ldr	r2, [pc, #164]	; (80096a0 <__sflush_r+0x100>)
 80095fc:	40ca      	lsrs	r2, r1
 80095fe:	07d6      	lsls	r6, r2, #31
 8009600:	d528      	bpl.n	8009654 <__sflush_r+0xb4>
 8009602:	2200      	movs	r2, #0
 8009604:	6062      	str	r2, [r4, #4]
 8009606:	6922      	ldr	r2, [r4, #16]
 8009608:	04d9      	lsls	r1, r3, #19
 800960a:	6022      	str	r2, [r4, #0]
 800960c:	d504      	bpl.n	8009618 <__sflush_r+0x78>
 800960e:	1c42      	adds	r2, r0, #1
 8009610:	d101      	bne.n	8009616 <__sflush_r+0x76>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	b903      	cbnz	r3, 8009618 <__sflush_r+0x78>
 8009616:	6560      	str	r0, [r4, #84]	; 0x54
 8009618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961a:	602f      	str	r7, [r5, #0]
 800961c:	2900      	cmp	r1, #0
 800961e:	d0cb      	beq.n	80095b8 <__sflush_r+0x18>
 8009620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009624:	4299      	cmp	r1, r3
 8009626:	d002      	beq.n	800962e <__sflush_r+0x8e>
 8009628:	4628      	mov	r0, r5
 800962a:	f7ff fb29 	bl	8008c80 <_free_r>
 800962e:	2000      	movs	r0, #0
 8009630:	6360      	str	r0, [r4, #52]	; 0x34
 8009632:	e7c2      	b.n	80095ba <__sflush_r+0x1a>
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	2301      	movs	r3, #1
 8009638:	4628      	mov	r0, r5
 800963a:	47b0      	blx	r6
 800963c:	1c41      	adds	r1, r0, #1
 800963e:	d1c7      	bne.n	80095d0 <__sflush_r+0x30>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0c4      	beq.n	80095d0 <__sflush_r+0x30>
 8009646:	2b1d      	cmp	r3, #29
 8009648:	d001      	beq.n	800964e <__sflush_r+0xae>
 800964a:	2b16      	cmp	r3, #22
 800964c:	d101      	bne.n	8009652 <__sflush_r+0xb2>
 800964e:	602f      	str	r7, [r5, #0]
 8009650:	e7b2      	b.n	80095b8 <__sflush_r+0x18>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	e7ae      	b.n	80095ba <__sflush_r+0x1a>
 800965c:	690f      	ldr	r7, [r1, #16]
 800965e:	2f00      	cmp	r7, #0
 8009660:	d0aa      	beq.n	80095b8 <__sflush_r+0x18>
 8009662:	0793      	lsls	r3, r2, #30
 8009664:	bf18      	it	ne
 8009666:	2300      	movne	r3, #0
 8009668:	680e      	ldr	r6, [r1, #0]
 800966a:	bf08      	it	eq
 800966c:	694b      	ldreq	r3, [r1, #20]
 800966e:	1bf6      	subs	r6, r6, r7
 8009670:	600f      	str	r7, [r1, #0]
 8009672:	608b      	str	r3, [r1, #8]
 8009674:	2e00      	cmp	r6, #0
 8009676:	dd9f      	ble.n	80095b8 <__sflush_r+0x18>
 8009678:	4633      	mov	r3, r6
 800967a:	463a      	mov	r2, r7
 800967c:	4628      	mov	r0, r5
 800967e:	6a21      	ldr	r1, [r4, #32]
 8009680:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009684:	47e0      	blx	ip
 8009686:	2800      	cmp	r0, #0
 8009688:	dc06      	bgt.n	8009698 <__sflush_r+0xf8>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	e790      	b.n	80095ba <__sflush_r+0x1a>
 8009698:	4407      	add	r7, r0
 800969a:	1a36      	subs	r6, r6, r0
 800969c:	e7ea      	b.n	8009674 <__sflush_r+0xd4>
 800969e:	bf00      	nop
 80096a0:	20400001 	.word	0x20400001

080096a4 <_fflush_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	690b      	ldr	r3, [r1, #16]
 80096a8:	4605      	mov	r5, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	b913      	cbnz	r3, 80096b4 <_fflush_r+0x10>
 80096ae:	2500      	movs	r5, #0
 80096b0:	4628      	mov	r0, r5
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	b118      	cbz	r0, 80096be <_fflush_r+0x1a>
 80096b6:	6983      	ldr	r3, [r0, #24]
 80096b8:	b90b      	cbnz	r3, 80096be <_fflush_r+0x1a>
 80096ba:	f000 f887 	bl	80097cc <__sinit>
 80096be:	4b14      	ldr	r3, [pc, #80]	; (8009710 <_fflush_r+0x6c>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	d11b      	bne.n	80096fc <_fflush_r+0x58>
 80096c4:	686c      	ldr	r4, [r5, #4]
 80096c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0ef      	beq.n	80096ae <_fflush_r+0xa>
 80096ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096d0:	07d0      	lsls	r0, r2, #31
 80096d2:	d404      	bmi.n	80096de <_fflush_r+0x3a>
 80096d4:	0599      	lsls	r1, r3, #22
 80096d6:	d402      	bmi.n	80096de <_fflush_r+0x3a>
 80096d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096da:	f000 f915 	bl	8009908 <__retarget_lock_acquire_recursive>
 80096de:	4628      	mov	r0, r5
 80096e0:	4621      	mov	r1, r4
 80096e2:	f7ff ff5d 	bl	80095a0 <__sflush_r>
 80096e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e8:	4605      	mov	r5, r0
 80096ea:	07da      	lsls	r2, r3, #31
 80096ec:	d4e0      	bmi.n	80096b0 <_fflush_r+0xc>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	059b      	lsls	r3, r3, #22
 80096f2:	d4dd      	bmi.n	80096b0 <_fflush_r+0xc>
 80096f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f6:	f000 f908 	bl	800990a <__retarget_lock_release_recursive>
 80096fa:	e7d9      	b.n	80096b0 <_fflush_r+0xc>
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <_fflush_r+0x70>)
 80096fe:	429c      	cmp	r4, r3
 8009700:	d101      	bne.n	8009706 <_fflush_r+0x62>
 8009702:	68ac      	ldr	r4, [r5, #8]
 8009704:	e7df      	b.n	80096c6 <_fflush_r+0x22>
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <_fflush_r+0x74>)
 8009708:	429c      	cmp	r4, r3
 800970a:	bf08      	it	eq
 800970c:	68ec      	ldreq	r4, [r5, #12]
 800970e:	e7da      	b.n	80096c6 <_fflush_r+0x22>
 8009710:	0800a198 	.word	0x0800a198
 8009714:	0800a1b8 	.word	0x0800a1b8
 8009718:	0800a178 	.word	0x0800a178

0800971c <std>:
 800971c:	2300      	movs	r3, #0
 800971e:	b510      	push	{r4, lr}
 8009720:	4604      	mov	r4, r0
 8009722:	e9c0 3300 	strd	r3, r3, [r0]
 8009726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800972a:	6083      	str	r3, [r0, #8]
 800972c:	8181      	strh	r1, [r0, #12]
 800972e:	6643      	str	r3, [r0, #100]	; 0x64
 8009730:	81c2      	strh	r2, [r0, #14]
 8009732:	6183      	str	r3, [r0, #24]
 8009734:	4619      	mov	r1, r3
 8009736:	2208      	movs	r2, #8
 8009738:	305c      	adds	r0, #92	; 0x5c
 800973a:	f7fb fdc1 	bl	80052c0 <memset>
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <std+0x38>)
 8009740:	6224      	str	r4, [r4, #32]
 8009742:	6263      	str	r3, [r4, #36]	; 0x24
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <std+0x3c>)
 8009746:	62a3      	str	r3, [r4, #40]	; 0x28
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <std+0x40>)
 800974a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <std+0x44>)
 800974e:	6323      	str	r3, [r4, #48]	; 0x30
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	08009b0d 	.word	0x08009b0d
 8009758:	08009b2f 	.word	0x08009b2f
 800975c:	08009b67 	.word	0x08009b67
 8009760:	08009b8b 	.word	0x08009b8b

08009764 <_cleanup_r>:
 8009764:	4901      	ldr	r1, [pc, #4]	; (800976c <_cleanup_r+0x8>)
 8009766:	f000 b8af 	b.w	80098c8 <_fwalk_reent>
 800976a:	bf00      	nop
 800976c:	080096a5 	.word	0x080096a5

08009770 <__sfmoreglue>:
 8009770:	2268      	movs	r2, #104	; 0x68
 8009772:	b570      	push	{r4, r5, r6, lr}
 8009774:	1e4d      	subs	r5, r1, #1
 8009776:	4355      	muls	r5, r2
 8009778:	460e      	mov	r6, r1
 800977a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800977e:	f7ff fae7 	bl	8008d50 <_malloc_r>
 8009782:	4604      	mov	r4, r0
 8009784:	b140      	cbz	r0, 8009798 <__sfmoreglue+0x28>
 8009786:	2100      	movs	r1, #0
 8009788:	e9c0 1600 	strd	r1, r6, [r0]
 800978c:	300c      	adds	r0, #12
 800978e:	60a0      	str	r0, [r4, #8]
 8009790:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009794:	f7fb fd94 	bl	80052c0 <memset>
 8009798:	4620      	mov	r0, r4
 800979a:	bd70      	pop	{r4, r5, r6, pc}

0800979c <__sfp_lock_acquire>:
 800979c:	4801      	ldr	r0, [pc, #4]	; (80097a4 <__sfp_lock_acquire+0x8>)
 800979e:	f000 b8b3 	b.w	8009908 <__retarget_lock_acquire_recursive>
 80097a2:	bf00      	nop
 80097a4:	20000385 	.word	0x20000385

080097a8 <__sfp_lock_release>:
 80097a8:	4801      	ldr	r0, [pc, #4]	; (80097b0 <__sfp_lock_release+0x8>)
 80097aa:	f000 b8ae 	b.w	800990a <__retarget_lock_release_recursive>
 80097ae:	bf00      	nop
 80097b0:	20000385 	.word	0x20000385

080097b4 <__sinit_lock_acquire>:
 80097b4:	4801      	ldr	r0, [pc, #4]	; (80097bc <__sinit_lock_acquire+0x8>)
 80097b6:	f000 b8a7 	b.w	8009908 <__retarget_lock_acquire_recursive>
 80097ba:	bf00      	nop
 80097bc:	20000386 	.word	0x20000386

080097c0 <__sinit_lock_release>:
 80097c0:	4801      	ldr	r0, [pc, #4]	; (80097c8 <__sinit_lock_release+0x8>)
 80097c2:	f000 b8a2 	b.w	800990a <__retarget_lock_release_recursive>
 80097c6:	bf00      	nop
 80097c8:	20000386 	.word	0x20000386

080097cc <__sinit>:
 80097cc:	b510      	push	{r4, lr}
 80097ce:	4604      	mov	r4, r0
 80097d0:	f7ff fff0 	bl	80097b4 <__sinit_lock_acquire>
 80097d4:	69a3      	ldr	r3, [r4, #24]
 80097d6:	b11b      	cbz	r3, 80097e0 <__sinit+0x14>
 80097d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097dc:	f7ff bff0 	b.w	80097c0 <__sinit_lock_release>
 80097e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097e4:	6523      	str	r3, [r4, #80]	; 0x50
 80097e6:	4b13      	ldr	r3, [pc, #76]	; (8009834 <__sinit+0x68>)
 80097e8:	4a13      	ldr	r2, [pc, #76]	; (8009838 <__sinit+0x6c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80097ee:	42a3      	cmp	r3, r4
 80097f0:	bf08      	it	eq
 80097f2:	2301      	moveq	r3, #1
 80097f4:	4620      	mov	r0, r4
 80097f6:	bf08      	it	eq
 80097f8:	61a3      	streq	r3, [r4, #24]
 80097fa:	f000 f81f 	bl	800983c <__sfp>
 80097fe:	6060      	str	r0, [r4, #4]
 8009800:	4620      	mov	r0, r4
 8009802:	f000 f81b 	bl	800983c <__sfp>
 8009806:	60a0      	str	r0, [r4, #8]
 8009808:	4620      	mov	r0, r4
 800980a:	f000 f817 	bl	800983c <__sfp>
 800980e:	2200      	movs	r2, #0
 8009810:	2104      	movs	r1, #4
 8009812:	60e0      	str	r0, [r4, #12]
 8009814:	6860      	ldr	r0, [r4, #4]
 8009816:	f7ff ff81 	bl	800971c <std>
 800981a:	2201      	movs	r2, #1
 800981c:	2109      	movs	r1, #9
 800981e:	68a0      	ldr	r0, [r4, #8]
 8009820:	f7ff ff7c 	bl	800971c <std>
 8009824:	2202      	movs	r2, #2
 8009826:	2112      	movs	r1, #18
 8009828:	68e0      	ldr	r0, [r4, #12]
 800982a:	f7ff ff77 	bl	800971c <std>
 800982e:	2301      	movs	r3, #1
 8009830:	61a3      	str	r3, [r4, #24]
 8009832:	e7d1      	b.n	80097d8 <__sinit+0xc>
 8009834:	08009cd8 	.word	0x08009cd8
 8009838:	08009765 	.word	0x08009765

0800983c <__sfp>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	4607      	mov	r7, r0
 8009840:	f7ff ffac 	bl	800979c <__sfp_lock_acquire>
 8009844:	4b1e      	ldr	r3, [pc, #120]	; (80098c0 <__sfp+0x84>)
 8009846:	681e      	ldr	r6, [r3, #0]
 8009848:	69b3      	ldr	r3, [r6, #24]
 800984a:	b913      	cbnz	r3, 8009852 <__sfp+0x16>
 800984c:	4630      	mov	r0, r6
 800984e:	f7ff ffbd 	bl	80097cc <__sinit>
 8009852:	3648      	adds	r6, #72	; 0x48
 8009854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009858:	3b01      	subs	r3, #1
 800985a:	d503      	bpl.n	8009864 <__sfp+0x28>
 800985c:	6833      	ldr	r3, [r6, #0]
 800985e:	b30b      	cbz	r3, 80098a4 <__sfp+0x68>
 8009860:	6836      	ldr	r6, [r6, #0]
 8009862:	e7f7      	b.n	8009854 <__sfp+0x18>
 8009864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009868:	b9d5      	cbnz	r5, 80098a0 <__sfp+0x64>
 800986a:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <__sfp+0x88>)
 800986c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009870:	60e3      	str	r3, [r4, #12]
 8009872:	6665      	str	r5, [r4, #100]	; 0x64
 8009874:	f000 f847 	bl	8009906 <__retarget_lock_init_recursive>
 8009878:	f7ff ff96 	bl	80097a8 <__sfp_lock_release>
 800987c:	2208      	movs	r2, #8
 800987e:	4629      	mov	r1, r5
 8009880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009888:	6025      	str	r5, [r4, #0]
 800988a:	61a5      	str	r5, [r4, #24]
 800988c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009890:	f7fb fd16 	bl	80052c0 <memset>
 8009894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009898:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800989c:	4620      	mov	r0, r4
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a0:	3468      	adds	r4, #104	; 0x68
 80098a2:	e7d9      	b.n	8009858 <__sfp+0x1c>
 80098a4:	2104      	movs	r1, #4
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7ff ff62 	bl	8009770 <__sfmoreglue>
 80098ac:	4604      	mov	r4, r0
 80098ae:	6030      	str	r0, [r6, #0]
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1d5      	bne.n	8009860 <__sfp+0x24>
 80098b4:	f7ff ff78 	bl	80097a8 <__sfp_lock_release>
 80098b8:	230c      	movs	r3, #12
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	e7ee      	b.n	800989c <__sfp+0x60>
 80098be:	bf00      	nop
 80098c0:	08009cd8 	.word	0x08009cd8
 80098c4:	ffff0001 	.word	0xffff0001

080098c8 <_fwalk_reent>:
 80098c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098cc:	4606      	mov	r6, r0
 80098ce:	4688      	mov	r8, r1
 80098d0:	2700      	movs	r7, #0
 80098d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098da:	f1b9 0901 	subs.w	r9, r9, #1
 80098de:	d505      	bpl.n	80098ec <_fwalk_reent+0x24>
 80098e0:	6824      	ldr	r4, [r4, #0]
 80098e2:	2c00      	cmp	r4, #0
 80098e4:	d1f7      	bne.n	80098d6 <_fwalk_reent+0xe>
 80098e6:	4638      	mov	r0, r7
 80098e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ec:	89ab      	ldrh	r3, [r5, #12]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d907      	bls.n	8009902 <_fwalk_reent+0x3a>
 80098f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098f6:	3301      	adds	r3, #1
 80098f8:	d003      	beq.n	8009902 <_fwalk_reent+0x3a>
 80098fa:	4629      	mov	r1, r5
 80098fc:	4630      	mov	r0, r6
 80098fe:	47c0      	blx	r8
 8009900:	4307      	orrs	r7, r0
 8009902:	3568      	adds	r5, #104	; 0x68
 8009904:	e7e9      	b.n	80098da <_fwalk_reent+0x12>

08009906 <__retarget_lock_init_recursive>:
 8009906:	4770      	bx	lr

08009908 <__retarget_lock_acquire_recursive>:
 8009908:	4770      	bx	lr

0800990a <__retarget_lock_release_recursive>:
 800990a:	4770      	bx	lr

0800990c <__swhatbuf_r>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	460e      	mov	r6, r1
 8009910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009914:	4614      	mov	r4, r2
 8009916:	2900      	cmp	r1, #0
 8009918:	461d      	mov	r5, r3
 800991a:	b096      	sub	sp, #88	; 0x58
 800991c:	da08      	bge.n	8009930 <__swhatbuf_r+0x24>
 800991e:	2200      	movs	r2, #0
 8009920:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009924:	602a      	str	r2, [r5, #0]
 8009926:	061a      	lsls	r2, r3, #24
 8009928:	d410      	bmi.n	800994c <__swhatbuf_r+0x40>
 800992a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800992e:	e00e      	b.n	800994e <__swhatbuf_r+0x42>
 8009930:	466a      	mov	r2, sp
 8009932:	f000 f951 	bl	8009bd8 <_fstat_r>
 8009936:	2800      	cmp	r0, #0
 8009938:	dbf1      	blt.n	800991e <__swhatbuf_r+0x12>
 800993a:	9a01      	ldr	r2, [sp, #4]
 800993c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009940:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009944:	425a      	negs	r2, r3
 8009946:	415a      	adcs	r2, r3
 8009948:	602a      	str	r2, [r5, #0]
 800994a:	e7ee      	b.n	800992a <__swhatbuf_r+0x1e>
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	2000      	movs	r0, #0
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	b016      	add	sp, #88	; 0x58
 8009954:	bd70      	pop	{r4, r5, r6, pc}
	...

08009958 <__smakebuf_r>:
 8009958:	898b      	ldrh	r3, [r1, #12]
 800995a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800995c:	079d      	lsls	r5, r3, #30
 800995e:	4606      	mov	r6, r0
 8009960:	460c      	mov	r4, r1
 8009962:	d507      	bpl.n	8009974 <__smakebuf_r+0x1c>
 8009964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	2301      	movs	r3, #1
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	b002      	add	sp, #8
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	466a      	mov	r2, sp
 8009976:	ab01      	add	r3, sp, #4
 8009978:	f7ff ffc8 	bl	800990c <__swhatbuf_r>
 800997c:	9900      	ldr	r1, [sp, #0]
 800997e:	4605      	mov	r5, r0
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff f9e5 	bl	8008d50 <_malloc_r>
 8009986:	b948      	cbnz	r0, 800999c <__smakebuf_r+0x44>
 8009988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d4ef      	bmi.n	8009970 <__smakebuf_r+0x18>
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7e3      	b.n	8009964 <__smakebuf_r+0xc>
 800999c:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <__smakebuf_r+0x7c>)
 800999e:	62b3      	str	r3, [r6, #40]	; 0x28
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	6120      	str	r0, [r4, #16]
 80099ae:	6163      	str	r3, [r4, #20]
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	b15b      	cbz	r3, 80099cc <__smakebuf_r+0x74>
 80099b4:	4630      	mov	r0, r6
 80099b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ba:	f000 f91f 	bl	8009bfc <_isatty_r>
 80099be:	b128      	cbz	r0, 80099cc <__smakebuf_r+0x74>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	89a0      	ldrh	r0, [r4, #12]
 80099ce:	4305      	orrs	r5, r0
 80099d0:	81a5      	strh	r5, [r4, #12]
 80099d2:	e7cd      	b.n	8009970 <__smakebuf_r+0x18>
 80099d4:	08009765 	.word	0x08009765

080099d8 <memmove>:
 80099d8:	4288      	cmp	r0, r1
 80099da:	b510      	push	{r4, lr}
 80099dc:	eb01 0402 	add.w	r4, r1, r2
 80099e0:	d902      	bls.n	80099e8 <memmove+0x10>
 80099e2:	4284      	cmp	r4, r0
 80099e4:	4623      	mov	r3, r4
 80099e6:	d807      	bhi.n	80099f8 <memmove+0x20>
 80099e8:	1e43      	subs	r3, r0, #1
 80099ea:	42a1      	cmp	r1, r4
 80099ec:	d008      	beq.n	8009a00 <memmove+0x28>
 80099ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099f6:	e7f8      	b.n	80099ea <memmove+0x12>
 80099f8:	4601      	mov	r1, r0
 80099fa:	4402      	add	r2, r0
 80099fc:	428a      	cmp	r2, r1
 80099fe:	d100      	bne.n	8009a02 <memmove+0x2a>
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a0a:	e7f7      	b.n	80099fc <memmove+0x24>

08009a0c <__malloc_lock>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__malloc_lock+0x8>)
 8009a0e:	f7ff bf7b 	b.w	8009908 <__retarget_lock_acquire_recursive>
 8009a12:	bf00      	nop
 8009a14:	20000384 	.word	0x20000384

08009a18 <__malloc_unlock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__malloc_unlock+0x8>)
 8009a1a:	f7ff bf76 	b.w	800990a <__retarget_lock_release_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20000384 	.word	0x20000384

08009a24 <_realloc_r>:
 8009a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a28:	4680      	mov	r8, r0
 8009a2a:	4614      	mov	r4, r2
 8009a2c:	460e      	mov	r6, r1
 8009a2e:	b921      	cbnz	r1, 8009a3a <_realloc_r+0x16>
 8009a30:	4611      	mov	r1, r2
 8009a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	f7ff b98b 	b.w	8008d50 <_malloc_r>
 8009a3a:	b92a      	cbnz	r2, 8009a48 <_realloc_r+0x24>
 8009a3c:	f7ff f920 	bl	8008c80 <_free_r>
 8009a40:	4625      	mov	r5, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a48:	f000 f8fa 	bl	8009c40 <_malloc_usable_size_r>
 8009a4c:	4284      	cmp	r4, r0
 8009a4e:	4607      	mov	r7, r0
 8009a50:	d802      	bhi.n	8009a58 <_realloc_r+0x34>
 8009a52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a56:	d812      	bhi.n	8009a7e <_realloc_r+0x5a>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f7ff f978 	bl	8008d50 <_malloc_r>
 8009a60:	4605      	mov	r5, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0ed      	beq.n	8009a42 <_realloc_r+0x1e>
 8009a66:	42bc      	cmp	r4, r7
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	bf28      	it	cs
 8009a6e:	463a      	movcs	r2, r7
 8009a70:	f7fe fc2c 	bl	80082cc <memcpy>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4640      	mov	r0, r8
 8009a78:	f7ff f902 	bl	8008c80 <_free_r>
 8009a7c:	e7e1      	b.n	8009a42 <_realloc_r+0x1e>
 8009a7e:	4635      	mov	r5, r6
 8009a80:	e7df      	b.n	8009a42 <_realloc_r+0x1e>

08009a82 <_raise_r>:
 8009a82:	291f      	cmp	r1, #31
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4604      	mov	r4, r0
 8009a88:	460d      	mov	r5, r1
 8009a8a:	d904      	bls.n	8009a96 <_raise_r+0x14>
 8009a8c:	2316      	movs	r3, #22
 8009a8e:	6003      	str	r3, [r0, #0]
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a94:	bd38      	pop	{r3, r4, r5, pc}
 8009a96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a98:	b112      	cbz	r2, 8009aa0 <_raise_r+0x1e>
 8009a9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a9e:	b94b      	cbnz	r3, 8009ab4 <_raise_r+0x32>
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 f831 	bl	8009b08 <_getpid_r>
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	4601      	mov	r1, r0
 8009aaa:	4620      	mov	r0, r4
 8009aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab0:	f000 b818 	b.w	8009ae4 <_kill_r>
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d00a      	beq.n	8009ace <_raise_r+0x4c>
 8009ab8:	1c59      	adds	r1, r3, #1
 8009aba:	d103      	bne.n	8009ac4 <_raise_r+0x42>
 8009abc:	2316      	movs	r3, #22
 8009abe:	6003      	str	r3, [r0, #0]
 8009ac0:	2001      	movs	r0, #1
 8009ac2:	e7e7      	b.n	8009a94 <_raise_r+0x12>
 8009ac4:	2400      	movs	r4, #0
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009acc:	4798      	blx	r3
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e7e0      	b.n	8009a94 <_raise_r+0x12>
	...

08009ad4 <raise>:
 8009ad4:	4b02      	ldr	r3, [pc, #8]	; (8009ae0 <raise+0xc>)
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	f7ff bfd2 	b.w	8009a82 <_raise_r>
 8009ade:	bf00      	nop
 8009ae0:	20000010 	.word	0x20000010

08009ae4 <_kill_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4d06      	ldr	r5, [pc, #24]	; (8009b04 <_kill_r+0x20>)
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	f7f8 f938 	bl	8001d66 <_kill>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	d102      	bne.n	8009b00 <_kill_r+0x1c>
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	b103      	cbz	r3, 8009b00 <_kill_r+0x1c>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	bf00      	nop
 8009b04:	20000388 	.word	0x20000388

08009b08 <_getpid_r>:
 8009b08:	f7f8 b926 	b.w	8001d58 <_getpid>

08009b0c <__sread>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	460c      	mov	r4, r1
 8009b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b14:	f000 f89c 	bl	8009c50 <_read_r>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	bfab      	itete	ge
 8009b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b20:	181b      	addge	r3, r3, r0
 8009b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b26:	bfac      	ite	ge
 8009b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b2a:	81a3      	strhlt	r3, [r4, #12]
 8009b2c:	bd10      	pop	{r4, pc}

08009b2e <__swrite>:
 8009b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b32:	461f      	mov	r7, r3
 8009b34:	898b      	ldrh	r3, [r1, #12]
 8009b36:	4605      	mov	r5, r0
 8009b38:	05db      	lsls	r3, r3, #23
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4616      	mov	r6, r2
 8009b3e:	d505      	bpl.n	8009b4c <__swrite+0x1e>
 8009b40:	2302      	movs	r3, #2
 8009b42:	2200      	movs	r2, #0
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	f000 f868 	bl	8009c1c <_lseek_r>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	4632      	mov	r2, r6
 8009b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	4628      	mov	r0, r5
 8009b58:	463b      	mov	r3, r7
 8009b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b62:	f000 b817 	b.w	8009b94 <_write_r>

08009b66 <__sseek>:
 8009b66:	b510      	push	{r4, lr}
 8009b68:	460c      	mov	r4, r1
 8009b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6e:	f000 f855 	bl	8009c1c <_lseek_r>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	bf15      	itete	ne
 8009b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b82:	81a3      	strheq	r3, [r4, #12]
 8009b84:	bf18      	it	ne
 8009b86:	81a3      	strhne	r3, [r4, #12]
 8009b88:	bd10      	pop	{r4, pc}

08009b8a <__sclose>:
 8009b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8e:	f000 b813 	b.w	8009bb8 <_close_r>
	...

08009b94 <_write_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4d05      	ldr	r5, [pc, #20]	; (8009bb4 <_write_r+0x20>)
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f8 f916 	bl	8001dd4 <_write>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_write_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_write_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20000388 	.word	0x20000388

08009bb8 <_close_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4d05      	ldr	r5, [pc, #20]	; (8009bd4 <_close_r+0x1c>)
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7f8 f922 	bl	8001e0c <_close>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_close_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_close_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000388 	.word	0x20000388

08009bd8 <_fstat_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_fstat_r+0x20>)
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f8 f91c 	bl	8001e22 <_fstat>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_fstat_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_fstat_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000388 	.word	0x20000388

08009bfc <_isatty_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4d05      	ldr	r5, [pc, #20]	; (8009c18 <_isatty_r+0x1c>)
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f8 f91a 	bl	8001e40 <_isatty>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_isatty_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_isatty_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20000388 	.word	0x20000388

08009c1c <_lseek_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	4611      	mov	r1, r2
 8009c24:	2200      	movs	r2, #0
 8009c26:	4d05      	ldr	r5, [pc, #20]	; (8009c3c <_lseek_r+0x20>)
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7f8 f912 	bl	8001e54 <_lseek>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_lseek_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_lseek_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	20000388 	.word	0x20000388

08009c40 <_malloc_usable_size_r>:
 8009c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c44:	1f18      	subs	r0, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfbc      	itt	lt
 8009c4a:	580b      	ldrlt	r3, [r1, r0]
 8009c4c:	18c0      	addlt	r0, r0, r3
 8009c4e:	4770      	bx	lr

08009c50 <_read_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4604      	mov	r4, r0
 8009c54:	4608      	mov	r0, r1
 8009c56:	4611      	mov	r1, r2
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4d05      	ldr	r5, [pc, #20]	; (8009c70 <_read_r+0x20>)
 8009c5c:	602a      	str	r2, [r5, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f7f8 f89b 	bl	8001d9a <_read>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_read_r+0x1e>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_read_r+0x1e>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000388 	.word	0x20000388

08009c74 <_init>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr

08009c80 <_fini>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr
